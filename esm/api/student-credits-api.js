/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * StudentCreditsApi - axios parameter creator
 * @export
 */
export const StudentCreditsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {StudentCreditCommandsCreateCommand} [studentCreditCommandsCreateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCredits: (studentCreditCommandsCreateCommand, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/StudentCredits/Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(studentCreditCommandsCreateCommand, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {number} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsByIdCredits: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/StudentCredits/GetDetailsById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownStudents: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/StudentCredits/GetDropDownStudents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {number} [page]
         * @param {number} [itemPerPage]
         * @param {string} [searchKeyword] Film kategorisinde arama yapÄ±lacak kelime
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudentCredits: (page, itemPerPage, searchKeyword, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/StudentCredits/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }
            if (itemPerPage !== undefined) {
                localVarQueryParameter['ItemPerPage'] = itemPerPage;
            }
            if (searchKeyword !== undefined) {
                localVarQueryParameter['SearchKeyword'] = searchKeyword;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {StudentCreditCommandsUpdateCommand} [studentCreditCommandsUpdateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCredits: (studentCreditCommandsUpdateCommand, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/StudentCredits/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(studentCreditCommandsUpdateCommand, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * StudentCreditsApi - functional programming interface
 * @export
 */
export const StudentCreditsApiFp = function (configuration) {
    const localVarAxiosParamCreator = StudentCreditsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {StudentCreditCommandsCreateCommand} [studentCreditCommandsCreateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCredits(studentCreditCommandsCreateCommand, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createCredits(studentCreditCommandsCreateCommand, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {number} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsByIdCredits(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDetailsByIdCredits(id, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownStudents(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDropDownStudents(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {number} [page]
         * @param {number} [itemPerPage]
         * @param {string} [searchKeyword] Film kategorisinde arama yapÄ±lacak kelime
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudentCredits(page, itemPerPage, searchKeyword, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listStudentCredits(page, itemPerPage, searchKeyword, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {StudentCreditCommandsUpdateCommand} [studentCreditCommandsUpdateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCredits(studentCreditCommandsUpdateCommand, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateCredits(studentCreditCommandsUpdateCommand, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * StudentCreditsApi - factory interface
 * @export
 */
export const StudentCreditsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = StudentCreditsApiFp(configuration);
    return {
        /**
         *
         * @param {StudentCreditCommandsCreateCommand} [studentCreditCommandsCreateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCredits(studentCreditCommandsCreateCommand, options) {
            return localVarFp.createCredits(studentCreditCommandsCreateCommand, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsByIdCredits(id, options) {
            return localVarFp.getDetailsByIdCredits(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownStudents(options) {
            return localVarFp.getDropDownStudents(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} [page]
         * @param {number} [itemPerPage]
         * @param {string} [searchKeyword] Film kategorisinde arama yapÄ±lacak kelime
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudentCredits(page, itemPerPage, searchKeyword, options) {
            return localVarFp.listStudentCredits(page, itemPerPage, searchKeyword, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {StudentCreditCommandsUpdateCommand} [studentCreditCommandsUpdateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCredits(studentCreditCommandsUpdateCommand, options) {
            return localVarFp.updateCredits(studentCreditCommandsUpdateCommand, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * StudentCreditsApi - object-oriented interface
 * @export
 * @class StudentCreditsApi
 * @extends {BaseAPI}
 */
export class StudentCreditsApi extends BaseAPI {
    /**
     *
     * @param {StudentCreditCommandsCreateCommand} [studentCreditCommandsCreateCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentCreditsApi
     */
    createCredits(studentCreditCommandsCreateCommand, options) {
        return StudentCreditsApiFp(this.configuration).createCredits(studentCreditCommandsCreateCommand, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentCreditsApi
     */
    getDetailsByIdCredits(id, options) {
        return StudentCreditsApiFp(this.configuration).getDetailsByIdCredits(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentCreditsApi
     */
    getDropDownStudents(options) {
        return StudentCreditsApiFp(this.configuration).getDropDownStudents(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} [page]
     * @param {number} [itemPerPage]
     * @param {string} [searchKeyword] Film kategorisinde arama yapÄ±lacak kelime
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentCreditsApi
     */
    listStudentCredits(page, itemPerPage, searchKeyword, options) {
        return StudentCreditsApiFp(this.configuration).listStudentCredits(page, itemPerPage, searchKeyword, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {StudentCreditCommandsUpdateCommand} [studentCreditCommandsUpdateCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentCreditsApi
     */
    updateCredits(studentCreditCommandsUpdateCommand, options) {
        return StudentCreditsApiFp(this.configuration).updateCredits(studentCreditCommandsUpdateCommand, options).then((request) => request(this.axios, this.basePath));
    }
}

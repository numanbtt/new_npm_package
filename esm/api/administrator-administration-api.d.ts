/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AdministratorAdministrationCommandsCreateAdministratorCommandResult } from '../models';
import { AdministratorAdministrationQueriesListQueryResult } from '../models';
/**
 * AdministratorAdministrationApi - axios parameter creator
 * @export
 */
export declare const AdministratorAdministrationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Sistem yöneticisinin email adresini değiştirmeyi sağlar
     * @param {number} [administratorId]
     * @param {string} [administratorEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeAdministratorEmail: (administratorId?: number, administratorEmail?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Sistem yöneticisinin şifresini değiştirmeyi sağlar
     * @param {number} [administratorId]
     * @param {string} [administratorPassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeAdministratorPassword: (administratorId?: number, administratorPassword?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Sistem yöneticisi eklemeyi sağlar
     * @param {string} [name]
     * @param {string} [eMail]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAdministrator: (name?: string, eMail?: string, password?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Sistem yöneticisi silmeyi sağlar
     * @param {number} [administratorId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAdministrator: (administratorId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Sistem yöneticilerini listelemeyi sağlar
     * @param {number} [page]
     * @param {number} [itemPerPage]
     * @param {string} [searchKeyword] Admin listesinde arama yapılacak kelimeyi barındırır
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAdministrators: (page?: number, itemPerPage?: number, searchKeyword?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdministratorAdministrationApi - functional programming interface
 * @export
 */
export declare const AdministratorAdministrationApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Sistem yöneticisinin email adresini değiştirmeyi sağlar
     * @param {number} [administratorId]
     * @param {string} [administratorEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeAdministratorEmail(administratorId?: number, administratorEmail?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Sistem yöneticisinin şifresini değiştirmeyi sağlar
     * @param {number} [administratorId]
     * @param {string} [administratorPassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeAdministratorPassword(administratorId?: number, administratorPassword?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Sistem yöneticisi eklemeyi sağlar
     * @param {string} [name]
     * @param {string} [eMail]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAdministrator(name?: string, eMail?: string, password?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdministratorAdministrationCommandsCreateAdministratorCommandResult>>;
    /**
     *
     * @summary Sistem yöneticisi silmeyi sağlar
     * @param {number} [administratorId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAdministrator(administratorId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Sistem yöneticilerini listelemeyi sağlar
     * @param {number} [page]
     * @param {number} [itemPerPage]
     * @param {string} [searchKeyword] Admin listesinde arama yapılacak kelimeyi barındırır
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAdministrators(page?: number, itemPerPage?: number, searchKeyword?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdministratorAdministrationQueriesListQueryResult>>;
};
/**
 * AdministratorAdministrationApi - factory interface
 * @export
 */
export declare const AdministratorAdministrationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Sistem yöneticisinin email adresini değiştirmeyi sağlar
     * @param {number} [administratorId]
     * @param {string} [administratorEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeAdministratorEmail(administratorId?: number, administratorEmail?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Sistem yöneticisinin şifresini değiştirmeyi sağlar
     * @param {number} [administratorId]
     * @param {string} [administratorPassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeAdministratorPassword(administratorId?: number, administratorPassword?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Sistem yöneticisi eklemeyi sağlar
     * @param {string} [name]
     * @param {string} [eMail]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAdministrator(name?: string, eMail?: string, password?: string, options?: any): AxiosPromise<AdministratorAdministrationCommandsCreateAdministratorCommandResult>;
    /**
     *
     * @summary Sistem yöneticisi silmeyi sağlar
     * @param {number} [administratorId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAdministrator(administratorId?: number, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Sistem yöneticilerini listelemeyi sağlar
     * @param {number} [page]
     * @param {number} [itemPerPage]
     * @param {string} [searchKeyword] Admin listesinde arama yapılacak kelimeyi barındırır
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAdministrators(page?: number, itemPerPage?: number, searchKeyword?: string, options?: any): AxiosPromise<AdministratorAdministrationQueriesListQueryResult>;
};
/**
 * AdministratorAdministrationApi - interface
 * @export
 * @interface AdministratorAdministrationApi
 */
export interface AdministratorAdministrationApiInterface {
    /**
     *
     * @summary Sistem yöneticisinin email adresini değiştirmeyi sağlar
     * @param {number} [administratorId]
     * @param {string} [administratorEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorAdministrationApiInterface
     */
    changeAdministratorEmail(administratorId?: number, administratorEmail?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Sistem yöneticisinin şifresini değiştirmeyi sağlar
     * @param {number} [administratorId]
     * @param {string} [administratorPassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorAdministrationApiInterface
     */
    changeAdministratorPassword(administratorId?: number, administratorPassword?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Sistem yöneticisi eklemeyi sağlar
     * @param {string} [name]
     * @param {string} [eMail]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorAdministrationApiInterface
     */
    createAdministrator(name?: string, eMail?: string, password?: string, options?: AxiosRequestConfig): AxiosPromise<AdministratorAdministrationCommandsCreateAdministratorCommandResult>;
    /**
     *
     * @summary Sistem yöneticisi silmeyi sağlar
     * @param {number} [administratorId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorAdministrationApiInterface
     */
    deleteAdministrator(administratorId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Sistem yöneticilerini listelemeyi sağlar
     * @param {number} [page]
     * @param {number} [itemPerPage]
     * @param {string} [searchKeyword] Admin listesinde arama yapılacak kelimeyi barındırır
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorAdministrationApiInterface
     */
    listAdministrators(page?: number, itemPerPage?: number, searchKeyword?: string, options?: AxiosRequestConfig): AxiosPromise<AdministratorAdministrationQueriesListQueryResult>;
}
/**
 * AdministratorAdministrationApi - object-oriented interface
 * @export
 * @class AdministratorAdministrationApi
 * @extends {BaseAPI}
 */
export declare class AdministratorAdministrationApi extends BaseAPI implements AdministratorAdministrationApiInterface {
    /**
     *
     * @summary Sistem yöneticisinin email adresini değiştirmeyi sağlar
     * @param {number} [administratorId]
     * @param {string} [administratorEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorAdministrationApi
     */
    changeAdministratorEmail(administratorId?: number, administratorEmail?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Sistem yöneticisinin şifresini değiştirmeyi sağlar
     * @param {number} [administratorId]
     * @param {string} [administratorPassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorAdministrationApi
     */
    changeAdministratorPassword(administratorId?: number, administratorPassword?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Sistem yöneticisi eklemeyi sağlar
     * @param {string} [name]
     * @param {string} [eMail]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorAdministrationApi
     */
    createAdministrator(name?: string, eMail?: string, password?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AdministratorAdministrationCommandsCreateAdministratorCommandResult, any>>;
    /**
     *
     * @summary Sistem yöneticisi silmeyi sağlar
     * @param {number} [administratorId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorAdministrationApi
     */
    deleteAdministrator(administratorId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Sistem yöneticilerini listelemeyi sağlar
     * @param {number} [page]
     * @param {number} [itemPerPage]
     * @param {string} [searchKeyword] Admin listesinde arama yapılacak kelimeyi barındırır
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorAdministrationApi
     */
    listAdministrators(page?: number, itemPerPage?: number, searchKeyword?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AdministratorAdministrationQueriesListQueryResult, any>>;
}

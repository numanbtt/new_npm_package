/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * AppointmentAdministrationApi - axios parameter creator
 * @export
 */
export const AppointmentAdministrationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Bir randevuyu iptal eder.
         * @param {number} [appointmentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAppointmentAsAdmin: (appointmentId, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/AppointmentAdministration/CancelAppointment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (appointmentId !== undefined) {
                localVarQueryParameter['AppointmentId'] = appointmentId;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğrencinin tüm(geçmiş, gelecek) randevularını listeler.
         * @param {number} studentId
         * @param {number} [page]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppointmentsOfTheStudent: (studentId, page, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('listAppointmentsOfTheStudent', 'studentId', studentId);
            const localVarPath = `/api/AppointmentAdministration/ListAppointmentsOfTheStudent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }
            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğretmenin tüm(geçmiş, gelecek) randevularını listeler.
         * @param {number} teacherId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppointmentsOfTheTeacher: (teacherId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teacherId' is not null or undefined
            assertParamExists('listAppointmentsOfTheTeacher', 'teacherId', teacherId);
            const localVarPath = `/api/AppointmentAdministration/ListAppointmentsOfTheTeacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {number} [teacherId]
         * @param {string} [startdate]
         * @param {string} [endDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppointmentsTeacherForPay: (teacherId, startdate, endDate, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/AppointmentAdministration/ListAppointmentsTeacherForPay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            if (startdate !== undefined) {
                localVarQueryParameter['Startdate'] = (startdate instanceof Date) ?
                    startdate.toISOString() :
                    startdate;
            }
            if (endDate !== undefined) {
                localVarQueryParameter['EndDate'] = (endDate instanceof Date) ?
                    endDate.toISOString() :
                    endDate;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {number} [teacherSalaryId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaidAppointmentDetail: (teacherSalaryId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/AppointmentAdministration/ListPaidAppointmentDetail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (teacherSalaryId !== undefined) {
                localVarQueryParameter['TeacherSalaryId'] = teacherSalaryId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AppointmentAdministrationApi - functional programming interface
 * @export
 */
export const AppointmentAdministrationApiFp = function (configuration) {
    const localVarAxiosParamCreator = AppointmentAdministrationApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Bir randevuyu iptal eder.
         * @param {number} [appointmentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAppointmentAsAdmin(appointmentId, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cancelAppointmentAsAdmin(appointmentId, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğrencinin tüm(geçmiş, gelecek) randevularını listeler.
         * @param {number} studentId
         * @param {number} [page]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppointmentsOfTheStudent(studentId, page, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAppointmentsOfTheStudent(studentId, page, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğretmenin tüm(geçmiş, gelecek) randevularını listeler.
         * @param {number} teacherId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppointmentsOfTheTeacher(teacherId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAppointmentsOfTheTeacher(teacherId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {number} [teacherId]
         * @param {string} [startdate]
         * @param {string} [endDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppointmentsTeacherForPay(teacherId, startdate, endDate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAppointmentsTeacherForPay(teacherId, startdate, endDate, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {number} [teacherSalaryId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaidAppointmentDetail(teacherSalaryId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listPaidAppointmentDetail(teacherSalaryId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * AppointmentAdministrationApi - factory interface
 * @export
 */
export const AppointmentAdministrationApiFactory = function (configuration, basePath, axios) {
    const localVarFp = AppointmentAdministrationApiFp(configuration);
    return {
        /**
         *
         * @summary Bir randevuyu iptal eder.
         * @param {number} [appointmentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAppointmentAsAdmin(appointmentId, reason, options) {
            return localVarFp.cancelAppointmentAsAdmin(appointmentId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğrencinin tüm(geçmiş, gelecek) randevularını listeler.
         * @param {number} studentId
         * @param {number} [page]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppointmentsOfTheStudent(studentId, page, options) {
            return localVarFp.listAppointmentsOfTheStudent(studentId, page, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğretmenin tüm(geçmiş, gelecek) randevularını listeler.
         * @param {number} teacherId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppointmentsOfTheTeacher(teacherId, options) {
            return localVarFp.listAppointmentsOfTheTeacher(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} [teacherId]
         * @param {string} [startdate]
         * @param {string} [endDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAppointmentsTeacherForPay(teacherId, startdate, endDate, options) {
            return localVarFp.listAppointmentsTeacherForPay(teacherId, startdate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} [teacherSalaryId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaidAppointmentDetail(teacherSalaryId, options) {
            return localVarFp.listPaidAppointmentDetail(teacherSalaryId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AppointmentAdministrationApi - object-oriented interface
 * @export
 * @class AppointmentAdministrationApi
 * @extends {BaseAPI}
 */
export class AppointmentAdministrationApi extends BaseAPI {
    /**
     *
     * @summary Bir randevuyu iptal eder.
     * @param {number} [appointmentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApi
     */
    cancelAppointmentAsAdmin(appointmentId, reason, options) {
        return AppointmentAdministrationApiFp(this.configuration).cancelAppointmentAsAdmin(appointmentId, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğrencinin tüm(geçmiş, gelecek) randevularını listeler.
     * @param {number} studentId
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApi
     */
    listAppointmentsOfTheStudent(studentId, page, options) {
        return AppointmentAdministrationApiFp(this.configuration).listAppointmentsOfTheStudent(studentId, page, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğretmenin tüm(geçmiş, gelecek) randevularını listeler.
     * @param {number} teacherId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApi
     */
    listAppointmentsOfTheTeacher(teacherId, options) {
        return AppointmentAdministrationApiFp(this.configuration).listAppointmentsOfTheTeacher(teacherId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} [teacherId]
     * @param {string} [startdate]
     * @param {string} [endDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApi
     */
    listAppointmentsTeacherForPay(teacherId, startdate, endDate, options) {
        return AppointmentAdministrationApiFp(this.configuration).listAppointmentsTeacherForPay(teacherId, startdate, endDate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} [teacherSalaryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApi
     */
    listPaidAppointmentDetail(teacherSalaryId, options) {
        return AppointmentAdministrationApiFp(this.configuration).listPaidAppointmentDetail(teacherSalaryId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { LegalDocumentAdministrationQueriesGetAllQueryResult } from '../models';
/**
 * LegalDocumentAdministrationApi - axios parameter creator
 * @export
 */
export declare const LegalDocumentAdministrationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Belirlenen dökümanın içeriğini değiştirir.
     * @param {number} [legalDocumentId]
     * @param {string} [content]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeContentOfTheLegalDocument: (legalDocumentId?: number, content?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Belirlenen dökümanın kısa adını değiştirir.
     * @param {number} [legalDocumentId]
     * @param {string} [slug]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeSlugOfTheLegalDocument: (legalDocumentId?: number, slug?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Belirlenen dökümanın başlığını değiştirir.
     * @param {number} [legalDocumentId]
     * @param {string} [title]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTitleOfTheLegalDocument: (legalDocumentId?: number, title?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Sistemde kayıtlı tüm yasal dökümanları getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllLegalDocumentsForAdministration: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * LegalDocumentAdministrationApi - functional programming interface
 * @export
 */
export declare const LegalDocumentAdministrationApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Belirlenen dökümanın içeriğini değiştirir.
     * @param {number} [legalDocumentId]
     * @param {string} [content]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeContentOfTheLegalDocument(legalDocumentId?: number, content?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Belirlenen dökümanın kısa adını değiştirir.
     * @param {number} [legalDocumentId]
     * @param {string} [slug]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeSlugOfTheLegalDocument(legalDocumentId?: number, slug?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Belirlenen dökümanın başlığını değiştirir.
     * @param {number} [legalDocumentId]
     * @param {string} [title]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTitleOfTheLegalDocument(legalDocumentId?: number, title?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Sistemde kayıtlı tüm yasal dökümanları getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllLegalDocumentsForAdministration(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LegalDocumentAdministrationQueriesGetAllQueryResult>>;
};
/**
 * LegalDocumentAdministrationApi - factory interface
 * @export
 */
export declare const LegalDocumentAdministrationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Belirlenen dökümanın içeriğini değiştirir.
     * @param {number} [legalDocumentId]
     * @param {string} [content]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeContentOfTheLegalDocument(legalDocumentId?: number, content?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Belirlenen dökümanın kısa adını değiştirir.
     * @param {number} [legalDocumentId]
     * @param {string} [slug]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeSlugOfTheLegalDocument(legalDocumentId?: number, slug?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Belirlenen dökümanın başlığını değiştirir.
     * @param {number} [legalDocumentId]
     * @param {string} [title]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTitleOfTheLegalDocument(legalDocumentId?: number, title?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Sistemde kayıtlı tüm yasal dökümanları getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllLegalDocumentsForAdministration(options?: any): AxiosPromise<LegalDocumentAdministrationQueriesGetAllQueryResult>;
};
/**
 * LegalDocumentAdministrationApi - interface
 * @export
 * @interface LegalDocumentAdministrationApi
 */
export interface LegalDocumentAdministrationApiInterface {
    /**
     *
     * @summary Belirlenen dökümanın içeriğini değiştirir.
     * @param {number} [legalDocumentId]
     * @param {string} [content]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalDocumentAdministrationApiInterface
     */
    changeContentOfTheLegalDocument(legalDocumentId?: number, content?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Belirlenen dökümanın kısa adını değiştirir.
     * @param {number} [legalDocumentId]
     * @param {string} [slug]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalDocumentAdministrationApiInterface
     */
    changeSlugOfTheLegalDocument(legalDocumentId?: number, slug?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Belirlenen dökümanın başlığını değiştirir.
     * @param {number} [legalDocumentId]
     * @param {string} [title]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalDocumentAdministrationApiInterface
     */
    changeTitleOfTheLegalDocument(legalDocumentId?: number, title?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Sistemde kayıtlı tüm yasal dökümanları getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalDocumentAdministrationApiInterface
     */
    getAllLegalDocumentsForAdministration(options?: AxiosRequestConfig): AxiosPromise<LegalDocumentAdministrationQueriesGetAllQueryResult>;
}
/**
 * LegalDocumentAdministrationApi - object-oriented interface
 * @export
 * @class LegalDocumentAdministrationApi
 * @extends {BaseAPI}
 */
export declare class LegalDocumentAdministrationApi extends BaseAPI implements LegalDocumentAdministrationApiInterface {
    /**
     *
     * @summary Belirlenen dökümanın içeriğini değiştirir.
     * @param {number} [legalDocumentId]
     * @param {string} [content]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalDocumentAdministrationApi
     */
    changeContentOfTheLegalDocument(legalDocumentId?: number, content?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Belirlenen dökümanın kısa adını değiştirir.
     * @param {number} [legalDocumentId]
     * @param {string} [slug]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalDocumentAdministrationApi
     */
    changeSlugOfTheLegalDocument(legalDocumentId?: number, slug?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Belirlenen dökümanın başlığını değiştirir.
     * @param {number} [legalDocumentId]
     * @param {string} [title]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalDocumentAdministrationApi
     */
    changeTitleOfTheLegalDocument(legalDocumentId?: number, title?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Sistemde kayıtlı tüm yasal dökümanları getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalDocumentAdministrationApi
     */
    getAllLegalDocumentsForAdministration(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LegalDocumentAdministrationQueriesGetAllQueryResult, any>>;
}

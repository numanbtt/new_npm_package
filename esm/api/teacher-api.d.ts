/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { TeacherCommandsLoginWithDirectAuthCommandResult } from '../models';
import { TeacherCommandsRegisterCommandResult } from '../models';
import { TeacherCommandsStartToExportMyAllInformationsCommandResult } from '../models';
import { TeacherCommandsUpdateMySpecalitiesParemeters } from '../models';
import { TeacherCommandsUpdateProfilePhotoCommandResult } from '../models';
import { TeacherQueriesGetDetailsQueryResult } from '../models';
import { TeacherQueriesGetMyDetailsQueryResult } from '../models';
import { TeacherQueriesListMyExportsQueryResult } from '../models';
import { TeacherQueriesListMyFavoritesQueryResult } from '../models';
import { TeacherQueriesListQueryResult } from '../models';
import { TeacherQueriesMyEarningsQueryResult } from '../models';
import { TeacherQueriesMyRatingResultList } from '../models';
/**
 * TeacherApi - axios parameter creator
 * @export
 */
export declare const TeacherApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Öğretmene gelen anlık aramayı kabul etmesini sağlar.
     * @param {number} [callId]
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptCall: (callId?: number, teacherId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğrencinin öğretmeni engellemesini sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockTeacher: (teacherId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmenin açıklamasını değiştirir.
     * @param {string} [newDescription]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyDescription: (newDescription?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmenin sisteme kayıtlı IBAN bilgisini değiştirir.
     * @param {string} [bankName]
     * @param {string} [accountHolderName]
     * @param {string} [iban]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyIbanNumber: (bankName?: string, accountHolderName?: string, iban?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmenin çevrimiçi/çevrimdışı durumunu değiştirir.
     * @param {boolean} [isOnline]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyOnlineStatus: (isOnline?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmenin youtube video linkini değiştirir.
     * @param {string} [youtubeVideoUrl]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyYoutubeVideoUrl: (youtubeVideoUrl?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkStudentReview: (teacherId?: number, studentId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmenin hesabının silme isteğini admine mail olarak iletir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMyAccountAsTeacher: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğrencinin öğretmeni favoriye eklemesini sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    favoriteTeacher: (teacherId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmenin kendi detayını getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyDetailsAsTeacher: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmen\'in detayını getirir.
     * @param {number} teacherId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeacherDetails: (teacherId: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmenin dışa aktarılmaya hazır verilerini listeler.
     * @param {string} [lastCreatedAt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMyExportsAsTeacher: (lastCreatedAt?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Favori öğretmenleri listeler. Ayrıca isimle arama filtresi uygulanabilir.
     * @param {number} [lastTeacherId]
     * @param {string} [query]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMyFavoriteTeachers: (lastTeacherId?: number, query?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmenleri listeler. Ayrıca filtreler uygulanabilir.
     * @param {number} [lastId]
     * @param {string} [filtersQuery]
     * @param {Array<string>} [filtersTeachingStyles] Girilebilecek değerler:  KIND_AND_PATIENT,  FUN_AND_GREGARIOUS,  SCHOLARLY_AND_KNOWLEDGEABLE
     * @param {Array<string>} [filtersLessonTypes] Girilebilecek değerler:  PRONUNCIATION_LESSONS,  GRAMMAR_LESSONS,  LESSONS_WITH_MOVIES,  LESSONS_FOR_CHILDREN,  BUSINESS_ENGLISH,  UNIVERSITY_ENGLISH_PREPARATION,  EXAM,  TOEFL_PREPARATION,  IELTS_PREPARATION
     * @param {Array<string>} [filtersLanguageLevel] Girilebilecek değerler:  BEGINNER,  INTERMEDIATE,  ADVANCED
     * @param {Array<string>} [filtersAccentTypes] Girilebilecek değerler:  NATIVE_US,  NATIVE_BRITISH,  TURKISH,  OTHER
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeachers: (lastId?: number, filtersQuery?: string, filtersTeachingStyles?: Array<string>, filtersLessonTypes?: Array<string>, filtersLanguageLevel?: Array<string>, filtersAccentTypes?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginOutWithDirectAuthAsTeacher: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmenin eposta ve şifre ile giriş yapabilmesini sağlar.
     * @param {string} [email]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginWithDirectAuthAsTeacher: (email?: string, password?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmenin kazanç durumunu getirir.  Kazanç hesaplaması neye göre ve nasıl olacak?
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    myEarnings: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Görüşme sonrasında öğretmeni puanlar.
     * @param {number} [appointmentId]
     * @param {number} [rate]
     * @param {string} [comment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rateTeacher: (appointmentId?: number, rate?: number, comment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ratingDelete: (id?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ratingList: (teacherId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmen olarak kayıt olmayı sağlar
     * @param {File} [profilePhoto]
     * @param {string} [nameSurname]
     * @param {string} [eMail]
     * @param {string} [password]
     * @param {string} [phoneNumber]
     * @param {string} [description]
     * @param {string} [youtubeVideoUrl]
     * @param {string} [accent]
     * @param {string} [teachingStyles]
     * @param {string} [lessonTypes]
     * @param {string} [languageLevel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerAsTeacher: (profilePhoto?: File, nameSurname?: string, eMail?: string, password?: string, phoneNumber?: string, description?: string, youtubeVideoUrl?: string, accent?: string, teachingStyles?: string, lessonTypes?: string, languageLevel?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmene gelen anlık aramayı reddetmesini sağlar.
     * @param {number} [callId]
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectCall: (callId?: number, teacherId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğrencinin öğretmeni rapor etmesini sağlar.
     * @param {number} [teacherId]
     * @param {string} [content]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportTeacher: (teacherId?: number, content?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Kullanıcının tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startToExportMyAllInformationsAsTeacher: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [studentId]
     * @param {number} [rate]
     * @param {string} [comment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teacherRatePost: (teacherId?: number, studentId?: number, rate?: number, comment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğrencinin öğretmenin engelini kaldırmasını sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unblockTeacher: (teacherId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğrencinin öğretmeni favorilerinden kaldırmasını sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfavoriteTeacher: (teacherId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmenin profil fotoğrafını değiştirmesini sağlar.
     * @param {File} [photo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMyProfilePhotoAsTeacher: (photo?: File, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmen\'in kendi uzmanlıklarını güncelleyebilmesini sağlar.
     * @param {TeacherCommandsUpdateMySpecalitiesParemeters} [teacherCommandsUpdateMySpecalitiesParemeters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMySpecalities: (teacherCommandsUpdateMySpecalitiesParemeters?: TeacherCommandsUpdateMySpecalitiesParemeters, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TeacherApi - functional programming interface
 * @export
 */
export declare const TeacherApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Öğretmene gelen anlık aramayı kabul etmesini sağlar.
     * @param {number} [callId]
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptCall(callId?: number, teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğrencinin öğretmeni engellemesini sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockTeacher(teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğretmenin açıklamasını değiştirir.
     * @param {string} [newDescription]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyDescription(newDescription?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğretmenin sisteme kayıtlı IBAN bilgisini değiştirir.
     * @param {string} [bankName]
     * @param {string} [accountHolderName]
     * @param {string} [iban]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyIbanNumber(bankName?: string, accountHolderName?: string, iban?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğretmenin çevrimiçi/çevrimdışı durumunu değiştirir.
     * @param {boolean} [isOnline]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyOnlineStatus(isOnline?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğretmenin youtube video linkini değiştirir.
     * @param {string} [youtubeVideoUrl]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyYoutubeVideoUrl(youtubeVideoUrl?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkStudentReview(teacherId?: number, studentId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     *
     * @summary Öğretmenin hesabının silme isteğini admine mail olarak iletir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMyAccountAsTeacher(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğrencinin öğretmeni favoriye eklemesini sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    favoriteTeacher(teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğretmenin kendi detayını getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyDetailsAsTeacher(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherQueriesGetMyDetailsQueryResult>>;
    /**
     *
     * @summary Öğretmen\'in detayını getirir.
     * @param {number} teacherId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeacherDetails(teacherId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherQueriesGetDetailsQueryResult>>;
    /**
     *
     * @summary Öğretmenin dışa aktarılmaya hazır verilerini listeler.
     * @param {string} [lastCreatedAt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMyExportsAsTeacher(lastCreatedAt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherQueriesListMyExportsQueryResult>>;
    /**
     *
     * @summary Favori öğretmenleri listeler. Ayrıca isimle arama filtresi uygulanabilir.
     * @param {number} [lastTeacherId]
     * @param {string} [query]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMyFavoriteTeachers(lastTeacherId?: number, query?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherQueriesListMyFavoritesQueryResult>>;
    /**
     *
     * @summary Öğretmenleri listeler. Ayrıca filtreler uygulanabilir.
     * @param {number} [lastId]
     * @param {string} [filtersQuery]
     * @param {Array<string>} [filtersTeachingStyles] Girilebilecek değerler:  KIND_AND_PATIENT,  FUN_AND_GREGARIOUS,  SCHOLARLY_AND_KNOWLEDGEABLE
     * @param {Array<string>} [filtersLessonTypes] Girilebilecek değerler:  PRONUNCIATION_LESSONS,  GRAMMAR_LESSONS,  LESSONS_WITH_MOVIES,  LESSONS_FOR_CHILDREN,  BUSINESS_ENGLISH,  UNIVERSITY_ENGLISH_PREPARATION,  EXAM,  TOEFL_PREPARATION,  IELTS_PREPARATION
     * @param {Array<string>} [filtersLanguageLevel] Girilebilecek değerler:  BEGINNER,  INTERMEDIATE,  ADVANCED
     * @param {Array<string>} [filtersAccentTypes] Girilebilecek değerler:  NATIVE_US,  NATIVE_BRITISH,  TURKISH,  OTHER
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeachers(lastId?: number, filtersQuery?: string, filtersTeachingStyles?: Array<string>, filtersLessonTypes?: Array<string>, filtersLanguageLevel?: Array<string>, filtersAccentTypes?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherQueriesListQueryResult>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginOutWithDirectAuthAsTeacher(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğretmenin eposta ve şifre ile giriş yapabilmesini sağlar.
     * @param {string} [email]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginWithDirectAuthAsTeacher(email?: string, password?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherCommandsLoginWithDirectAuthCommandResult>>;
    /**
     *
     * @summary Öğretmenin kazanç durumunu getirir.  Kazanç hesaplaması neye göre ve nasıl olacak?
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    myEarnings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherQueriesMyEarningsQueryResult>>;
    /**
     *
     * @summary Görüşme sonrasında öğretmeni puanlar.
     * @param {number} [appointmentId]
     * @param {number} [rate]
     * @param {string} [comment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rateTeacher(appointmentId?: number, rate?: number, comment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ratingDelete(id?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ratingList(teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeacherQueriesMyRatingResultList>>>;
    /**
     *
     * @summary Öğretmen olarak kayıt olmayı sağlar
     * @param {File} [profilePhoto]
     * @param {string} [nameSurname]
     * @param {string} [eMail]
     * @param {string} [password]
     * @param {string} [phoneNumber]
     * @param {string} [description]
     * @param {string} [youtubeVideoUrl]
     * @param {string} [accent]
     * @param {string} [teachingStyles]
     * @param {string} [lessonTypes]
     * @param {string} [languageLevel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerAsTeacher(profilePhoto?: File, nameSurname?: string, eMail?: string, password?: string, phoneNumber?: string, description?: string, youtubeVideoUrl?: string, accent?: string, teachingStyles?: string, lessonTypes?: string, languageLevel?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherCommandsRegisterCommandResult>>;
    /**
     *
     * @summary Öğretmene gelen anlık aramayı reddetmesini sağlar.
     * @param {number} [callId]
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectCall(callId?: number, teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğrencinin öğretmeni rapor etmesini sağlar.
     * @param {number} [teacherId]
     * @param {string} [content]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportTeacher(teacherId?: number, content?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Kullanıcının tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startToExportMyAllInformationsAsTeacher(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherCommandsStartToExportMyAllInformationsCommandResult>>;
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [studentId]
     * @param {number} [rate]
     * @param {string} [comment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teacherRatePost(teacherId?: number, studentId?: number, rate?: number, comment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğrencinin öğretmenin engelini kaldırmasını sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unblockTeacher(teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğrencinin öğretmeni favorilerinden kaldırmasını sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfavoriteTeacher(teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğretmenin profil fotoğrafını değiştirmesini sağlar.
     * @param {File} [photo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMyProfilePhotoAsTeacher(photo?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherCommandsUpdateProfilePhotoCommandResult>>;
    /**
     *
     * @summary Öğretmen\'in kendi uzmanlıklarını güncelleyebilmesini sağlar.
     * @param {TeacherCommandsUpdateMySpecalitiesParemeters} [teacherCommandsUpdateMySpecalitiesParemeters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMySpecalities(teacherCommandsUpdateMySpecalitiesParemeters?: TeacherCommandsUpdateMySpecalitiesParemeters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * TeacherApi - factory interface
 * @export
 */
export declare const TeacherApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Öğretmene gelen anlık aramayı kabul etmesini sağlar.
     * @param {number} [callId]
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptCall(callId?: number, teacherId?: number, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin öğretmeni engellemesini sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockTeacher(teacherId?: number, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğretmenin açıklamasını değiştirir.
     * @param {string} [newDescription]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyDescription(newDescription?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğretmenin sisteme kayıtlı IBAN bilgisini değiştirir.
     * @param {string} [bankName]
     * @param {string} [accountHolderName]
     * @param {string} [iban]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyIbanNumber(bankName?: string, accountHolderName?: string, iban?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğretmenin çevrimiçi/çevrimdışı durumunu değiştirir.
     * @param {boolean} [isOnline]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyOnlineStatus(isOnline?: boolean, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğretmenin youtube video linkini değiştirir.
     * @param {string} [youtubeVideoUrl]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyYoutubeVideoUrl(youtubeVideoUrl?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    checkStudentReview(teacherId?: number, studentId?: number, options?: any): AxiosPromise<boolean>;
    /**
     *
     * @summary Öğretmenin hesabının silme isteğini admine mail olarak iletir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMyAccountAsTeacher(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin öğretmeni favoriye eklemesini sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    favoriteTeacher(teacherId?: number, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğretmenin kendi detayını getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyDetailsAsTeacher(options?: any): AxiosPromise<TeacherQueriesGetMyDetailsQueryResult>;
    /**
     *
     * @summary Öğretmen\'in detayını getirir.
     * @param {number} teacherId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeacherDetails(teacherId: number, options?: any): AxiosPromise<TeacherQueriesGetDetailsQueryResult>;
    /**
     *
     * @summary Öğretmenin dışa aktarılmaya hazır verilerini listeler.
     * @param {string} [lastCreatedAt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMyExportsAsTeacher(lastCreatedAt?: string, options?: any): AxiosPromise<TeacherQueriesListMyExportsQueryResult>;
    /**
     *
     * @summary Favori öğretmenleri listeler. Ayrıca isimle arama filtresi uygulanabilir.
     * @param {number} [lastTeacherId]
     * @param {string} [query]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMyFavoriteTeachers(lastTeacherId?: number, query?: string, options?: any): AxiosPromise<TeacherQueriesListMyFavoritesQueryResult>;
    /**
     *
     * @summary Öğretmenleri listeler. Ayrıca filtreler uygulanabilir.
     * @param {number} [lastId]
     * @param {string} [filtersQuery]
     * @param {Array<string>} [filtersTeachingStyles] Girilebilecek değerler:  KIND_AND_PATIENT,  FUN_AND_GREGARIOUS,  SCHOLARLY_AND_KNOWLEDGEABLE
     * @param {Array<string>} [filtersLessonTypes] Girilebilecek değerler:  PRONUNCIATION_LESSONS,  GRAMMAR_LESSONS,  LESSONS_WITH_MOVIES,  LESSONS_FOR_CHILDREN,  BUSINESS_ENGLISH,  UNIVERSITY_ENGLISH_PREPARATION,  EXAM,  TOEFL_PREPARATION,  IELTS_PREPARATION
     * @param {Array<string>} [filtersLanguageLevel] Girilebilecek değerler:  BEGINNER,  INTERMEDIATE,  ADVANCED
     * @param {Array<string>} [filtersAccentTypes] Girilebilecek değerler:  NATIVE_US,  NATIVE_BRITISH,  TURKISH,  OTHER
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeachers(lastId?: number, filtersQuery?: string, filtersTeachingStyles?: Array<string>, filtersLessonTypes?: Array<string>, filtersLanguageLevel?: Array<string>, filtersAccentTypes?: Array<string>, options?: any): AxiosPromise<TeacherQueriesListQueryResult>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginOutWithDirectAuthAsTeacher(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğretmenin eposta ve şifre ile giriş yapabilmesini sağlar.
     * @param {string} [email]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginWithDirectAuthAsTeacher(email?: string, password?: string, options?: any): AxiosPromise<TeacherCommandsLoginWithDirectAuthCommandResult>;
    /**
     *
     * @summary Öğretmenin kazanç durumunu getirir.  Kazanç hesaplaması neye göre ve nasıl olacak?
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    myEarnings(options?: any): AxiosPromise<TeacherQueriesMyEarningsQueryResult>;
    /**
     *
     * @summary Görüşme sonrasında öğretmeni puanlar.
     * @param {number} [appointmentId]
     * @param {number} [rate]
     * @param {string} [comment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rateTeacher(appointmentId?: number, rate?: number, comment?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ratingDelete(id?: number, options?: any): AxiosPromise<object>;
    /**
     *
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ratingList(teacherId?: number, options?: any): AxiosPromise<Array<TeacherQueriesMyRatingResultList>>;
    /**
     *
     * @summary Öğretmen olarak kayıt olmayı sağlar
     * @param {File} [profilePhoto]
     * @param {string} [nameSurname]
     * @param {string} [eMail]
     * @param {string} [password]
     * @param {string} [phoneNumber]
     * @param {string} [description]
     * @param {string} [youtubeVideoUrl]
     * @param {string} [accent]
     * @param {string} [teachingStyles]
     * @param {string} [lessonTypes]
     * @param {string} [languageLevel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerAsTeacher(profilePhoto?: File, nameSurname?: string, eMail?: string, password?: string, phoneNumber?: string, description?: string, youtubeVideoUrl?: string, accent?: string, teachingStyles?: string, lessonTypes?: string, languageLevel?: string, options?: any): AxiosPromise<TeacherCommandsRegisterCommandResult>;
    /**
     *
     * @summary Öğretmene gelen anlık aramayı reddetmesini sağlar.
     * @param {number} [callId]
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectCall(callId?: number, teacherId?: number, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin öğretmeni rapor etmesini sağlar.
     * @param {number} [teacherId]
     * @param {string} [content]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportTeacher(teacherId?: number, content?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Kullanıcının tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startToExportMyAllInformationsAsTeacher(options?: any): AxiosPromise<TeacherCommandsStartToExportMyAllInformationsCommandResult>;
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [studentId]
     * @param {number} [rate]
     * @param {string} [comment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teacherRatePost(teacherId?: number, studentId?: number, rate?: number, comment?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin öğretmenin engelini kaldırmasını sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unblockTeacher(teacherId?: number, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin öğretmeni favorilerinden kaldırmasını sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfavoriteTeacher(teacherId?: number, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğretmenin profil fotoğrafını değiştirmesini sağlar.
     * @param {File} [photo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMyProfilePhotoAsTeacher(photo?: File, options?: any): AxiosPromise<TeacherCommandsUpdateProfilePhotoCommandResult>;
    /**
     *
     * @summary Öğretmen\'in kendi uzmanlıklarını güncelleyebilmesini sağlar.
     * @param {TeacherCommandsUpdateMySpecalitiesParemeters} [teacherCommandsUpdateMySpecalitiesParemeters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMySpecalities(teacherCommandsUpdateMySpecalitiesParemeters?: TeacherCommandsUpdateMySpecalitiesParemeters, options?: any): AxiosPromise<object>;
};
/**
 * TeacherApi - interface
 * @export
 * @interface TeacherApi
 */
export interface TeacherApiInterface {
    /**
     *
     * @summary Öğretmene gelen anlık aramayı kabul etmesini sağlar.
     * @param {number} [callId]
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    acceptCall(callId?: number, teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin öğretmeni engellemesini sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    blockTeacher(teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğretmenin açıklamasını değiştirir.
     * @param {string} [newDescription]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    changeMyDescription(newDescription?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğretmenin sisteme kayıtlı IBAN bilgisini değiştirir.
     * @param {string} [bankName]
     * @param {string} [accountHolderName]
     * @param {string} [iban]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    changeMyIbanNumber(bankName?: string, accountHolderName?: string, iban?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğretmenin çevrimiçi/çevrimdışı durumunu değiştirir.
     * @param {boolean} [isOnline]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    changeMyOnlineStatus(isOnline?: boolean, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğretmenin youtube video linkini değiştirir.
     * @param {string} [youtubeVideoUrl]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    changeMyYoutubeVideoUrl(youtubeVideoUrl?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    checkStudentReview(teacherId?: number, studentId?: number, options?: AxiosRequestConfig): AxiosPromise<boolean>;
    /**
     *
     * @summary Öğretmenin hesabının silme isteğini admine mail olarak iletir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    deleteMyAccountAsTeacher(options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin öğretmeni favoriye eklemesini sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    favoriteTeacher(teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğretmenin kendi detayını getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    getMyDetailsAsTeacher(options?: AxiosRequestConfig): AxiosPromise<TeacherQueriesGetMyDetailsQueryResult>;
    /**
     *
     * @summary Öğretmen\'in detayını getirir.
     * @param {number} teacherId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    getTeacherDetails(teacherId: number, options?: AxiosRequestConfig): AxiosPromise<TeacherQueriesGetDetailsQueryResult>;
    /**
     *
     * @summary Öğretmenin dışa aktarılmaya hazır verilerini listeler.
     * @param {string} [lastCreatedAt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    listMyExportsAsTeacher(lastCreatedAt?: string, options?: AxiosRequestConfig): AxiosPromise<TeacherQueriesListMyExportsQueryResult>;
    /**
     *
     * @summary Favori öğretmenleri listeler. Ayrıca isimle arama filtresi uygulanabilir.
     * @param {number} [lastTeacherId]
     * @param {string} [query]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    listMyFavoriteTeachers(lastTeacherId?: number, query?: string, options?: AxiosRequestConfig): AxiosPromise<TeacherQueriesListMyFavoritesQueryResult>;
    /**
     *
     * @summary Öğretmenleri listeler. Ayrıca filtreler uygulanabilir.
     * @param {number} [lastId]
     * @param {string} [filtersQuery]
     * @param {Array<string>} [filtersTeachingStyles] Girilebilecek değerler:  KIND_AND_PATIENT,  FUN_AND_GREGARIOUS,  SCHOLARLY_AND_KNOWLEDGEABLE
     * @param {Array<string>} [filtersLessonTypes] Girilebilecek değerler:  PRONUNCIATION_LESSONS,  GRAMMAR_LESSONS,  LESSONS_WITH_MOVIES,  LESSONS_FOR_CHILDREN,  BUSINESS_ENGLISH,  UNIVERSITY_ENGLISH_PREPARATION,  EXAM,  TOEFL_PREPARATION,  IELTS_PREPARATION
     * @param {Array<string>} [filtersLanguageLevel] Girilebilecek değerler:  BEGINNER,  INTERMEDIATE,  ADVANCED
     * @param {Array<string>} [filtersAccentTypes] Girilebilecek değerler:  NATIVE_US,  NATIVE_BRITISH,  TURKISH,  OTHER
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    listTeachers(lastId?: number, filtersQuery?: string, filtersTeachingStyles?: Array<string>, filtersLessonTypes?: Array<string>, filtersLanguageLevel?: Array<string>, filtersAccentTypes?: Array<string>, options?: AxiosRequestConfig): AxiosPromise<TeacherQueriesListQueryResult>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    loginOutWithDirectAuthAsTeacher(options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğretmenin eposta ve şifre ile giriş yapabilmesini sağlar.
     * @param {string} [email]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    loginWithDirectAuthAsTeacher(email?: string, password?: string, options?: AxiosRequestConfig): AxiosPromise<TeacherCommandsLoginWithDirectAuthCommandResult>;
    /**
     *
     * @summary Öğretmenin kazanç durumunu getirir.  Kazanç hesaplaması neye göre ve nasıl olacak?
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    myEarnings(options?: AxiosRequestConfig): AxiosPromise<TeacherQueriesMyEarningsQueryResult>;
    /**
     *
     * @summary Görüşme sonrasında öğretmeni puanlar.
     * @param {number} [appointmentId]
     * @param {number} [rate]
     * @param {string} [comment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    rateTeacher(appointmentId?: number, rate?: number, comment?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    ratingDelete(id?: number, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    ratingList(teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<Array<TeacherQueriesMyRatingResultList>>;
    /**
     *
     * @summary Öğretmen olarak kayıt olmayı sağlar
     * @param {File} [profilePhoto]
     * @param {string} [nameSurname]
     * @param {string} [eMail]
     * @param {string} [password]
     * @param {string} [phoneNumber]
     * @param {string} [description]
     * @param {string} [youtubeVideoUrl]
     * @param {string} [accent]
     * @param {string} [teachingStyles]
     * @param {string} [lessonTypes]
     * @param {string} [languageLevel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    registerAsTeacher(profilePhoto?: File, nameSurname?: string, eMail?: string, password?: string, phoneNumber?: string, description?: string, youtubeVideoUrl?: string, accent?: string, teachingStyles?: string, lessonTypes?: string, languageLevel?: string, options?: AxiosRequestConfig): AxiosPromise<TeacherCommandsRegisterCommandResult>;
    /**
     *
     * @summary Öğretmene gelen anlık aramayı reddetmesini sağlar.
     * @param {number} [callId]
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    rejectCall(callId?: number, teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin öğretmeni rapor etmesini sağlar.
     * @param {number} [teacherId]
     * @param {string} [content]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    reportTeacher(teacherId?: number, content?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Kullanıcının tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    startToExportMyAllInformationsAsTeacher(options?: AxiosRequestConfig): AxiosPromise<TeacherCommandsStartToExportMyAllInformationsCommandResult>;
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [studentId]
     * @param {number} [rate]
     * @param {string} [comment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    teacherRatePost(teacherId?: number, studentId?: number, rate?: number, comment?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin öğretmenin engelini kaldırmasını sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    unblockTeacher(teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin öğretmeni favorilerinden kaldırmasını sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    unfavoriteTeacher(teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğretmenin profil fotoğrafını değiştirmesini sağlar.
     * @param {File} [photo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    updateMyProfilePhotoAsTeacher(photo?: File, options?: AxiosRequestConfig): AxiosPromise<TeacherCommandsUpdateProfilePhotoCommandResult>;
    /**
     *
     * @summary Öğretmen\'in kendi uzmanlıklarını güncelleyebilmesini sağlar.
     * @param {TeacherCommandsUpdateMySpecalitiesParemeters} [teacherCommandsUpdateMySpecalitiesParemeters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApiInterface
     */
    updateMySpecalities(teacherCommandsUpdateMySpecalitiesParemeters?: TeacherCommandsUpdateMySpecalitiesParemeters, options?: AxiosRequestConfig): AxiosPromise<object>;
}
/**
 * TeacherApi - object-oriented interface
 * @export
 * @class TeacherApi
 * @extends {BaseAPI}
 */
export declare class TeacherApi extends BaseAPI implements TeacherApiInterface {
    /**
     *
     * @summary Öğretmene gelen anlık aramayı kabul etmesini sağlar.
     * @param {number} [callId]
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    acceptCall(callId?: number, teacherId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğrencinin öğretmeni engellemesini sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    blockTeacher(teacherId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğretmenin açıklamasını değiştirir.
     * @param {string} [newDescription]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    changeMyDescription(newDescription?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğretmenin sisteme kayıtlı IBAN bilgisini değiştirir.
     * @param {string} [bankName]
     * @param {string} [accountHolderName]
     * @param {string} [iban]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    changeMyIbanNumber(bankName?: string, accountHolderName?: string, iban?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğretmenin çevrimiçi/çevrimdışı durumunu değiştirir.
     * @param {boolean} [isOnline]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    changeMyOnlineStatus(isOnline?: boolean, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğretmenin youtube video linkini değiştirir.
     * @param {string} [youtubeVideoUrl]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    changeMyYoutubeVideoUrl(youtubeVideoUrl?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    checkStudentReview(teacherId?: number, studentId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<boolean, any>>;
    /**
     *
     * @summary Öğretmenin hesabının silme isteğini admine mail olarak iletir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    deleteMyAccountAsTeacher(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğrencinin öğretmeni favoriye eklemesini sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    favoriteTeacher(teacherId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğretmenin kendi detayını getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    getMyDetailsAsTeacher(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TeacherQueriesGetMyDetailsQueryResult, any>>;
    /**
     *
     * @summary Öğretmen\'in detayını getirir.
     * @param {number} teacherId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    getTeacherDetails(teacherId: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TeacherQueriesGetDetailsQueryResult, any>>;
    /**
     *
     * @summary Öğretmenin dışa aktarılmaya hazır verilerini listeler.
     * @param {string} [lastCreatedAt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    listMyExportsAsTeacher(lastCreatedAt?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TeacherQueriesListMyExportsQueryResult, any>>;
    /**
     *
     * @summary Favori öğretmenleri listeler. Ayrıca isimle arama filtresi uygulanabilir.
     * @param {number} [lastTeacherId]
     * @param {string} [query]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    listMyFavoriteTeachers(lastTeacherId?: number, query?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TeacherQueriesListMyFavoritesQueryResult, any>>;
    /**
     *
     * @summary Öğretmenleri listeler. Ayrıca filtreler uygulanabilir.
     * @param {number} [lastId]
     * @param {string} [filtersQuery]
     * @param {Array<string>} [filtersTeachingStyles] Girilebilecek değerler:  KIND_AND_PATIENT,  FUN_AND_GREGARIOUS,  SCHOLARLY_AND_KNOWLEDGEABLE
     * @param {Array<string>} [filtersLessonTypes] Girilebilecek değerler:  PRONUNCIATION_LESSONS,  GRAMMAR_LESSONS,  LESSONS_WITH_MOVIES,  LESSONS_FOR_CHILDREN,  BUSINESS_ENGLISH,  UNIVERSITY_ENGLISH_PREPARATION,  EXAM,  TOEFL_PREPARATION,  IELTS_PREPARATION
     * @param {Array<string>} [filtersLanguageLevel] Girilebilecek değerler:  BEGINNER,  INTERMEDIATE,  ADVANCED
     * @param {Array<string>} [filtersAccentTypes] Girilebilecek değerler:  NATIVE_US,  NATIVE_BRITISH,  TURKISH,  OTHER
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    listTeachers(lastId?: number, filtersQuery?: string, filtersTeachingStyles?: Array<string>, filtersLessonTypes?: Array<string>, filtersLanguageLevel?: Array<string>, filtersAccentTypes?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TeacherQueriesListQueryResult, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    loginOutWithDirectAuthAsTeacher(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğretmenin eposta ve şifre ile giriş yapabilmesini sağlar.
     * @param {string} [email]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    loginWithDirectAuthAsTeacher(email?: string, password?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TeacherCommandsLoginWithDirectAuthCommandResult, any>>;
    /**
     *
     * @summary Öğretmenin kazanç durumunu getirir.  Kazanç hesaplaması neye göre ve nasıl olacak?
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    myEarnings(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TeacherQueriesMyEarningsQueryResult, any>>;
    /**
     *
     * @summary Görüşme sonrasında öğretmeni puanlar.
     * @param {number} [appointmentId]
     * @param {number} [rate]
     * @param {string} [comment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    rateTeacher(appointmentId?: number, rate?: number, comment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    ratingDelete(id?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    ratingList(teacherId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TeacherQueriesMyRatingResultList[], any>>;
    /**
     *
     * @summary Öğretmen olarak kayıt olmayı sağlar
     * @param {File} [profilePhoto]
     * @param {string} [nameSurname]
     * @param {string} [eMail]
     * @param {string} [password]
     * @param {string} [phoneNumber]
     * @param {string} [description]
     * @param {string} [youtubeVideoUrl]
     * @param {string} [accent]
     * @param {string} [teachingStyles]
     * @param {string} [lessonTypes]
     * @param {string} [languageLevel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    registerAsTeacher(profilePhoto?: File, nameSurname?: string, eMail?: string, password?: string, phoneNumber?: string, description?: string, youtubeVideoUrl?: string, accent?: string, teachingStyles?: string, lessonTypes?: string, languageLevel?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TeacherCommandsRegisterCommandResult, any>>;
    /**
     *
     * @summary Öğretmene gelen anlık aramayı reddetmesini sağlar.
     * @param {number} [callId]
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    rejectCall(callId?: number, teacherId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğrencinin öğretmeni rapor etmesini sağlar.
     * @param {number} [teacherId]
     * @param {string} [content]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    reportTeacher(teacherId?: number, content?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Kullanıcının tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    startToExportMyAllInformationsAsTeacher(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TeacherCommandsStartToExportMyAllInformationsCommandResult, any>>;
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [studentId]
     * @param {number} [rate]
     * @param {string} [comment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    teacherRatePost(teacherId?: number, studentId?: number, rate?: number, comment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğrencinin öğretmenin engelini kaldırmasını sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    unblockTeacher(teacherId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğrencinin öğretmeni favorilerinden kaldırmasını sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    unfavoriteTeacher(teacherId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğretmenin profil fotoğrafını değiştirmesini sağlar.
     * @param {File} [photo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    updateMyProfilePhotoAsTeacher(photo?: File, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TeacherCommandsUpdateProfilePhotoCommandResult, any>>;
    /**
     *
     * @summary Öğretmen\'in kendi uzmanlıklarını güncelleyebilmesini sağlar.
     * @param {TeacherCommandsUpdateMySpecalitiesParemeters} [teacherCommandsUpdateMySpecalitiesParemeters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    updateMySpecalities(teacherCommandsUpdateMySpecalitiesParemeters?: TeacherCommandsUpdateMySpecalitiesParemeters, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
}

/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * CustomerServiceAdministrationApi - axios parameter creator
 * @export
 */
export const CustomerServiceAdministrationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Şikayetin durumunu tamamlandı olarak değiştirmeyi sağlar
         * @param {number} [complaintId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeComplaintStateToCompleted: (complaintId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/CustomerServiceAdministration/ChangeComplaintStateToCompleted`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (complaintId !== undefined) {
                localVarQueryParameter['ComplaintId'] = complaintId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Şikayetin durumunu henüz işlem yapılmadı olarak değiştirmeyi sağlar
         * @param {number} [complaintId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeComplaintStateToNotSeenYet: (complaintId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/CustomerServiceAdministration/ChangeComplaintStateToNotSeenYet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (complaintId !== undefined) {
                localVarQueryParameter['ComplaintId'] = complaintId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Şikayetin durumunu reddedildi olarak değiştirmeyi sağlar
         * @param {number} [complaintId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeComplaintStateToRejected: (complaintId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/CustomerServiceAdministration/ChangeComplaintStateToRejected`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (complaintId !== undefined) {
                localVarQueryParameter['ComplaintId'] = complaintId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Şikayetin durumunu görüldü olarak değiştirmeyi sağlar
         * @param {number} [complaintId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeComplaintStateToSeen: (complaintId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/CustomerServiceAdministration/ChangeComplaintStateToSeen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (complaintId !== undefined) {
                localVarQueryParameter['ComplaintId'] = complaintId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Şikayetin detayını getirmeyi sağlar
         * @param {number} complaintId Şikayet Id sini barındırır
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComplaint: (complaintId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'complaintId' is not null or undefined
            assertParamExists('getComplaint', 'complaintId', complaintId);
            const localVarPath = `/api/CustomerServiceAdministration/GetComplaint`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (complaintId !== undefined) {
                localVarQueryParameter['ComplaintId'] = complaintId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Şikayetlerin listesini getirmeyi sağlar
         * @param {number} [page]
         * @param {number} [itemPerPage]
         * @param {string} [filtersSearchKeyword] Şikayetler listesinin arama kelimesini barındırır
         * @param {string} [filtersListComplaintsRoles] Listelenilecek şikayetlerin rollerini belirtir
         * @param {string} [filtersListComplaintsStates] Listelenicek şikayetlerin durumunu belirtir
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listComplaints: (page, itemPerPage, filtersSearchKeyword, filtersListComplaintsRoles, filtersListComplaintsStates, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/CustomerServiceAdministration/ListComplaints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }
            if (itemPerPage !== undefined) {
                localVarQueryParameter['ItemPerPage'] = itemPerPage;
            }
            if (filtersSearchKeyword !== undefined) {
                localVarQueryParameter['Filters.SearchKeyword'] = filtersSearchKeyword;
            }
            if (filtersListComplaintsRoles !== undefined) {
                localVarQueryParameter['Filters.ListComplaintsRoles'] = filtersListComplaintsRoles;
            }
            if (filtersListComplaintsStates !== undefined) {
                localVarQueryParameter['Filters.ListComplaintsStates'] = filtersListComplaintsStates;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CustomerServiceAdministrationApi - functional programming interface
 * @export
 */
export const CustomerServiceAdministrationApiFp = function (configuration) {
    const localVarAxiosParamCreator = CustomerServiceAdministrationApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Şikayetin durumunu tamamlandı olarak değiştirmeyi sağlar
         * @param {number} [complaintId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeComplaintStateToCompleted(complaintId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeComplaintStateToCompleted(complaintId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Şikayetin durumunu henüz işlem yapılmadı olarak değiştirmeyi sağlar
         * @param {number} [complaintId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeComplaintStateToNotSeenYet(complaintId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeComplaintStateToNotSeenYet(complaintId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Şikayetin durumunu reddedildi olarak değiştirmeyi sağlar
         * @param {number} [complaintId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeComplaintStateToRejected(complaintId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeComplaintStateToRejected(complaintId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Şikayetin durumunu görüldü olarak değiştirmeyi sağlar
         * @param {number} [complaintId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeComplaintStateToSeen(complaintId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeComplaintStateToSeen(complaintId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Şikayetin detayını getirmeyi sağlar
         * @param {number} complaintId Şikayet Id sini barındırır
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComplaint(complaintId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getComplaint(complaintId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Şikayetlerin listesini getirmeyi sağlar
         * @param {number} [page]
         * @param {number} [itemPerPage]
         * @param {string} [filtersSearchKeyword] Şikayetler listesinin arama kelimesini barındırır
         * @param {string} [filtersListComplaintsRoles] Listelenilecek şikayetlerin rollerini belirtir
         * @param {string} [filtersListComplaintsStates] Listelenicek şikayetlerin durumunu belirtir
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listComplaints(page, itemPerPage, filtersSearchKeyword, filtersListComplaintsRoles, filtersListComplaintsStates, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listComplaints(page, itemPerPage, filtersSearchKeyword, filtersListComplaintsRoles, filtersListComplaintsStates, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * CustomerServiceAdministrationApi - factory interface
 * @export
 */
export const CustomerServiceAdministrationApiFactory = function (configuration, basePath, axios) {
    const localVarFp = CustomerServiceAdministrationApiFp(configuration);
    return {
        /**
         *
         * @summary Şikayetin durumunu tamamlandı olarak değiştirmeyi sağlar
         * @param {number} [complaintId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeComplaintStateToCompleted(complaintId, options) {
            return localVarFp.changeComplaintStateToCompleted(complaintId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Şikayetin durumunu henüz işlem yapılmadı olarak değiştirmeyi sağlar
         * @param {number} [complaintId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeComplaintStateToNotSeenYet(complaintId, options) {
            return localVarFp.changeComplaintStateToNotSeenYet(complaintId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Şikayetin durumunu reddedildi olarak değiştirmeyi sağlar
         * @param {number} [complaintId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeComplaintStateToRejected(complaintId, options) {
            return localVarFp.changeComplaintStateToRejected(complaintId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Şikayetin durumunu görüldü olarak değiştirmeyi sağlar
         * @param {number} [complaintId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeComplaintStateToSeen(complaintId, options) {
            return localVarFp.changeComplaintStateToSeen(complaintId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Şikayetin detayını getirmeyi sağlar
         * @param {number} complaintId Şikayet Id sini barındırır
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComplaint(complaintId, options) {
            return localVarFp.getComplaint(complaintId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Şikayetlerin listesini getirmeyi sağlar
         * @param {number} [page]
         * @param {number} [itemPerPage]
         * @param {string} [filtersSearchKeyword] Şikayetler listesinin arama kelimesini barındırır
         * @param {string} [filtersListComplaintsRoles] Listelenilecek şikayetlerin rollerini belirtir
         * @param {string} [filtersListComplaintsStates] Listelenicek şikayetlerin durumunu belirtir
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listComplaints(page, itemPerPage, filtersSearchKeyword, filtersListComplaintsRoles, filtersListComplaintsStates, options) {
            return localVarFp.listComplaints(page, itemPerPage, filtersSearchKeyword, filtersListComplaintsRoles, filtersListComplaintsStates, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * CustomerServiceAdministrationApi - object-oriented interface
 * @export
 * @class CustomerServiceAdministrationApi
 * @extends {BaseAPI}
 */
export class CustomerServiceAdministrationApi extends BaseAPI {
    /**
     *
     * @summary Şikayetin durumunu tamamlandı olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApi
     */
    changeComplaintStateToCompleted(complaintId, options) {
        return CustomerServiceAdministrationApiFp(this.configuration).changeComplaintStateToCompleted(complaintId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Şikayetin durumunu henüz işlem yapılmadı olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApi
     */
    changeComplaintStateToNotSeenYet(complaintId, options) {
        return CustomerServiceAdministrationApiFp(this.configuration).changeComplaintStateToNotSeenYet(complaintId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Şikayetin durumunu reddedildi olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApi
     */
    changeComplaintStateToRejected(complaintId, options) {
        return CustomerServiceAdministrationApiFp(this.configuration).changeComplaintStateToRejected(complaintId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Şikayetin durumunu görüldü olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApi
     */
    changeComplaintStateToSeen(complaintId, options) {
        return CustomerServiceAdministrationApiFp(this.configuration).changeComplaintStateToSeen(complaintId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Şikayetin detayını getirmeyi sağlar
     * @param {number} complaintId Şikayet Id sini barındırır
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApi
     */
    getComplaint(complaintId, options) {
        return CustomerServiceAdministrationApiFp(this.configuration).getComplaint(complaintId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Şikayetlerin listesini getirmeyi sağlar
     * @param {number} [page]
     * @param {number} [itemPerPage]
     * @param {string} [filtersSearchKeyword] Şikayetler listesinin arama kelimesini barındırır
     * @param {string} [filtersListComplaintsRoles] Listelenilecek şikayetlerin rollerini belirtir
     * @param {string} [filtersListComplaintsStates] Listelenicek şikayetlerin durumunu belirtir
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApi
     */
    listComplaints(page, itemPerPage, filtersSearchKeyword, filtersListComplaintsRoles, filtersListComplaintsStates, options) {
        return CustomerServiceAdministrationApiFp(this.configuration).listComplaints(page, itemPerPage, filtersSearchKeyword, filtersListComplaintsRoles, filtersListComplaintsStates, options).then((request) => request(this.axios, this.basePath));
    }
}

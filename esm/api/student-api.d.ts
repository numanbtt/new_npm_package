/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { StudentCommandsLoginWithDirectAuthCommandResult } from '../models';
import { StudentCommandsRegisterCommandResult } from '../models';
import { StudentCommandsStartToExportMyAllInformationsCommandResult } from '../models';
import { StudentCommandsUpdateMySpecalitiesParemeters } from '../models';
import { StudentCommandsUpdateProfilePhotoCommandResult } from '../models';
import { StudentQueriesGetDetailsQueryResult } from '../models';
import { StudentQueriesGetMyDetailsQueryResult } from '../models';
import { StudentQueriesListMyExportsQueryResult } from '../models';
/**
 * StudentApi - axios parameter creator
 * @export
 */
export declare const StudentApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Öğretmenin öğrenciyi engellemesini sağlar.
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockStudent: (studentId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğrencinin kendi e-posta adresini değiştirebilmesini sağlar.
     * @param {string} [newEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyEmailAddress: (newEmail?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğrencinin kendi ismini değiştirebilmesini sağlar.
     * @param {string} [newName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyName: (newName?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğrencinin kendi telefon numarasını değiştirebilmesini sağlar.
     * @param {string} [newPhone]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyPhoneNumber: (newPhone?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğrencinin hesabının silme isteğini admine mail olarak iletir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMyAccountAsStudent: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğrencinin kendi detayını getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyDetailsAsStudent: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğrencinin detayını getirir.
     * @param {number} studentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudentDetails: (studentId: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğrencinin dışa aktarılmaya hazır verilerini listeler.
     * @param {string} [lastCreatedAt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMyExportsAsStudent: (lastCreatedAt?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} [nameSurname]
     * @param {string} [email]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginGoogleAsStudent: (nameSurname?: string, email?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Apple login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginWithAppleAsStudent: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğrenci olarak giriş yapmayı sağlar.
     * @param {string} [email]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginWithDirectAuthAsStudent: (email?: string, password?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Facebook login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginWithFacebookAsStudent: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Google login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginWithGoogleAsStudent: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary E-posta ve şifre ile öğrenci kaydı yapılabilmesini sağlar.
     * @param {string} [nameSurname]
     * @param {string} [email]
     * @param {string} [phoneNumber]
     * @param {string} [password]
     * @param {string} [accent]
     * @param {string} [languageLevel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerAsStudent: (nameSurname?: string, email?: string, phoneNumber?: string, password?: string, accent?: string, languageLevel?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmenin öğrenciyi rapor etmesini sağlar.
     * @param {number} [studentId]
     * @param {string} [content]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportStudent: (studentId?: number, content?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğrencinin tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startToExportMyAllInformationsAsStudent: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmenin öğrencinin engelini kaldırmasını sağlar.
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unblockStudent: (studentId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğrencinin profil fotoğrafını değiştirmesini sağlar.
     * @param {File} [photo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfilePhotoAsStudent: (photo?: File, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {StudentCommandsUpdateMySpecalitiesParemeters} [studentCommandsUpdateMySpecalitiesParemeters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStudentSpecalities: (studentCommandsUpdateMySpecalitiesParemeters?: StudentCommandsUpdateMySpecalitiesParemeters, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StudentApi - functional programming interface
 * @export
 */
export declare const StudentApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Öğretmenin öğrenciyi engellemesini sağlar.
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockStudent(studentId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğrencinin kendi e-posta adresini değiştirebilmesini sağlar.
     * @param {string} [newEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyEmailAddress(newEmail?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğrencinin kendi ismini değiştirebilmesini sağlar.
     * @param {string} [newName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyName(newName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğrencinin kendi telefon numarasını değiştirebilmesini sağlar.
     * @param {string} [newPhone]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyPhoneNumber(newPhone?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğrencinin hesabının silme isteğini admine mail olarak iletir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMyAccountAsStudent(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğrencinin kendi detayını getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyDetailsAsStudent(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentQueriesGetMyDetailsQueryResult>>;
    /**
     *
     * @summary Öğrencinin detayını getirir.
     * @param {number} studentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudentDetails(studentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentQueriesGetDetailsQueryResult>>;
    /**
     *
     * @summary Öğrencinin dışa aktarılmaya hazır verilerini listeler.
     * @param {string} [lastCreatedAt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMyExportsAsStudent(lastCreatedAt?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentQueriesListMyExportsQueryResult>>;
    /**
     *
     * @param {string} [nameSurname]
     * @param {string} [email]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginGoogleAsStudent(nameSurname?: string, email?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentCommandsRegisterCommandResult>>;
    /**
     *
     * @summary Apple login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginWithAppleAsStudent(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Öğrenci olarak giriş yapmayı sağlar.
     * @param {string} [email]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginWithDirectAuthAsStudent(email?: string, password?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentCommandsLoginWithDirectAuthCommandResult>>;
    /**
     *
     * @summary Facebook login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginWithFacebookAsStudent(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Google login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginWithGoogleAsStudent(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary E-posta ve şifre ile öğrenci kaydı yapılabilmesini sağlar.
     * @param {string} [nameSurname]
     * @param {string} [email]
     * @param {string} [phoneNumber]
     * @param {string} [password]
     * @param {string} [accent]
     * @param {string} [languageLevel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerAsStudent(nameSurname?: string, email?: string, phoneNumber?: string, password?: string, accent?: string, languageLevel?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentCommandsRegisterCommandResult>>;
    /**
     *
     * @summary Öğretmenin öğrenciyi rapor etmesini sağlar.
     * @param {number} [studentId]
     * @param {string} [content]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportStudent(studentId?: number, content?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğrencinin tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startToExportMyAllInformationsAsStudent(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentCommandsStartToExportMyAllInformationsCommandResult>>;
    /**
     *
     * @summary Öğretmenin öğrencinin engelini kaldırmasını sağlar.
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unblockStudent(studentId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğrencinin profil fotoğrafını değiştirmesini sağlar.
     * @param {File} [photo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfilePhotoAsStudent(photo?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentCommandsUpdateProfilePhotoCommandResult>>;
    /**
     *
     * @param {StudentCommandsUpdateMySpecalitiesParemeters} [studentCommandsUpdateMySpecalitiesParemeters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStudentSpecalities(studentCommandsUpdateMySpecalitiesParemeters?: StudentCommandsUpdateMySpecalitiesParemeters, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * StudentApi - factory interface
 * @export
 */
export declare const StudentApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Öğretmenin öğrenciyi engellemesini sağlar.
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockStudent(studentId?: number, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin kendi e-posta adresini değiştirebilmesini sağlar.
     * @param {string} [newEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyEmailAddress(newEmail?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin kendi ismini değiştirebilmesini sağlar.
     * @param {string} [newName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyName(newName?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin kendi telefon numarasını değiştirebilmesini sağlar.
     * @param {string} [newPhone]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyPhoneNumber(newPhone?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin hesabının silme isteğini admine mail olarak iletir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMyAccountAsStudent(options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin kendi detayını getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyDetailsAsStudent(options?: any): AxiosPromise<StudentQueriesGetMyDetailsQueryResult>;
    /**
     *
     * @summary Öğrencinin detayını getirir.
     * @param {number} studentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudentDetails(studentId: number, options?: any): AxiosPromise<StudentQueriesGetDetailsQueryResult>;
    /**
     *
     * @summary Öğrencinin dışa aktarılmaya hazır verilerini listeler.
     * @param {string} [lastCreatedAt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMyExportsAsStudent(lastCreatedAt?: string, options?: any): AxiosPromise<StudentQueriesListMyExportsQueryResult>;
    /**
     *
     * @param {string} [nameSurname]
     * @param {string} [email]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginGoogleAsStudent(nameSurname?: string, email?: string, options?: any): AxiosPromise<StudentCommandsRegisterCommandResult>;
    /**
     *
     * @summary Apple login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginWithAppleAsStudent(options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Öğrenci olarak giriş yapmayı sağlar.
     * @param {string} [email]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginWithDirectAuthAsStudent(email?: string, password?: string, options?: any): AxiosPromise<StudentCommandsLoginWithDirectAuthCommandResult>;
    /**
     *
     * @summary Facebook login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginWithFacebookAsStudent(options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Google login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginWithGoogleAsStudent(options?: any): AxiosPromise<void>;
    /**
     *
     * @summary E-posta ve şifre ile öğrenci kaydı yapılabilmesini sağlar.
     * @param {string} [nameSurname]
     * @param {string} [email]
     * @param {string} [phoneNumber]
     * @param {string} [password]
     * @param {string} [accent]
     * @param {string} [languageLevel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerAsStudent(nameSurname?: string, email?: string, phoneNumber?: string, password?: string, accent?: string, languageLevel?: string, options?: any): AxiosPromise<StudentCommandsRegisterCommandResult>;
    /**
     *
     * @summary Öğretmenin öğrenciyi rapor etmesini sağlar.
     * @param {number} [studentId]
     * @param {string} [content]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportStudent(studentId?: number, content?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startToExportMyAllInformationsAsStudent(options?: any): AxiosPromise<StudentCommandsStartToExportMyAllInformationsCommandResult>;
    /**
     *
     * @summary Öğretmenin öğrencinin engelini kaldırmasını sağlar.
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unblockStudent(studentId?: number, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin profil fotoğrafını değiştirmesini sağlar.
     * @param {File} [photo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfilePhotoAsStudent(photo?: File, options?: any): AxiosPromise<StudentCommandsUpdateProfilePhotoCommandResult>;
    /**
     *
     * @param {StudentCommandsUpdateMySpecalitiesParemeters} [studentCommandsUpdateMySpecalitiesParemeters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStudentSpecalities(studentCommandsUpdateMySpecalitiesParemeters?: StudentCommandsUpdateMySpecalitiesParemeters, options?: any): AxiosPromise<object>;
};
/**
 * StudentApi - interface
 * @export
 * @interface StudentApi
 */
export interface StudentApiInterface {
    /**
     *
     * @summary Öğretmenin öğrenciyi engellemesini sağlar.
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    blockStudent(studentId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin kendi e-posta adresini değiştirebilmesini sağlar.
     * @param {string} [newEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    changeMyEmailAddress(newEmail?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin kendi ismini değiştirebilmesini sağlar.
     * @param {string} [newName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    changeMyName(newName?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin kendi telefon numarasını değiştirebilmesini sağlar.
     * @param {string} [newPhone]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    changeMyPhoneNumber(newPhone?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin hesabının silme isteğini admine mail olarak iletir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    deleteMyAccountAsStudent(options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin kendi detayını getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    getMyDetailsAsStudent(options?: AxiosRequestConfig): AxiosPromise<StudentQueriesGetMyDetailsQueryResult>;
    /**
     *
     * @summary Öğrencinin detayını getirir.
     * @param {number} studentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    getStudentDetails(studentId: number, options?: AxiosRequestConfig): AxiosPromise<StudentQueriesGetDetailsQueryResult>;
    /**
     *
     * @summary Öğrencinin dışa aktarılmaya hazır verilerini listeler.
     * @param {string} [lastCreatedAt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    listMyExportsAsStudent(lastCreatedAt?: string, options?: AxiosRequestConfig): AxiosPromise<StudentQueriesListMyExportsQueryResult>;
    /**
     *
     * @param {string} [nameSurname]
     * @param {string} [email]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    loginGoogleAsStudent(nameSurname?: string, email?: string, options?: AxiosRequestConfig): AxiosPromise<StudentCommandsRegisterCommandResult>;
    /**
     *
     * @summary Apple login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    loginWithAppleAsStudent(options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Öğrenci olarak giriş yapmayı sağlar.
     * @param {string} [email]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    loginWithDirectAuthAsStudent(email?: string, password?: string, options?: AxiosRequestConfig): AxiosPromise<StudentCommandsLoginWithDirectAuthCommandResult>;
    /**
     *
     * @summary Facebook login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    loginWithFacebookAsStudent(options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Google login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    loginWithGoogleAsStudent(options?: AxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary E-posta ve şifre ile öğrenci kaydı yapılabilmesini sağlar.
     * @param {string} [nameSurname]
     * @param {string} [email]
     * @param {string} [phoneNumber]
     * @param {string} [password]
     * @param {string} [accent]
     * @param {string} [languageLevel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    registerAsStudent(nameSurname?: string, email?: string, phoneNumber?: string, password?: string, accent?: string, languageLevel?: string, options?: AxiosRequestConfig): AxiosPromise<StudentCommandsRegisterCommandResult>;
    /**
     *
     * @summary Öğretmenin öğrenciyi rapor etmesini sağlar.
     * @param {number} [studentId]
     * @param {string} [content]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    reportStudent(studentId?: number, content?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    startToExportMyAllInformationsAsStudent(options?: AxiosRequestConfig): AxiosPromise<StudentCommandsStartToExportMyAllInformationsCommandResult>;
    /**
     *
     * @summary Öğretmenin öğrencinin engelini kaldırmasını sağlar.
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    unblockStudent(studentId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin profil fotoğrafını değiştirmesini sağlar.
     * @param {File} [photo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    updateProfilePhotoAsStudent(photo?: File, options?: AxiosRequestConfig): AxiosPromise<StudentCommandsUpdateProfilePhotoCommandResult>;
    /**
     *
     * @param {StudentCommandsUpdateMySpecalitiesParemeters} [studentCommandsUpdateMySpecalitiesParemeters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApiInterface
     */
    updateStudentSpecalities(studentCommandsUpdateMySpecalitiesParemeters?: StudentCommandsUpdateMySpecalitiesParemeters, options?: AxiosRequestConfig): AxiosPromise<object>;
}
/**
 * StudentApi - object-oriented interface
 * @export
 * @class StudentApi
 * @extends {BaseAPI}
 */
export declare class StudentApi extends BaseAPI implements StudentApiInterface {
    /**
     *
     * @summary Öğretmenin öğrenciyi engellemesini sağlar.
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    blockStudent(studentId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğrencinin kendi e-posta adresini değiştirebilmesini sağlar.
     * @param {string} [newEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    changeMyEmailAddress(newEmail?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğrencinin kendi ismini değiştirebilmesini sağlar.
     * @param {string} [newName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    changeMyName(newName?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğrencinin kendi telefon numarasını değiştirebilmesini sağlar.
     * @param {string} [newPhone]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    changeMyPhoneNumber(newPhone?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğrencinin hesabının silme isteğini admine mail olarak iletir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    deleteMyAccountAsStudent(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğrencinin kendi detayını getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    getMyDetailsAsStudent(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StudentQueriesGetMyDetailsQueryResult, any>>;
    /**
     *
     * @summary Öğrencinin detayını getirir.
     * @param {number} studentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    getStudentDetails(studentId: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StudentQueriesGetDetailsQueryResult, any>>;
    /**
     *
     * @summary Öğrencinin dışa aktarılmaya hazır verilerini listeler.
     * @param {string} [lastCreatedAt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    listMyExportsAsStudent(lastCreatedAt?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StudentQueriesListMyExportsQueryResult, any>>;
    /**
     *
     * @param {string} [nameSurname]
     * @param {string} [email]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    loginGoogleAsStudent(nameSurname?: string, email?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StudentCommandsRegisterCommandResult, any>>;
    /**
     *
     * @summary Apple login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    loginWithAppleAsStudent(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Öğrenci olarak giriş yapmayı sağlar.
     * @param {string} [email]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    loginWithDirectAuthAsStudent(email?: string, password?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StudentCommandsLoginWithDirectAuthCommandResult, any>>;
    /**
     *
     * @summary Facebook login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    loginWithFacebookAsStudent(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Google login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    loginWithGoogleAsStudent(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary E-posta ve şifre ile öğrenci kaydı yapılabilmesini sağlar.
     * @param {string} [nameSurname]
     * @param {string} [email]
     * @param {string} [phoneNumber]
     * @param {string} [password]
     * @param {string} [accent]
     * @param {string} [languageLevel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    registerAsStudent(nameSurname?: string, email?: string, phoneNumber?: string, password?: string, accent?: string, languageLevel?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StudentCommandsRegisterCommandResult, any>>;
    /**
     *
     * @summary Öğretmenin öğrenciyi rapor etmesini sağlar.
     * @param {number} [studentId]
     * @param {string} [content]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    reportStudent(studentId?: number, content?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğrencinin tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    startToExportMyAllInformationsAsStudent(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StudentCommandsStartToExportMyAllInformationsCommandResult, any>>;
    /**
     *
     * @summary Öğretmenin öğrencinin engelini kaldırmasını sağlar.
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    unblockStudent(studentId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğrencinin profil fotoğrafını değiştirmesini sağlar.
     * @param {File} [photo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    updateProfilePhotoAsStudent(photo?: File, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StudentCommandsUpdateProfilePhotoCommandResult, any>>;
    /**
     *
     * @param {StudentCommandsUpdateMySpecalitiesParemeters} [studentCommandsUpdateMySpecalitiesParemeters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    updateStudentSpecalities(studentCommandsUpdateMySpecalitiesParemeters?: StudentCommandsUpdateMySpecalitiesParemeters, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
}

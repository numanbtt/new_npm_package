/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * TeacherApi - axios parameter creator
 * @export
 */
export const TeacherApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Öğretmene gelen anlık aramayı kabul etmesini sağlar.
         * @param {number} [callId]
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptCall: (callId, teacherId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/AcceptCall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (callId !== undefined) {
                localVarQueryParameter['CallId'] = callId;
            }
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğrencinin öğretmeni engellemesini sağlar.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockTeacher: (teacherId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/Block`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğretmenin açıklamasını değiştirir.
         * @param {string} [newDescription]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyDescription: (newDescription, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/ChangeMyDescription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (newDescription !== undefined) {
                localVarQueryParameter['NewDescription'] = newDescription;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğretmenin sisteme kayıtlı IBAN bilgisini değiştirir.
         * @param {string} [bankName]
         * @param {string} [accountHolderName]
         * @param {string} [iban]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyIbanNumber: (bankName, accountHolderName, iban, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/ChangeMyIbanNumber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (bankName !== undefined) {
                localVarQueryParameter['BankName'] = bankName;
            }
            if (accountHolderName !== undefined) {
                localVarQueryParameter['AccountHolderName'] = accountHolderName;
            }
            if (iban !== undefined) {
                localVarQueryParameter['Iban'] = iban;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğretmenin çevrimiçi/çevrimdışı durumunu değiştirir.
         * @param {boolean} [isOnline]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyOnlineStatus: (isOnline, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/ChangeMyOnlineStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (isOnline !== undefined) {
                localVarQueryParameter['IsOnline'] = isOnline;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğretmenin youtube video linkini değiştirir.
         * @param {string} [youtubeVideoUrl]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyYoutubeVideoUrl: (youtubeVideoUrl, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/ChangeMyYoutubeVideoUrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (youtubeVideoUrl !== undefined) {
                localVarQueryParameter['YoutubeVideoUrl'] = youtubeVideoUrl;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {number} [teacherId]
         * @param {number} [studentId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkStudentReview: (teacherId, studentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/CheckStudentReview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğretmenin hesabının silme isteğini admine mail olarak iletir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMyAccountAsTeacher: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/DeleteMyAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğrencinin öğretmeni favoriye eklemesini sağlar.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        favoriteTeacher: (teacherId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/Favorite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğretmenin kendi detayını getirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyDetailsAsTeacher: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/GetMyDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğretmen\'in detayını getirir.
         * @param {number} teacherId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacherDetails: (teacherId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teacherId' is not null or undefined
            assertParamExists('getTeacherDetails', 'teacherId', teacherId);
            const localVarPath = `/api/Teacher/GetDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğretmenin dışa aktarılmaya hazır verilerini listeler.
         * @param {string} [lastCreatedAt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyExportsAsTeacher: (lastCreatedAt, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/ListMyExports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (lastCreatedAt !== undefined) {
                localVarQueryParameter['LastCreatedAt'] = (lastCreatedAt instanceof Date) ?
                    lastCreatedAt.toISOString() :
                    lastCreatedAt;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Favori öğretmenleri listeler. Ayrıca isimle arama filtresi uygulanabilir.
         * @param {number} [lastTeacherId]
         * @param {string} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyFavoriteTeachers: (lastTeacherId, query, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/ListMyFavorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (lastTeacherId !== undefined) {
                localVarQueryParameter['LastTeacherId'] = lastTeacherId;
            }
            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğretmenleri listeler. Ayrıca filtreler uygulanabilir.
         * @param {number} [lastId]
         * @param {string} [filtersQuery]
         * @param {Array<string>} [filtersTeachingStyles] Girilebilecek değerler:  KIND_AND_PATIENT,  FUN_AND_GREGARIOUS,  SCHOLARLY_AND_KNOWLEDGEABLE
         * @param {Array<string>} [filtersLessonTypes] Girilebilecek değerler:  PRONUNCIATION_LESSONS,  GRAMMAR_LESSONS,  LESSONS_WITH_MOVIES,  LESSONS_FOR_CHILDREN,  BUSINESS_ENGLISH,  UNIVERSITY_ENGLISH_PREPARATION,  EXAM,  TOEFL_PREPARATION,  IELTS_PREPARATION
         * @param {Array<string>} [filtersLanguageLevel] Girilebilecek değerler:  BEGINNER,  INTERMEDIATE,  ADVANCED
         * @param {Array<string>} [filtersAccentTypes] Girilebilecek değerler:  NATIVE_US,  NATIVE_BRITISH,  TURKISH,  OTHER
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeachers: (lastId, filtersQuery, filtersTeachingStyles, filtersLessonTypes, filtersLanguageLevel, filtersAccentTypes, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (lastId !== undefined) {
                localVarQueryParameter['LastId'] = lastId;
            }
            if (filtersQuery !== undefined) {
                localVarQueryParameter['Filters.Query'] = filtersQuery;
            }
            if (filtersTeachingStyles) {
                localVarQueryParameter['Filters.TeachingStyles'] = filtersTeachingStyles;
            }
            if (filtersLessonTypes) {
                localVarQueryParameter['Filters.LessonTypes'] = filtersLessonTypes;
            }
            if (filtersLanguageLevel) {
                localVarQueryParameter['Filters.LanguageLevel'] = filtersLanguageLevel;
            }
            if (filtersAccentTypes) {
                localVarQueryParameter['Filters.AccentTypes'] = filtersAccentTypes;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginOutWithDirectAuthAsTeacher: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/LoginOutWithDirectAuth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğretmenin eposta ve şifre ile giriş yapabilmesini sağlar.
         * @param {string} [email]
         * @param {string} [password]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithDirectAuthAsTeacher: (email, password, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/LoginWithDirectAuth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }
            if (password !== undefined) {
                localVarQueryParameter['Password'] = password;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğretmenin kazanç durumunu getirir.  Kazanç hesaplaması neye göre ve nasıl olacak?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myEarnings: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/MyEarnings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Görüşme sonrasında öğretmeni puanlar.
         * @param {number} [appointmentId]
         * @param {number} [rate]
         * @param {string} [comment]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rateTeacher: (appointmentId, rate, comment, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/Rate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (appointmentId !== undefined) {
                localVarQueryParameter['AppointmentId'] = appointmentId;
            }
            if (rate !== undefined) {
                localVarQueryParameter['Rate'] = rate;
            }
            if (comment !== undefined) {
                localVarQueryParameter['comment'] = comment;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {number} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingDelete: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/RatingDelete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingList: (teacherId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/RatingList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğretmen olarak kayıt olmayı sağlar
         * @param {File} [profilePhoto]
         * @param {string} [nameSurname]
         * @param {string} [eMail]
         * @param {string} [password]
         * @param {string} [phoneNumber]
         * @param {string} [description]
         * @param {string} [youtubeVideoUrl]
         * @param {string} [accent]
         * @param {string} [teachingStyles]
         * @param {string} [lessonTypes]
         * @param {string} [languageLevel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAsTeacher: (profilePhoto, nameSurname, eMail, password, phoneNumber, description, youtubeVideoUrl, accent, teachingStyles, lessonTypes, languageLevel, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/Register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            if (nameSurname !== undefined) {
                localVarQueryParameter['NameSurname'] = nameSurname;
            }
            if (eMail !== undefined) {
                localVarQueryParameter['EMail'] = eMail;
            }
            if (password !== undefined) {
                localVarQueryParameter['Password'] = password;
            }
            if (phoneNumber !== undefined) {
                localVarQueryParameter['PhoneNumber'] = phoneNumber;
            }
            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }
            if (youtubeVideoUrl !== undefined) {
                localVarQueryParameter['YoutubeVideoUrl'] = youtubeVideoUrl;
            }
            if (accent !== undefined) {
                localVarQueryParameter['Accent'] = accent;
            }
            if (teachingStyles !== undefined) {
                localVarQueryParameter['TeachingStyles'] = teachingStyles;
            }
            if (lessonTypes !== undefined) {
                localVarQueryParameter['LessonTypes'] = lessonTypes;
            }
            if (languageLevel !== undefined) {
                localVarQueryParameter['LanguageLevel'] = languageLevel;
            }
            if (profilePhoto !== undefined) {
                localVarFormParams.append('ProfilePhoto', profilePhoto);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğretmene gelen anlık aramayı reddetmesini sağlar.
         * @param {number} [callId]
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectCall: (callId, teacherId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/RejectCall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (callId !== undefined) {
                localVarQueryParameter['CallId'] = callId;
            }
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğrencinin öğretmeni rapor etmesini sağlar.
         * @param {number} [teacherId]
         * @param {string} [content]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportTeacher: (teacherId, content, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/Report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            if (content !== undefined) {
                localVarQueryParameter['Content'] = content;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Kullanıcının tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startToExportMyAllInformationsAsTeacher: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/StartToExportMyAllInformations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {number} [teacherId]
         * @param {number} [studentId]
         * @param {number} [rate]
         * @param {string} [comment]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherRatePost: (teacherId, studentId, rate, comment, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/TeacherRatePost`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }
            if (rate !== undefined) {
                localVarQueryParameter['Rate'] = rate;
            }
            if (comment !== undefined) {
                localVarQueryParameter['comment'] = comment;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğrencinin öğretmenin engelini kaldırmasını sağlar.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockTeacher: (teacherId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/Unblock`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğrencinin öğretmeni favorilerinden kaldırmasını sağlar.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfavoriteTeacher: (teacherId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/Unfavorite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğretmenin profil fotoğrafını değiştirmesini sağlar.
         * @param {File} [photo]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMyProfilePhotoAsTeacher: (photo, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/UpdateProfilePhoto`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (photo !== undefined) {
                localVarFormParams.append('Photo', photo);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğretmen\'in kendi uzmanlıklarını güncelleyebilmesini sağlar.
         * @param {TeacherCommandsUpdateMySpecalitiesParemeters} [teacherCommandsUpdateMySpecalitiesParemeters]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMySpecalities: (teacherCommandsUpdateMySpecalitiesParemeters, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Teacher/UpdateMySpecalities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(teacherCommandsUpdateMySpecalitiesParemeters, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * TeacherApi - functional programming interface
 * @export
 */
export const TeacherApiFp = function (configuration) {
    const localVarAxiosParamCreator = TeacherApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Öğretmene gelen anlık aramayı kabul etmesini sağlar.
         * @param {number} [callId]
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptCall(callId, teacherId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.acceptCall(callId, teacherId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğrencinin öğretmeni engellemesini sağlar.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockTeacher(teacherId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.blockTeacher(teacherId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğretmenin açıklamasını değiştirir.
         * @param {string} [newDescription]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyDescription(newDescription, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeMyDescription(newDescription, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğretmenin sisteme kayıtlı IBAN bilgisini değiştirir.
         * @param {string} [bankName]
         * @param {string} [accountHolderName]
         * @param {string} [iban]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyIbanNumber(bankName, accountHolderName, iban, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeMyIbanNumber(bankName, accountHolderName, iban, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğretmenin çevrimiçi/çevrimdışı durumunu değiştirir.
         * @param {boolean} [isOnline]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyOnlineStatus(isOnline, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeMyOnlineStatus(isOnline, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğretmenin youtube video linkini değiştirir.
         * @param {string} [youtubeVideoUrl]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyYoutubeVideoUrl(youtubeVideoUrl, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeMyYoutubeVideoUrl(youtubeVideoUrl, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {number} [teacherId]
         * @param {number} [studentId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkStudentReview(teacherId, studentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.checkStudentReview(teacherId, studentId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğretmenin hesabının silme isteğini admine mail olarak iletir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMyAccountAsTeacher(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteMyAccountAsTeacher(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğrencinin öğretmeni favoriye eklemesini sağlar.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        favoriteTeacher(teacherId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.favoriteTeacher(teacherId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğretmenin kendi detayını getirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyDetailsAsTeacher(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMyDetailsAsTeacher(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğretmen\'in detayını getirir.
         * @param {number} teacherId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacherDetails(teacherId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTeacherDetails(teacherId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğretmenin dışa aktarılmaya hazır verilerini listeler.
         * @param {string} [lastCreatedAt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyExportsAsTeacher(lastCreatedAt, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listMyExportsAsTeacher(lastCreatedAt, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Favori öğretmenleri listeler. Ayrıca isimle arama filtresi uygulanabilir.
         * @param {number} [lastTeacherId]
         * @param {string} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyFavoriteTeachers(lastTeacherId, query, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listMyFavoriteTeachers(lastTeacherId, query, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğretmenleri listeler. Ayrıca filtreler uygulanabilir.
         * @param {number} [lastId]
         * @param {string} [filtersQuery]
         * @param {Array<string>} [filtersTeachingStyles] Girilebilecek değerler:  KIND_AND_PATIENT,  FUN_AND_GREGARIOUS,  SCHOLARLY_AND_KNOWLEDGEABLE
         * @param {Array<string>} [filtersLessonTypes] Girilebilecek değerler:  PRONUNCIATION_LESSONS,  GRAMMAR_LESSONS,  LESSONS_WITH_MOVIES,  LESSONS_FOR_CHILDREN,  BUSINESS_ENGLISH,  UNIVERSITY_ENGLISH_PREPARATION,  EXAM,  TOEFL_PREPARATION,  IELTS_PREPARATION
         * @param {Array<string>} [filtersLanguageLevel] Girilebilecek değerler:  BEGINNER,  INTERMEDIATE,  ADVANCED
         * @param {Array<string>} [filtersAccentTypes] Girilebilecek değerler:  NATIVE_US,  NATIVE_BRITISH,  TURKISH,  OTHER
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeachers(lastId, filtersQuery, filtersTeachingStyles, filtersLessonTypes, filtersLanguageLevel, filtersAccentTypes, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listTeachers(lastId, filtersQuery, filtersTeachingStyles, filtersLessonTypes, filtersLanguageLevel, filtersAccentTypes, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginOutWithDirectAuthAsTeacher(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.loginOutWithDirectAuthAsTeacher(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğretmenin eposta ve şifre ile giriş yapabilmesini sağlar.
         * @param {string} [email]
         * @param {string} [password]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithDirectAuthAsTeacher(email, password, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.loginWithDirectAuthAsTeacher(email, password, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğretmenin kazanç durumunu getirir.  Kazanç hesaplaması neye göre ve nasıl olacak?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myEarnings(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.myEarnings(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Görüşme sonrasında öğretmeni puanlar.
         * @param {number} [appointmentId]
         * @param {number} [rate]
         * @param {string} [comment]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rateTeacher(appointmentId, rate, comment, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.rateTeacher(appointmentId, rate, comment, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {number} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingDelete(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ratingDelete(id, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingList(teacherId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.ratingList(teacherId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğretmen olarak kayıt olmayı sağlar
         * @param {File} [profilePhoto]
         * @param {string} [nameSurname]
         * @param {string} [eMail]
         * @param {string} [password]
         * @param {string} [phoneNumber]
         * @param {string} [description]
         * @param {string} [youtubeVideoUrl]
         * @param {string} [accent]
         * @param {string} [teachingStyles]
         * @param {string} [lessonTypes]
         * @param {string} [languageLevel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAsTeacher(profilePhoto, nameSurname, eMail, password, phoneNumber, description, youtubeVideoUrl, accent, teachingStyles, lessonTypes, languageLevel, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.registerAsTeacher(profilePhoto, nameSurname, eMail, password, phoneNumber, description, youtubeVideoUrl, accent, teachingStyles, lessonTypes, languageLevel, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğretmene gelen anlık aramayı reddetmesini sağlar.
         * @param {number} [callId]
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectCall(callId, teacherId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.rejectCall(callId, teacherId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğrencinin öğretmeni rapor etmesini sağlar.
         * @param {number} [teacherId]
         * @param {string} [content]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportTeacher(teacherId, content, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.reportTeacher(teacherId, content, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Kullanıcının tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startToExportMyAllInformationsAsTeacher(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.startToExportMyAllInformationsAsTeacher(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {number} [teacherId]
         * @param {number} [studentId]
         * @param {number} [rate]
         * @param {string} [comment]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherRatePost(teacherId, studentId, rate, comment, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.teacherRatePost(teacherId, studentId, rate, comment, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğrencinin öğretmenin engelini kaldırmasını sağlar.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockTeacher(teacherId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.unblockTeacher(teacherId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğrencinin öğretmeni favorilerinden kaldırmasını sağlar.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfavoriteTeacher(teacherId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.unfavoriteTeacher(teacherId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğretmenin profil fotoğrafını değiştirmesini sağlar.
         * @param {File} [photo]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMyProfilePhotoAsTeacher(photo, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateMyProfilePhotoAsTeacher(photo, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğretmen\'in kendi uzmanlıklarını güncelleyebilmesini sağlar.
         * @param {TeacherCommandsUpdateMySpecalitiesParemeters} [teacherCommandsUpdateMySpecalitiesParemeters]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMySpecalities(teacherCommandsUpdateMySpecalitiesParemeters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateMySpecalities(teacherCommandsUpdateMySpecalitiesParemeters, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * TeacherApi - factory interface
 * @export
 */
export const TeacherApiFactory = function (configuration, basePath, axios) {
    const localVarFp = TeacherApiFp(configuration);
    return {
        /**
         *
         * @summary Öğretmene gelen anlık aramayı kabul etmesini sağlar.
         * @param {number} [callId]
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acceptCall(callId, teacherId, options) {
            return localVarFp.acceptCall(callId, teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğrencinin öğretmeni engellemesini sağlar.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockTeacher(teacherId, options) {
            return localVarFp.blockTeacher(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğretmenin açıklamasını değiştirir.
         * @param {string} [newDescription]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyDescription(newDescription, options) {
            return localVarFp.changeMyDescription(newDescription, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğretmenin sisteme kayıtlı IBAN bilgisini değiştirir.
         * @param {string} [bankName]
         * @param {string} [accountHolderName]
         * @param {string} [iban]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyIbanNumber(bankName, accountHolderName, iban, options) {
            return localVarFp.changeMyIbanNumber(bankName, accountHolderName, iban, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğretmenin çevrimiçi/çevrimdışı durumunu değiştirir.
         * @param {boolean} [isOnline]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyOnlineStatus(isOnline, options) {
            return localVarFp.changeMyOnlineStatus(isOnline, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğretmenin youtube video linkini değiştirir.
         * @param {string} [youtubeVideoUrl]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyYoutubeVideoUrl(youtubeVideoUrl, options) {
            return localVarFp.changeMyYoutubeVideoUrl(youtubeVideoUrl, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} [teacherId]
         * @param {number} [studentId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkStudentReview(teacherId, studentId, options) {
            return localVarFp.checkStudentReview(teacherId, studentId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğretmenin hesabının silme isteğini admine mail olarak iletir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMyAccountAsTeacher(options) {
            return localVarFp.deleteMyAccountAsTeacher(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğrencinin öğretmeni favoriye eklemesini sağlar.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        favoriteTeacher(teacherId, options) {
            return localVarFp.favoriteTeacher(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğretmenin kendi detayını getirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyDetailsAsTeacher(options) {
            return localVarFp.getMyDetailsAsTeacher(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğretmen\'in detayını getirir.
         * @param {number} teacherId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacherDetails(teacherId, options) {
            return localVarFp.getTeacherDetails(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğretmenin dışa aktarılmaya hazır verilerini listeler.
         * @param {string} [lastCreatedAt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyExportsAsTeacher(lastCreatedAt, options) {
            return localVarFp.listMyExportsAsTeacher(lastCreatedAt, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Favori öğretmenleri listeler. Ayrıca isimle arama filtresi uygulanabilir.
         * @param {number} [lastTeacherId]
         * @param {string} [query]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyFavoriteTeachers(lastTeacherId, query, options) {
            return localVarFp.listMyFavoriteTeachers(lastTeacherId, query, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğretmenleri listeler. Ayrıca filtreler uygulanabilir.
         * @param {number} [lastId]
         * @param {string} [filtersQuery]
         * @param {Array<string>} [filtersTeachingStyles] Girilebilecek değerler:  KIND_AND_PATIENT,  FUN_AND_GREGARIOUS,  SCHOLARLY_AND_KNOWLEDGEABLE
         * @param {Array<string>} [filtersLessonTypes] Girilebilecek değerler:  PRONUNCIATION_LESSONS,  GRAMMAR_LESSONS,  LESSONS_WITH_MOVIES,  LESSONS_FOR_CHILDREN,  BUSINESS_ENGLISH,  UNIVERSITY_ENGLISH_PREPARATION,  EXAM,  TOEFL_PREPARATION,  IELTS_PREPARATION
         * @param {Array<string>} [filtersLanguageLevel] Girilebilecek değerler:  BEGINNER,  INTERMEDIATE,  ADVANCED
         * @param {Array<string>} [filtersAccentTypes] Girilebilecek değerler:  NATIVE_US,  NATIVE_BRITISH,  TURKISH,  OTHER
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeachers(lastId, filtersQuery, filtersTeachingStyles, filtersLessonTypes, filtersLanguageLevel, filtersAccentTypes, options) {
            return localVarFp.listTeachers(lastId, filtersQuery, filtersTeachingStyles, filtersLessonTypes, filtersLanguageLevel, filtersAccentTypes, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginOutWithDirectAuthAsTeacher(options) {
            return localVarFp.loginOutWithDirectAuthAsTeacher(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğretmenin eposta ve şifre ile giriş yapabilmesini sağlar.
         * @param {string} [email]
         * @param {string} [password]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithDirectAuthAsTeacher(email, password, options) {
            return localVarFp.loginWithDirectAuthAsTeacher(email, password, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğretmenin kazanç durumunu getirir.  Kazanç hesaplaması neye göre ve nasıl olacak?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        myEarnings(options) {
            return localVarFp.myEarnings(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Görüşme sonrasında öğretmeni puanlar.
         * @param {number} [appointmentId]
         * @param {number} [rate]
         * @param {string} [comment]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rateTeacher(appointmentId, rate, comment, options) {
            return localVarFp.rateTeacher(appointmentId, rate, comment, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingDelete(id, options) {
            return localVarFp.ratingDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratingList(teacherId, options) {
            return localVarFp.ratingList(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğretmen olarak kayıt olmayı sağlar
         * @param {File} [profilePhoto]
         * @param {string} [nameSurname]
         * @param {string} [eMail]
         * @param {string} [password]
         * @param {string} [phoneNumber]
         * @param {string} [description]
         * @param {string} [youtubeVideoUrl]
         * @param {string} [accent]
         * @param {string} [teachingStyles]
         * @param {string} [lessonTypes]
         * @param {string} [languageLevel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAsTeacher(profilePhoto, nameSurname, eMail, password, phoneNumber, description, youtubeVideoUrl, accent, teachingStyles, lessonTypes, languageLevel, options) {
            return localVarFp.registerAsTeacher(profilePhoto, nameSurname, eMail, password, phoneNumber, description, youtubeVideoUrl, accent, teachingStyles, lessonTypes, languageLevel, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğretmene gelen anlık aramayı reddetmesini sağlar.
         * @param {number} [callId]
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectCall(callId, teacherId, options) {
            return localVarFp.rejectCall(callId, teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğrencinin öğretmeni rapor etmesini sağlar.
         * @param {number} [teacherId]
         * @param {string} [content]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportTeacher(teacherId, content, options) {
            return localVarFp.reportTeacher(teacherId, content, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Kullanıcının tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startToExportMyAllInformationsAsTeacher(options) {
            return localVarFp.startToExportMyAllInformationsAsTeacher(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} [teacherId]
         * @param {number} [studentId]
         * @param {number} [rate]
         * @param {string} [comment]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherRatePost(teacherId, studentId, rate, comment, options) {
            return localVarFp.teacherRatePost(teacherId, studentId, rate, comment, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğrencinin öğretmenin engelini kaldırmasını sağlar.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockTeacher(teacherId, options) {
            return localVarFp.unblockTeacher(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğrencinin öğretmeni favorilerinden kaldırmasını sağlar.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfavoriteTeacher(teacherId, options) {
            return localVarFp.unfavoriteTeacher(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğretmenin profil fotoğrafını değiştirmesini sağlar.
         * @param {File} [photo]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMyProfilePhotoAsTeacher(photo, options) {
            return localVarFp.updateMyProfilePhotoAsTeacher(photo, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğretmen\'in kendi uzmanlıklarını güncelleyebilmesini sağlar.
         * @param {TeacherCommandsUpdateMySpecalitiesParemeters} [teacherCommandsUpdateMySpecalitiesParemeters]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMySpecalities(teacherCommandsUpdateMySpecalitiesParemeters, options) {
            return localVarFp.updateMySpecalities(teacherCommandsUpdateMySpecalitiesParemeters, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * TeacherApi - object-oriented interface
 * @export
 * @class TeacherApi
 * @extends {BaseAPI}
 */
export class TeacherApi extends BaseAPI {
    /**
     *
     * @summary Öğretmene gelen anlık aramayı kabul etmesini sağlar.
     * @param {number} [callId]
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    acceptCall(callId, teacherId, options) {
        return TeacherApiFp(this.configuration).acceptCall(callId, teacherId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğrencinin öğretmeni engellemesini sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    blockTeacher(teacherId, options) {
        return TeacherApiFp(this.configuration).blockTeacher(teacherId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğretmenin açıklamasını değiştirir.
     * @param {string} [newDescription]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    changeMyDescription(newDescription, options) {
        return TeacherApiFp(this.configuration).changeMyDescription(newDescription, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğretmenin sisteme kayıtlı IBAN bilgisini değiştirir.
     * @param {string} [bankName]
     * @param {string} [accountHolderName]
     * @param {string} [iban]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    changeMyIbanNumber(bankName, accountHolderName, iban, options) {
        return TeacherApiFp(this.configuration).changeMyIbanNumber(bankName, accountHolderName, iban, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğretmenin çevrimiçi/çevrimdışı durumunu değiştirir.
     * @param {boolean} [isOnline]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    changeMyOnlineStatus(isOnline, options) {
        return TeacherApiFp(this.configuration).changeMyOnlineStatus(isOnline, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğretmenin youtube video linkini değiştirir.
     * @param {string} [youtubeVideoUrl]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    changeMyYoutubeVideoUrl(youtubeVideoUrl, options) {
        return TeacherApiFp(this.configuration).changeMyYoutubeVideoUrl(youtubeVideoUrl, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    checkStudentReview(teacherId, studentId, options) {
        return TeacherApiFp(this.configuration).checkStudentReview(teacherId, studentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğretmenin hesabının silme isteğini admine mail olarak iletir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    deleteMyAccountAsTeacher(options) {
        return TeacherApiFp(this.configuration).deleteMyAccountAsTeacher(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğrencinin öğretmeni favoriye eklemesini sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    favoriteTeacher(teacherId, options) {
        return TeacherApiFp(this.configuration).favoriteTeacher(teacherId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğretmenin kendi detayını getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    getMyDetailsAsTeacher(options) {
        return TeacherApiFp(this.configuration).getMyDetailsAsTeacher(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğretmen\'in detayını getirir.
     * @param {number} teacherId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    getTeacherDetails(teacherId, options) {
        return TeacherApiFp(this.configuration).getTeacherDetails(teacherId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğretmenin dışa aktarılmaya hazır verilerini listeler.
     * @param {string} [lastCreatedAt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    listMyExportsAsTeacher(lastCreatedAt, options) {
        return TeacherApiFp(this.configuration).listMyExportsAsTeacher(lastCreatedAt, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Favori öğretmenleri listeler. Ayrıca isimle arama filtresi uygulanabilir.
     * @param {number} [lastTeacherId]
     * @param {string} [query]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    listMyFavoriteTeachers(lastTeacherId, query, options) {
        return TeacherApiFp(this.configuration).listMyFavoriteTeachers(lastTeacherId, query, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğretmenleri listeler. Ayrıca filtreler uygulanabilir.
     * @param {number} [lastId]
     * @param {string} [filtersQuery]
     * @param {Array<string>} [filtersTeachingStyles] Girilebilecek değerler:  KIND_AND_PATIENT,  FUN_AND_GREGARIOUS,  SCHOLARLY_AND_KNOWLEDGEABLE
     * @param {Array<string>} [filtersLessonTypes] Girilebilecek değerler:  PRONUNCIATION_LESSONS,  GRAMMAR_LESSONS,  LESSONS_WITH_MOVIES,  LESSONS_FOR_CHILDREN,  BUSINESS_ENGLISH,  UNIVERSITY_ENGLISH_PREPARATION,  EXAM,  TOEFL_PREPARATION,  IELTS_PREPARATION
     * @param {Array<string>} [filtersLanguageLevel] Girilebilecek değerler:  BEGINNER,  INTERMEDIATE,  ADVANCED
     * @param {Array<string>} [filtersAccentTypes] Girilebilecek değerler:  NATIVE_US,  NATIVE_BRITISH,  TURKISH,  OTHER
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    listTeachers(lastId, filtersQuery, filtersTeachingStyles, filtersLessonTypes, filtersLanguageLevel, filtersAccentTypes, options) {
        return TeacherApiFp(this.configuration).listTeachers(lastId, filtersQuery, filtersTeachingStyles, filtersLessonTypes, filtersLanguageLevel, filtersAccentTypes, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    loginOutWithDirectAuthAsTeacher(options) {
        return TeacherApiFp(this.configuration).loginOutWithDirectAuthAsTeacher(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğretmenin eposta ve şifre ile giriş yapabilmesini sağlar.
     * @param {string} [email]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    loginWithDirectAuthAsTeacher(email, password, options) {
        return TeacherApiFp(this.configuration).loginWithDirectAuthAsTeacher(email, password, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğretmenin kazanç durumunu getirir.  Kazanç hesaplaması neye göre ve nasıl olacak?
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    myEarnings(options) {
        return TeacherApiFp(this.configuration).myEarnings(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Görüşme sonrasında öğretmeni puanlar.
     * @param {number} [appointmentId]
     * @param {number} [rate]
     * @param {string} [comment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    rateTeacher(appointmentId, rate, comment, options) {
        return TeacherApiFp(this.configuration).rateTeacher(appointmentId, rate, comment, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    ratingDelete(id, options) {
        return TeacherApiFp(this.configuration).ratingDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    ratingList(teacherId, options) {
        return TeacherApiFp(this.configuration).ratingList(teacherId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğretmen olarak kayıt olmayı sağlar
     * @param {File} [profilePhoto]
     * @param {string} [nameSurname]
     * @param {string} [eMail]
     * @param {string} [password]
     * @param {string} [phoneNumber]
     * @param {string} [description]
     * @param {string} [youtubeVideoUrl]
     * @param {string} [accent]
     * @param {string} [teachingStyles]
     * @param {string} [lessonTypes]
     * @param {string} [languageLevel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    registerAsTeacher(profilePhoto, nameSurname, eMail, password, phoneNumber, description, youtubeVideoUrl, accent, teachingStyles, lessonTypes, languageLevel, options) {
        return TeacherApiFp(this.configuration).registerAsTeacher(profilePhoto, nameSurname, eMail, password, phoneNumber, description, youtubeVideoUrl, accent, teachingStyles, lessonTypes, languageLevel, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğretmene gelen anlık aramayı reddetmesini sağlar.
     * @param {number} [callId]
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    rejectCall(callId, teacherId, options) {
        return TeacherApiFp(this.configuration).rejectCall(callId, teacherId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğrencinin öğretmeni rapor etmesini sağlar.
     * @param {number} [teacherId]
     * @param {string} [content]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    reportTeacher(teacherId, content, options) {
        return TeacherApiFp(this.configuration).reportTeacher(teacherId, content, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Kullanıcının tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    startToExportMyAllInformationsAsTeacher(options) {
        return TeacherApiFp(this.configuration).startToExportMyAllInformationsAsTeacher(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [studentId]
     * @param {number} [rate]
     * @param {string} [comment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    teacherRatePost(teacherId, studentId, rate, comment, options) {
        return TeacherApiFp(this.configuration).teacherRatePost(teacherId, studentId, rate, comment, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğrencinin öğretmenin engelini kaldırmasını sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    unblockTeacher(teacherId, options) {
        return TeacherApiFp(this.configuration).unblockTeacher(teacherId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğrencinin öğretmeni favorilerinden kaldırmasını sağlar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    unfavoriteTeacher(teacherId, options) {
        return TeacherApiFp(this.configuration).unfavoriteTeacher(teacherId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğretmenin profil fotoğrafını değiştirmesini sağlar.
     * @param {File} [photo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    updateMyProfilePhotoAsTeacher(photo, options) {
        return TeacherApiFp(this.configuration).updateMyProfilePhotoAsTeacher(photo, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğretmen\'in kendi uzmanlıklarını güncelleyebilmesini sağlar.
     * @param {TeacherCommandsUpdateMySpecalitiesParemeters} [teacherCommandsUpdateMySpecalitiesParemeters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    updateMySpecalities(teacherCommandsUpdateMySpecalitiesParemeters, options) {
        return TeacherApiFp(this.configuration).updateMySpecalities(teacherCommandsUpdateMySpecalitiesParemeters, options).then((request) => request(this.axios, this.basePath));
    }
}

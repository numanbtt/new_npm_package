/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * WordTutorialCategoryApi - axios parameter creator
 * @export
 */
export const WordTutorialCategoryApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Bir kelime eğitiminin detayını getirir.
         * @param {string} slug
         * @param {string} [selectedWordTutorialSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWordTutorialCategoryDetails: (slug, selectedWordTutorialSlug, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('getWordTutorialCategoryDetails', 'slug', slug);
            const localVarPath = `/api/WordTutorialCategory/GetDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (slug !== undefined) {
                localVarQueryParameter['Slug'] = slug;
            }
            if (selectedWordTutorialSlug !== undefined) {
                localVarQueryParameter['SelectedWordTutorialSlug'] = selectedWordTutorialSlug;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Kelime eğitimi kategori listesini getirir.
         * @param {number} [lastId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWordTutorialCategories: (lastId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/WordTutorialCategory/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (lastId !== undefined) {
                localVarQueryParameter['LastId'] = lastId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Varolan kelime eğitimi kategorisinin içerisinde gösterilen kelimeleri rastgele olarak yeniler.
         * @param {number} categoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshWordTutorialsInCategory: (categoryId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('refreshWordTutorialsInCategory', 'categoryId', categoryId);
            const localVarPath = `/api/WordTutorialCategory/RefreshWordTutorialsInCategory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (categoryId !== undefined) {
                localVarQueryParameter['CategoryId'] = categoryId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bulunulan kelime eğitimi kategorisinde kelime araması yapar.
         * @param {string} [wordTutorialCategorySlug] Kelime eğitimi kategorisinin slug\&#39;ıdır.
         * @param {string} [query]
         * @param {number} [lastId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchInWordTutorialCategory: (wordTutorialCategorySlug, query, lastId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/WordTutorialCategory/Search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (wordTutorialCategorySlug !== undefined) {
                localVarQueryParameter['WordTutorialCategorySlug'] = wordTutorialCategorySlug;
            }
            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }
            if (lastId !== undefined) {
                localVarQueryParameter['LastId'] = lastId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * WordTutorialCategoryApi - functional programming interface
 * @export
 */
export const WordTutorialCategoryApiFp = function (configuration) {
    const localVarAxiosParamCreator = WordTutorialCategoryApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Bir kelime eğitiminin detayını getirir.
         * @param {string} slug
         * @param {string} [selectedWordTutorialSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWordTutorialCategoryDetails(slug, selectedWordTutorialSlug, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getWordTutorialCategoryDetails(slug, selectedWordTutorialSlug, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Kelime eğitimi kategori listesini getirir.
         * @param {number} [lastId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWordTutorialCategories(lastId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listWordTutorialCategories(lastId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Varolan kelime eğitimi kategorisinin içerisinde gösterilen kelimeleri rastgele olarak yeniler.
         * @param {number} categoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshWordTutorialsInCategory(categoryId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.refreshWordTutorialsInCategory(categoryId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bulunulan kelime eğitimi kategorisinde kelime araması yapar.
         * @param {string} [wordTutorialCategorySlug] Kelime eğitimi kategorisinin slug\&#39;ıdır.
         * @param {string} [query]
         * @param {number} [lastId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchInWordTutorialCategory(wordTutorialCategorySlug, query, lastId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.searchInWordTutorialCategory(wordTutorialCategorySlug, query, lastId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * WordTutorialCategoryApi - factory interface
 * @export
 */
export const WordTutorialCategoryApiFactory = function (configuration, basePath, axios) {
    const localVarFp = WordTutorialCategoryApiFp(configuration);
    return {
        /**
         *
         * @summary Bir kelime eğitiminin detayını getirir.
         * @param {string} slug
         * @param {string} [selectedWordTutorialSlug]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWordTutorialCategoryDetails(slug, selectedWordTutorialSlug, options) {
            return localVarFp.getWordTutorialCategoryDetails(slug, selectedWordTutorialSlug, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Kelime eğitimi kategori listesini getirir.
         * @param {number} [lastId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWordTutorialCategories(lastId, options) {
            return localVarFp.listWordTutorialCategories(lastId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Varolan kelime eğitimi kategorisinin içerisinde gösterilen kelimeleri rastgele olarak yeniler.
         * @param {number} categoryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshWordTutorialsInCategory(categoryId, options) {
            return localVarFp.refreshWordTutorialsInCategory(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bulunulan kelime eğitimi kategorisinde kelime araması yapar.
         * @param {string} [wordTutorialCategorySlug] Kelime eğitimi kategorisinin slug\&#39;ıdır.
         * @param {string} [query]
         * @param {number} [lastId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchInWordTutorialCategory(wordTutorialCategorySlug, query, lastId, options) {
            return localVarFp.searchInWordTutorialCategory(wordTutorialCategorySlug, query, lastId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * WordTutorialCategoryApi - object-oriented interface
 * @export
 * @class WordTutorialCategoryApi
 * @extends {BaseAPI}
 */
export class WordTutorialCategoryApi extends BaseAPI {
    /**
     *
     * @summary Bir kelime eğitiminin detayını getirir.
     * @param {string} slug
     * @param {string} [selectedWordTutorialSlug]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialCategoryApi
     */
    getWordTutorialCategoryDetails(slug, selectedWordTutorialSlug, options) {
        return WordTutorialCategoryApiFp(this.configuration).getWordTutorialCategoryDetails(slug, selectedWordTutorialSlug, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Kelime eğitimi kategori listesini getirir.
     * @param {number} [lastId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialCategoryApi
     */
    listWordTutorialCategories(lastId, options) {
        return WordTutorialCategoryApiFp(this.configuration).listWordTutorialCategories(lastId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Varolan kelime eğitimi kategorisinin içerisinde gösterilen kelimeleri rastgele olarak yeniler.
     * @param {number} categoryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialCategoryApi
     */
    refreshWordTutorialsInCategory(categoryId, options) {
        return WordTutorialCategoryApiFp(this.configuration).refreshWordTutorialsInCategory(categoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bulunulan kelime eğitimi kategorisinde kelime araması yapar.
     * @param {string} [wordTutorialCategorySlug] Kelime eğitimi kategorisinin slug\&#39;ıdır.
     * @param {string} [query]
     * @param {number} [lastId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialCategoryApi
     */
    searchInWordTutorialCategory(wordTutorialCategorySlug, query, lastId, options) {
        return WordTutorialCategoryApiFp(this.configuration).searchInWordTutorialCategory(wordTutorialCategorySlug, query, lastId, options).then((request) => request(this.axios, this.basePath));
    }
}

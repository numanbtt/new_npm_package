/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, setBearerAuthToObject, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * PromotionAdministrationApi - axios parameter creator
 * @export
 */
export const PromotionAdministrationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary İndirimin aktiflik durumunu değiştirmeyi sağlar
         * @param {number} [discountId]
         * @param {boolean} [newState]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeDiscountActiveState: (discountId, newState, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/PromotionAdministration/ChangeDiscountActiveState`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (discountId !== undefined) {
                localVarQueryParameter['DiscountId'] = discountId;
            }
            if (newState !== undefined) {
                localVarQueryParameter['NewState'] = newState;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Yeni indirim kodu oluşturmayı sağlar
         * @param {string} [discountCode]
         * @param {number} [discountPercentage]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiscount: (discountCode, discountPercentage, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/PromotionAdministration/CreateDiscount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (discountCode !== undefined) {
                localVarQueryParameter['DiscountCode'] = discountCode;
            }
            if (discountPercentage !== undefined) {
                localVarQueryParameter['DiscountPercentage'] = discountPercentage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary İndirim kodunu silmeye yarar
         * @param {number} [discountId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDiscount: (discountId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/PromotionAdministration/DeleteDiscount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (discountId !== undefined) {
                localVarQueryParameter['DiscountId'] = discountId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary İndirim kodlarının listesini getirir
         * @param {number} [page]
         * @param {number} [itemPerPage]
         * @param {string} [searchKeyword] Discount listesinde arama yapılacak kelimeyi barındırır
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDiscounts: (page, itemPerPage, searchKeyword, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/PromotionAdministration/ListDiscounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }
            if (itemPerPage !== undefined) {
                localVarQueryParameter['ItemPerPage'] = itemPerPage;
            }
            if (searchKeyword !== undefined) {
                localVarQueryParameter['SearchKeyword'] = searchKeyword;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PromotionAdministrationApi - functional programming interface
 * @export
 */
export const PromotionAdministrationApiFp = function (configuration) {
    const localVarAxiosParamCreator = PromotionAdministrationApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary İndirimin aktiflik durumunu değiştirmeyi sağlar
         * @param {number} [discountId]
         * @param {boolean} [newState]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeDiscountActiveState(discountId, newState, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeDiscountActiveState(discountId, newState, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Yeni indirim kodu oluşturmayı sağlar
         * @param {string} [discountCode]
         * @param {number} [discountPercentage]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiscount(discountCode, discountPercentage, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createDiscount(discountCode, discountPercentage, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary İndirim kodunu silmeye yarar
         * @param {number} [discountId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDiscount(discountId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteDiscount(discountId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary İndirim kodlarının listesini getirir
         * @param {number} [page]
         * @param {number} [itemPerPage]
         * @param {string} [searchKeyword] Discount listesinde arama yapılacak kelimeyi barındırır
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDiscounts(page, itemPerPage, searchKeyword, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listDiscounts(page, itemPerPage, searchKeyword, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * PromotionAdministrationApi - factory interface
 * @export
 */
export const PromotionAdministrationApiFactory = function (configuration, basePath, axios) {
    const localVarFp = PromotionAdministrationApiFp(configuration);
    return {
        /**
         *
         * @summary İndirimin aktiflik durumunu değiştirmeyi sağlar
         * @param {number} [discountId]
         * @param {boolean} [newState]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeDiscountActiveState(discountId, newState, options) {
            return localVarFp.changeDiscountActiveState(discountId, newState, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Yeni indirim kodu oluşturmayı sağlar
         * @param {string} [discountCode]
         * @param {number} [discountPercentage]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDiscount(discountCode, discountPercentage, options) {
            return localVarFp.createDiscount(discountCode, discountPercentage, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary İndirim kodunu silmeye yarar
         * @param {number} [discountId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDiscount(discountId, options) {
            return localVarFp.deleteDiscount(discountId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary İndirim kodlarının listesini getirir
         * @param {number} [page]
         * @param {number} [itemPerPage]
         * @param {string} [searchKeyword] Discount listesinde arama yapılacak kelimeyi barındırır
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDiscounts(page, itemPerPage, searchKeyword, options) {
            return localVarFp.listDiscounts(page, itemPerPage, searchKeyword, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PromotionAdministrationApi - object-oriented interface
 * @export
 * @class PromotionAdministrationApi
 * @extends {BaseAPI}
 */
export class PromotionAdministrationApi extends BaseAPI {
    /**
     *
     * @summary İndirimin aktiflik durumunu değiştirmeyi sağlar
     * @param {number} [discountId]
     * @param {boolean} [newState]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionAdministrationApi
     */
    changeDiscountActiveState(discountId, newState, options) {
        return PromotionAdministrationApiFp(this.configuration).changeDiscountActiveState(discountId, newState, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Yeni indirim kodu oluşturmayı sağlar
     * @param {string} [discountCode]
     * @param {number} [discountPercentage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionAdministrationApi
     */
    createDiscount(discountCode, discountPercentage, options) {
        return PromotionAdministrationApiFp(this.configuration).createDiscount(discountCode, discountPercentage, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary İndirim kodunu silmeye yarar
     * @param {number} [discountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionAdministrationApi
     */
    deleteDiscount(discountId, options) {
        return PromotionAdministrationApiFp(this.configuration).deleteDiscount(discountId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary İndirim kodlarının listesini getirir
     * @param {number} [page]
     * @param {number} [itemPerPage]
     * @param {string} [searchKeyword] Discount listesinde arama yapılacak kelimeyi barındırır
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PromotionAdministrationApi
     */
    listDiscounts(page, itemPerPage, searchKeyword, options) {
        return PromotionAdministrationApiFp(this.configuration).listDiscounts(page, itemPerPage, searchKeyword, options).then((request) => request(this.axios, this.basePath));
    }
}

/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * WordTutorialAdministrationApi - axios parameter creator
 * @export
 */
export const WordTutorialAdministrationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Kelime eğitimine yeni bir çeviri ekler.
         * @param {number} [wordTutorialId]
         * @param {string} [languageCode]
         * @param {boolean} [isRtlLanguage]
         * @param {string} [content]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTranslationToTheWordTutorial: (wordTutorialId, languageCode, isRtlLanguage, content, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/WordTutorialAdministration/AddTranslation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (wordTutorialId !== undefined) {
                localVarQueryParameter['WordTutorialId'] = wordTutorialId;
            }
            if (languageCode !== undefined) {
                localVarQueryParameter['LanguageCode'] = languageCode;
            }
            if (isRtlLanguage !== undefined) {
                localVarQueryParameter['IsRtlLanguage'] = isRtlLanguage;
            }
            if (content !== undefined) {
                localVarQueryParameter['Content'] = content;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Kelime eğitimlerinin silinmesini sağlar
         * @param {Array<WordTutorialAdministrationCommandsDeleteWordTutorialList>} [wordTutorialAdministrationCommandsDeleteWordTutorialList]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteWordTutorials: (wordTutorialAdministrationCommandsDeleteWordTutorialList, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/WordTutorialAdministration/BulkDelete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(wordTutorialAdministrationCommandsDeleteWordTutorialList, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir çevirinin içeriğinin değiştirilmesini sağlar.
         * @param {number} [wordTutorialId]
         * @param {string} [translationLanguageCode]
         * @param {string} [newContent]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTranslationContentOfTheWordTutorial: (wordTutorialId, translationLanguageCode, newContent, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/WordTutorialAdministration/ChangeTranslationContent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (wordTutorialId !== undefined) {
                localVarQueryParameter['WordTutorialId'] = wordTutorialId;
            }
            if (translationLanguageCode !== undefined) {
                localVarQueryParameter['TranslationLanguageCode'] = translationLanguageCode;
            }
            if (newContent !== undefined) {
                localVarQueryParameter['NewContent'] = newContent;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir çevirinin yazım yönünü değiştirir.
         * @param {number} [wordTutorialTranslationId]
         * @param {boolean} [isNewStateRightToLeft]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTranslationTextDirectionOfTheWordTutorial: (wordTutorialTranslationId, isNewStateRightToLeft, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/WordTutorialAdministration/ChangeTranslationTextDirection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (wordTutorialTranslationId !== undefined) {
                localVarQueryParameter['WordTutorialTranslationId'] = wordTutorialTranslationId;
            }
            if (isNewStateRightToLeft !== undefined) {
                localVarQueryParameter['IsNewStateRightToLeft'] = isNewStateRightToLeft;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Kelime eğitiminin youtube linkini değiştirmeyi sağlar
         * @param {number} [wordTutorialId]
         * @param {string} [newYoutubeUrl]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeYoutubeUrlOfTheWordTutorial: (wordTutorialId, newYoutubeUrl, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/WordTutorialAdministration/ChangeYoutubeUrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (wordTutorialId !== undefined) {
                localVarQueryParameter['WordTutorialId'] = wordTutorialId;
            }
            if (newYoutubeUrl !== undefined) {
                localVarQueryParameter['NewYoutubeUrl'] = newYoutubeUrl;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Kelime eğitimi eklemeyi sağlar
         * @param {Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>} [wordTutorialAdministrationCommandsPostWordTutorialTranslation]
         * @param {number} [wordTutorialCategoryId]
         * @param {string} [slug]
         * @param {string} [youtubeUrl]
         * @param {string} [accent]
         * @param {string} [languageLevel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWordTutorial: (wordTutorialAdministrationCommandsPostWordTutorialTranslation, wordTutorialCategoryId, slug, youtubeUrl, accent, languageLevel, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/WordTutorialAdministration/Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (wordTutorialCategoryId !== undefined) {
                localVarQueryParameter['WordTutorialCategoryId'] = wordTutorialCategoryId;
            }
            if (slug !== undefined) {
                localVarQueryParameter['Slug'] = slug;
            }
            if (youtubeUrl !== undefined) {
                localVarQueryParameter['YoutubeUrl'] = youtubeUrl;
            }
            if (accent !== undefined) {
                localVarQueryParameter['Accent'] = accent;
            }
            if (languageLevel !== undefined) {
                localVarQueryParameter['LanguageLevel'] = languageLevel;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(wordTutorialAdministrationCommandsPostWordTutorialTranslation, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Kelime eğitiminin silinmesini sağlar
         * @param {number} [wordTutorialId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWordTutorial: (wordTutorialId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/WordTutorialAdministration/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (wordTutorialId !== undefined) {
                localVarQueryParameter['WordTutorialId'] = wordTutorialId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Kelime eğitimlerini listelemeyi sağlar
         * @param {number} wordTutorialCategoryId Kelime eğitimi kategorisinin Id sini barındırır
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWordTutorialsForAdministration: (wordTutorialCategoryId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'wordTutorialCategoryId' is not null or undefined
            assertParamExists('listWordTutorialsForAdministration', 'wordTutorialCategoryId', wordTutorialCategoryId);
            const localVarPath = `/api/WordTutorialAdministration/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (wordTutorialCategoryId !== undefined) {
                localVarQueryParameter['WordTutorialCategoryId'] = wordTutorialCategoryId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Kelime eğitiminden bir çevirinin silinmesini sağlar.
         * @param {number} [wordTutorialTranslationId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTranslationFromTheWordTutorial: (wordTutorialTranslationId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/WordTutorialAdministration/RemoveTranslation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (wordTutorialTranslationId !== undefined) {
                localVarQueryParameter['WordTutorialTranslationId'] = wordTutorialTranslationId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Kelime eğitimi eklemeyi sağlar
         * @param {Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>} [wordTutorialAdministrationCommandsPostWordTutorialTranslation]
         * @param {number} [wordTutorialId]
         * @param {number} [wordTutorialCategoryId]
         * @param {string} [slug]
         * @param {string} [youtubeUrl]
         * @param {string} [accent]
         * @param {string} [languageLevel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWordTutorial: (wordTutorialAdministrationCommandsPostWordTutorialTranslation, wordTutorialId, wordTutorialCategoryId, slug, youtubeUrl, accent, languageLevel, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/WordTutorialAdministration/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (wordTutorialId !== undefined) {
                localVarQueryParameter['WordTutorialId'] = wordTutorialId;
            }
            if (wordTutorialCategoryId !== undefined) {
                localVarQueryParameter['WordTutorialCategoryId'] = wordTutorialCategoryId;
            }
            if (slug !== undefined) {
                localVarQueryParameter['Slug'] = slug;
            }
            if (youtubeUrl !== undefined) {
                localVarQueryParameter['YoutubeUrl'] = youtubeUrl;
            }
            if (accent !== undefined) {
                localVarQueryParameter['Accent'] = accent;
            }
            if (languageLevel !== undefined) {
                localVarQueryParameter['LanguageLevel'] = languageLevel;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(wordTutorialAdministrationCommandsPostWordTutorialTranslation, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * WordTutorialAdministrationApi - functional programming interface
 * @export
 */
export const WordTutorialAdministrationApiFp = function (configuration) {
    const localVarAxiosParamCreator = WordTutorialAdministrationApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Kelime eğitimine yeni bir çeviri ekler.
         * @param {number} [wordTutorialId]
         * @param {string} [languageCode]
         * @param {boolean} [isRtlLanguage]
         * @param {string} [content]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTranslationToTheWordTutorial(wordTutorialId, languageCode, isRtlLanguage, content, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.addTranslationToTheWordTutorial(wordTutorialId, languageCode, isRtlLanguage, content, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Kelime eğitimlerinin silinmesini sağlar
         * @param {Array<WordTutorialAdministrationCommandsDeleteWordTutorialList>} [wordTutorialAdministrationCommandsDeleteWordTutorialList]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteWordTutorials(wordTutorialAdministrationCommandsDeleteWordTutorialList, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.bulkDeleteWordTutorials(wordTutorialAdministrationCommandsDeleteWordTutorialList, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir çevirinin içeriğinin değiştirilmesini sağlar.
         * @param {number} [wordTutorialId]
         * @param {string} [translationLanguageCode]
         * @param {string} [newContent]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTranslationContentOfTheWordTutorial(wordTutorialId, translationLanguageCode, newContent, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeTranslationContentOfTheWordTutorial(wordTutorialId, translationLanguageCode, newContent, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir çevirinin yazım yönünü değiştirir.
         * @param {number} [wordTutorialTranslationId]
         * @param {boolean} [isNewStateRightToLeft]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTranslationTextDirectionOfTheWordTutorial(wordTutorialTranslationId, isNewStateRightToLeft, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeTranslationTextDirectionOfTheWordTutorial(wordTutorialTranslationId, isNewStateRightToLeft, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Kelime eğitiminin youtube linkini değiştirmeyi sağlar
         * @param {number} [wordTutorialId]
         * @param {string} [newYoutubeUrl]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeYoutubeUrlOfTheWordTutorial(wordTutorialId, newYoutubeUrl, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeYoutubeUrlOfTheWordTutorial(wordTutorialId, newYoutubeUrl, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Kelime eğitimi eklemeyi sağlar
         * @param {Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>} [wordTutorialAdministrationCommandsPostWordTutorialTranslation]
         * @param {number} [wordTutorialCategoryId]
         * @param {string} [slug]
         * @param {string} [youtubeUrl]
         * @param {string} [accent]
         * @param {string} [languageLevel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation, wordTutorialCategoryId, slug, youtubeUrl, accent, languageLevel, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation, wordTutorialCategoryId, slug, youtubeUrl, accent, languageLevel, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Kelime eğitiminin silinmesini sağlar
         * @param {number} [wordTutorialId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWordTutorial(wordTutorialId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteWordTutorial(wordTutorialId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Kelime eğitimlerini listelemeyi sağlar
         * @param {number} wordTutorialCategoryId Kelime eğitimi kategorisinin Id sini barındırır
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWordTutorialsForAdministration(wordTutorialCategoryId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listWordTutorialsForAdministration(wordTutorialCategoryId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Kelime eğitiminden bir çevirinin silinmesini sağlar.
         * @param {number} [wordTutorialTranslationId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTranslationFromTheWordTutorial(wordTutorialTranslationId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.removeTranslationFromTheWordTutorial(wordTutorialTranslationId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Kelime eğitimi eklemeyi sağlar
         * @param {Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>} [wordTutorialAdministrationCommandsPostWordTutorialTranslation]
         * @param {number} [wordTutorialId]
         * @param {number} [wordTutorialCategoryId]
         * @param {string} [slug]
         * @param {string} [youtubeUrl]
         * @param {string} [accent]
         * @param {string} [languageLevel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation, wordTutorialId, wordTutorialCategoryId, slug, youtubeUrl, accent, languageLevel, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation, wordTutorialId, wordTutorialCategoryId, slug, youtubeUrl, accent, languageLevel, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * WordTutorialAdministrationApi - factory interface
 * @export
 */
export const WordTutorialAdministrationApiFactory = function (configuration, basePath, axios) {
    const localVarFp = WordTutorialAdministrationApiFp(configuration);
    return {
        /**
         *
         * @summary Kelime eğitimine yeni bir çeviri ekler.
         * @param {number} [wordTutorialId]
         * @param {string} [languageCode]
         * @param {boolean} [isRtlLanguage]
         * @param {string} [content]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTranslationToTheWordTutorial(wordTutorialId, languageCode, isRtlLanguage, content, options) {
            return localVarFp.addTranslationToTheWordTutorial(wordTutorialId, languageCode, isRtlLanguage, content, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Kelime eğitimlerinin silinmesini sağlar
         * @param {Array<WordTutorialAdministrationCommandsDeleteWordTutorialList>} [wordTutorialAdministrationCommandsDeleteWordTutorialList]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteWordTutorials(wordTutorialAdministrationCommandsDeleteWordTutorialList, options) {
            return localVarFp.bulkDeleteWordTutorials(wordTutorialAdministrationCommandsDeleteWordTutorialList, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir çevirinin içeriğinin değiştirilmesini sağlar.
         * @param {number} [wordTutorialId]
         * @param {string} [translationLanguageCode]
         * @param {string} [newContent]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTranslationContentOfTheWordTutorial(wordTutorialId, translationLanguageCode, newContent, options) {
            return localVarFp.changeTranslationContentOfTheWordTutorial(wordTutorialId, translationLanguageCode, newContent, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir çevirinin yazım yönünü değiştirir.
         * @param {number} [wordTutorialTranslationId]
         * @param {boolean} [isNewStateRightToLeft]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTranslationTextDirectionOfTheWordTutorial(wordTutorialTranslationId, isNewStateRightToLeft, options) {
            return localVarFp.changeTranslationTextDirectionOfTheWordTutorial(wordTutorialTranslationId, isNewStateRightToLeft, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Kelime eğitiminin youtube linkini değiştirmeyi sağlar
         * @param {number} [wordTutorialId]
         * @param {string} [newYoutubeUrl]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeYoutubeUrlOfTheWordTutorial(wordTutorialId, newYoutubeUrl, options) {
            return localVarFp.changeYoutubeUrlOfTheWordTutorial(wordTutorialId, newYoutubeUrl, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Kelime eğitimi eklemeyi sağlar
         * @param {Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>} [wordTutorialAdministrationCommandsPostWordTutorialTranslation]
         * @param {number} [wordTutorialCategoryId]
         * @param {string} [slug]
         * @param {string} [youtubeUrl]
         * @param {string} [accent]
         * @param {string} [languageLevel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation, wordTutorialCategoryId, slug, youtubeUrl, accent, languageLevel, options) {
            return localVarFp.createWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation, wordTutorialCategoryId, slug, youtubeUrl, accent, languageLevel, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Kelime eğitiminin silinmesini sağlar
         * @param {number} [wordTutorialId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWordTutorial(wordTutorialId, options) {
            return localVarFp.deleteWordTutorial(wordTutorialId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Kelime eğitimlerini listelemeyi sağlar
         * @param {number} wordTutorialCategoryId Kelime eğitimi kategorisinin Id sini barındırır
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWordTutorialsForAdministration(wordTutorialCategoryId, options) {
            return localVarFp.listWordTutorialsForAdministration(wordTutorialCategoryId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Kelime eğitiminden bir çevirinin silinmesini sağlar.
         * @param {number} [wordTutorialTranslationId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTranslationFromTheWordTutorial(wordTutorialTranslationId, options) {
            return localVarFp.removeTranslationFromTheWordTutorial(wordTutorialTranslationId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Kelime eğitimi eklemeyi sağlar
         * @param {Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>} [wordTutorialAdministrationCommandsPostWordTutorialTranslation]
         * @param {number} [wordTutorialId]
         * @param {number} [wordTutorialCategoryId]
         * @param {string} [slug]
         * @param {string} [youtubeUrl]
         * @param {string} [accent]
         * @param {string} [languageLevel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation, wordTutorialId, wordTutorialCategoryId, slug, youtubeUrl, accent, languageLevel, options) {
            return localVarFp.updateWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation, wordTutorialId, wordTutorialCategoryId, slug, youtubeUrl, accent, languageLevel, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * WordTutorialAdministrationApi - object-oriented interface
 * @export
 * @class WordTutorialAdministrationApi
 * @extends {BaseAPI}
 */
export class WordTutorialAdministrationApi extends BaseAPI {
    /**
     *
     * @summary Kelime eğitimine yeni bir çeviri ekler.
     * @param {number} [wordTutorialId]
     * @param {string} [languageCode]
     * @param {boolean} [isRtlLanguage]
     * @param {string} [content]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApi
     */
    addTranslationToTheWordTutorial(wordTutorialId, languageCode, isRtlLanguage, content, options) {
        return WordTutorialAdministrationApiFp(this.configuration).addTranslationToTheWordTutorial(wordTutorialId, languageCode, isRtlLanguage, content, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Kelime eğitimlerinin silinmesini sağlar
     * @param {Array<WordTutorialAdministrationCommandsDeleteWordTutorialList>} [wordTutorialAdministrationCommandsDeleteWordTutorialList]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApi
     */
    bulkDeleteWordTutorials(wordTutorialAdministrationCommandsDeleteWordTutorialList, options) {
        return WordTutorialAdministrationApiFp(this.configuration).bulkDeleteWordTutorials(wordTutorialAdministrationCommandsDeleteWordTutorialList, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir çevirinin içeriğinin değiştirilmesini sağlar.
     * @param {number} [wordTutorialId]
     * @param {string} [translationLanguageCode]
     * @param {string} [newContent]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApi
     */
    changeTranslationContentOfTheWordTutorial(wordTutorialId, translationLanguageCode, newContent, options) {
        return WordTutorialAdministrationApiFp(this.configuration).changeTranslationContentOfTheWordTutorial(wordTutorialId, translationLanguageCode, newContent, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir çevirinin yazım yönünü değiştirir.
     * @param {number} [wordTutorialTranslationId]
     * @param {boolean} [isNewStateRightToLeft]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApi
     */
    changeTranslationTextDirectionOfTheWordTutorial(wordTutorialTranslationId, isNewStateRightToLeft, options) {
        return WordTutorialAdministrationApiFp(this.configuration).changeTranslationTextDirectionOfTheWordTutorial(wordTutorialTranslationId, isNewStateRightToLeft, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Kelime eğitiminin youtube linkini değiştirmeyi sağlar
     * @param {number} [wordTutorialId]
     * @param {string} [newYoutubeUrl]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApi
     */
    changeYoutubeUrlOfTheWordTutorial(wordTutorialId, newYoutubeUrl, options) {
        return WordTutorialAdministrationApiFp(this.configuration).changeYoutubeUrlOfTheWordTutorial(wordTutorialId, newYoutubeUrl, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Kelime eğitimi eklemeyi sağlar
     * @param {Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>} [wordTutorialAdministrationCommandsPostWordTutorialTranslation]
     * @param {number} [wordTutorialCategoryId]
     * @param {string} [slug]
     * @param {string} [youtubeUrl]
     * @param {string} [accent]
     * @param {string} [languageLevel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApi
     */
    createWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation, wordTutorialCategoryId, slug, youtubeUrl, accent, languageLevel, options) {
        return WordTutorialAdministrationApiFp(this.configuration).createWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation, wordTutorialCategoryId, slug, youtubeUrl, accent, languageLevel, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Kelime eğitiminin silinmesini sağlar
     * @param {number} [wordTutorialId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApi
     */
    deleteWordTutorial(wordTutorialId, options) {
        return WordTutorialAdministrationApiFp(this.configuration).deleteWordTutorial(wordTutorialId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Kelime eğitimlerini listelemeyi sağlar
     * @param {number} wordTutorialCategoryId Kelime eğitimi kategorisinin Id sini barındırır
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApi
     */
    listWordTutorialsForAdministration(wordTutorialCategoryId, options) {
        return WordTutorialAdministrationApiFp(this.configuration).listWordTutorialsForAdministration(wordTutorialCategoryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Kelime eğitiminden bir çevirinin silinmesini sağlar.
     * @param {number} [wordTutorialTranslationId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApi
     */
    removeTranslationFromTheWordTutorial(wordTutorialTranslationId, options) {
        return WordTutorialAdministrationApiFp(this.configuration).removeTranslationFromTheWordTutorial(wordTutorialTranslationId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Kelime eğitimi eklemeyi sağlar
     * @param {Array<WordTutorialAdministrationCommandsPostWordTutorialTranslation>} [wordTutorialAdministrationCommandsPostWordTutorialTranslation]
     * @param {number} [wordTutorialId]
     * @param {number} [wordTutorialCategoryId]
     * @param {string} [slug]
     * @param {string} [youtubeUrl]
     * @param {string} [accent]
     * @param {string} [languageLevel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WordTutorialAdministrationApi
     */
    updateWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation, wordTutorialId, wordTutorialCategoryId, slug, youtubeUrl, accent, languageLevel, options) {
        return WordTutorialAdministrationApiFp(this.configuration).updateWordTutorial(wordTutorialAdministrationCommandsPostWordTutorialTranslation, wordTutorialId, wordTutorialCategoryId, slug, youtubeUrl, accent, languageLevel, options).then((request) => request(this.axios, this.basePath));
    }
}

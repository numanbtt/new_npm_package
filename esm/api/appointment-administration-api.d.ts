/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AppointmentAdministrationQueriesAppointmentsForPayResult } from '../models';
import { AppointmentAdministrationQueriesListAppointmentsOfTheStudentQueryResult } from '../models';
import { AppointmentAdministrationQueriesListAppointmentsOfTheTeacherQueryResult } from '../models';
/**
 * AppointmentAdministrationApi - axios parameter creator
 * @export
 */
export declare const AppointmentAdministrationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Bir randevuyu iptal eder.
     * @param {number} [appointmentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelAppointmentAsAdmin: (appointmentId?: number, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğrencinin tüm(geçmiş, gelecek) randevularını listeler.
     * @param {number} studentId
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAppointmentsOfTheStudent: (studentId: number, page?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğretmenin tüm(geçmiş, gelecek) randevularını listeler.
     * @param {number} teacherId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAppointmentsOfTheTeacher: (teacherId: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [teacherId]
     * @param {string} [startdate]
     * @param {string} [endDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAppointmentsTeacherForPay: (teacherId?: number, startdate?: string, endDate?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [teacherSalaryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPaidAppointmentDetail: (teacherSalaryId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AppointmentAdministrationApi - functional programming interface
 * @export
 */
export declare const AppointmentAdministrationApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Bir randevuyu iptal eder.
     * @param {number} [appointmentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelAppointmentAsAdmin(appointmentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Bir öğrencinin tüm(geçmiş, gelecek) randevularını listeler.
     * @param {number} studentId
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAppointmentsOfTheStudent(studentId: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppointmentAdministrationQueriesListAppointmentsOfTheStudentQueryResult>>;
    /**
     *
     * @summary Bir öğretmenin tüm(geçmiş, gelecek) randevularını listeler.
     * @param {number} teacherId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAppointmentsOfTheTeacher(teacherId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppointmentAdministrationQueriesListAppointmentsOfTheTeacherQueryResult>>;
    /**
     *
     * @param {number} [teacherId]
     * @param {string} [startdate]
     * @param {string} [endDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAppointmentsTeacherForPay(teacherId?: number, startdate?: string, endDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppointmentAdministrationQueriesAppointmentsForPayResult>>>;
    /**
     *
     * @param {number} [teacherSalaryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPaidAppointmentDetail(teacherSalaryId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppointmentAdministrationQueriesAppointmentsForPayResult>>>;
};
/**
 * AppointmentAdministrationApi - factory interface
 * @export
 */
export declare const AppointmentAdministrationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Bir randevuyu iptal eder.
     * @param {number} [appointmentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelAppointmentAsAdmin(appointmentId?: number, reason?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğrencinin tüm(geçmiş, gelecek) randevularını listeler.
     * @param {number} studentId
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAppointmentsOfTheStudent(studentId: number, page?: number, options?: any): AxiosPromise<AppointmentAdministrationQueriesListAppointmentsOfTheStudentQueryResult>;
    /**
     *
     * @summary Bir öğretmenin tüm(geçmiş, gelecek) randevularını listeler.
     * @param {number} teacherId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAppointmentsOfTheTeacher(teacherId: number, options?: any): AxiosPromise<AppointmentAdministrationQueriesListAppointmentsOfTheTeacherQueryResult>;
    /**
     *
     * @param {number} [teacherId]
     * @param {string} [startdate]
     * @param {string} [endDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAppointmentsTeacherForPay(teacherId?: number, startdate?: string, endDate?: string, options?: any): AxiosPromise<Array<AppointmentAdministrationQueriesAppointmentsForPayResult>>;
    /**
     *
     * @param {number} [teacherSalaryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPaidAppointmentDetail(teacherSalaryId?: number, options?: any): AxiosPromise<Array<AppointmentAdministrationQueriesAppointmentsForPayResult>>;
};
/**
 * AppointmentAdministrationApi - interface
 * @export
 * @interface AppointmentAdministrationApi
 */
export interface AppointmentAdministrationApiInterface {
    /**
     *
     * @summary Bir randevuyu iptal eder.
     * @param {number} [appointmentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApiInterface
     */
    cancelAppointmentAsAdmin(appointmentId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğrencinin tüm(geçmiş, gelecek) randevularını listeler.
     * @param {number} studentId
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApiInterface
     */
    listAppointmentsOfTheStudent(studentId: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<AppointmentAdministrationQueriesListAppointmentsOfTheStudentQueryResult>;
    /**
     *
     * @summary Bir öğretmenin tüm(geçmiş, gelecek) randevularını listeler.
     * @param {number} teacherId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApiInterface
     */
    listAppointmentsOfTheTeacher(teacherId: number, options?: AxiosRequestConfig): AxiosPromise<AppointmentAdministrationQueriesListAppointmentsOfTheTeacherQueryResult>;
    /**
     *
     * @param {number} [teacherId]
     * @param {string} [startdate]
     * @param {string} [endDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApiInterface
     */
    listAppointmentsTeacherForPay(teacherId?: number, startdate?: string, endDate?: string, options?: AxiosRequestConfig): AxiosPromise<Array<AppointmentAdministrationQueriesAppointmentsForPayResult>>;
    /**
     *
     * @param {number} [teacherSalaryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApiInterface
     */
    listPaidAppointmentDetail(teacherSalaryId?: number, options?: AxiosRequestConfig): AxiosPromise<Array<AppointmentAdministrationQueriesAppointmentsForPayResult>>;
}
/**
 * AppointmentAdministrationApi - object-oriented interface
 * @export
 * @class AppointmentAdministrationApi
 * @extends {BaseAPI}
 */
export declare class AppointmentAdministrationApi extends BaseAPI implements AppointmentAdministrationApiInterface {
    /**
     *
     * @summary Bir randevuyu iptal eder.
     * @param {number} [appointmentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApi
     */
    cancelAppointmentAsAdmin(appointmentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Bir öğrencinin tüm(geçmiş, gelecek) randevularını listeler.
     * @param {number} studentId
     * @param {number} [page]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApi
     */
    listAppointmentsOfTheStudent(studentId: number, page?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AppointmentAdministrationQueriesListAppointmentsOfTheStudentQueryResult, any>>;
    /**
     *
     * @summary Bir öğretmenin tüm(geçmiş, gelecek) randevularını listeler.
     * @param {number} teacherId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApi
     */
    listAppointmentsOfTheTeacher(teacherId: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AppointmentAdministrationQueriesListAppointmentsOfTheTeacherQueryResult, any>>;
    /**
     *
     * @param {number} [teacherId]
     * @param {string} [startdate]
     * @param {string} [endDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApi
     */
    listAppointmentsTeacherForPay(teacherId?: number, startdate?: string, endDate?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AppointmentAdministrationQueriesAppointmentsForPayResult[], any>>;
    /**
     *
     * @param {number} [teacherSalaryId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentAdministrationApi
     */
    listPaidAppointmentDetail(teacherSalaryId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AppointmentAdministrationQueriesAppointmentsForPayResult[], any>>;
}

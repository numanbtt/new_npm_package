/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { CustomerServiceAdministrationQueriesGetComplaintQueryResult } from '../models';
import { CustomerServiceAdministrationQueriesListComplaintsQueryResult } from '../models';
/**
 * CustomerServiceAdministrationApi - axios parameter creator
 * @export
 */
export declare const CustomerServiceAdministrationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Şikayetin durumunu tamamlandı olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeComplaintStateToCompleted: (complaintId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Şikayetin durumunu henüz işlem yapılmadı olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeComplaintStateToNotSeenYet: (complaintId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Şikayetin durumunu reddedildi olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeComplaintStateToRejected: (complaintId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Şikayetin durumunu görüldü olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeComplaintStateToSeen: (complaintId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Şikayetin detayını getirmeyi sağlar
     * @param {number} complaintId Şikayet Id sini barındırır
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComplaint: (complaintId: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Şikayetlerin listesini getirmeyi sağlar
     * @param {number} [page]
     * @param {number} [itemPerPage]
     * @param {string} [filtersSearchKeyword] Şikayetler listesinin arama kelimesini barındırır
     * @param {string} [filtersListComplaintsRoles] Listelenilecek şikayetlerin rollerini belirtir
     * @param {string} [filtersListComplaintsStates] Listelenicek şikayetlerin durumunu belirtir
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listComplaints: (page?: number, itemPerPage?: number, filtersSearchKeyword?: string, filtersListComplaintsRoles?: string, filtersListComplaintsStates?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CustomerServiceAdministrationApi - functional programming interface
 * @export
 */
export declare const CustomerServiceAdministrationApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Şikayetin durumunu tamamlandı olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeComplaintStateToCompleted(complaintId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Şikayetin durumunu henüz işlem yapılmadı olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeComplaintStateToNotSeenYet(complaintId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Şikayetin durumunu reddedildi olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeComplaintStateToRejected(complaintId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Şikayetin durumunu görüldü olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeComplaintStateToSeen(complaintId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Şikayetin detayını getirmeyi sağlar
     * @param {number} complaintId Şikayet Id sini barındırır
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComplaint(complaintId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerServiceAdministrationQueriesGetComplaintQueryResult>>;
    /**
     *
     * @summary Şikayetlerin listesini getirmeyi sağlar
     * @param {number} [page]
     * @param {number} [itemPerPage]
     * @param {string} [filtersSearchKeyword] Şikayetler listesinin arama kelimesini barındırır
     * @param {string} [filtersListComplaintsRoles] Listelenilecek şikayetlerin rollerini belirtir
     * @param {string} [filtersListComplaintsStates] Listelenicek şikayetlerin durumunu belirtir
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listComplaints(page?: number, itemPerPage?: number, filtersSearchKeyword?: string, filtersListComplaintsRoles?: string, filtersListComplaintsStates?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerServiceAdministrationQueriesListComplaintsQueryResult>>;
};
/**
 * CustomerServiceAdministrationApi - factory interface
 * @export
 */
export declare const CustomerServiceAdministrationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Şikayetin durumunu tamamlandı olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeComplaintStateToCompleted(complaintId?: number, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Şikayetin durumunu henüz işlem yapılmadı olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeComplaintStateToNotSeenYet(complaintId?: number, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Şikayetin durumunu reddedildi olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeComplaintStateToRejected(complaintId?: number, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Şikayetin durumunu görüldü olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeComplaintStateToSeen(complaintId?: number, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Şikayetin detayını getirmeyi sağlar
     * @param {number} complaintId Şikayet Id sini barındırır
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComplaint(complaintId: number, options?: any): AxiosPromise<CustomerServiceAdministrationQueriesGetComplaintQueryResult>;
    /**
     *
     * @summary Şikayetlerin listesini getirmeyi sağlar
     * @param {number} [page]
     * @param {number} [itemPerPage]
     * @param {string} [filtersSearchKeyword] Şikayetler listesinin arama kelimesini barındırır
     * @param {string} [filtersListComplaintsRoles] Listelenilecek şikayetlerin rollerini belirtir
     * @param {string} [filtersListComplaintsStates] Listelenicek şikayetlerin durumunu belirtir
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listComplaints(page?: number, itemPerPage?: number, filtersSearchKeyword?: string, filtersListComplaintsRoles?: string, filtersListComplaintsStates?: string, options?: any): AxiosPromise<CustomerServiceAdministrationQueriesListComplaintsQueryResult>;
};
/**
 * CustomerServiceAdministrationApi - interface
 * @export
 * @interface CustomerServiceAdministrationApi
 */
export interface CustomerServiceAdministrationApiInterface {
    /**
     *
     * @summary Şikayetin durumunu tamamlandı olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApiInterface
     */
    changeComplaintStateToCompleted(complaintId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Şikayetin durumunu henüz işlem yapılmadı olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApiInterface
     */
    changeComplaintStateToNotSeenYet(complaintId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Şikayetin durumunu reddedildi olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApiInterface
     */
    changeComplaintStateToRejected(complaintId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Şikayetin durumunu görüldü olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApiInterface
     */
    changeComplaintStateToSeen(complaintId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Şikayetin detayını getirmeyi sağlar
     * @param {number} complaintId Şikayet Id sini barındırır
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApiInterface
     */
    getComplaint(complaintId: number, options?: AxiosRequestConfig): AxiosPromise<CustomerServiceAdministrationQueriesGetComplaintQueryResult>;
    /**
     *
     * @summary Şikayetlerin listesini getirmeyi sağlar
     * @param {number} [page]
     * @param {number} [itemPerPage]
     * @param {string} [filtersSearchKeyword] Şikayetler listesinin arama kelimesini barındırır
     * @param {string} [filtersListComplaintsRoles] Listelenilecek şikayetlerin rollerini belirtir
     * @param {string} [filtersListComplaintsStates] Listelenicek şikayetlerin durumunu belirtir
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApiInterface
     */
    listComplaints(page?: number, itemPerPage?: number, filtersSearchKeyword?: string, filtersListComplaintsRoles?: string, filtersListComplaintsStates?: string, options?: AxiosRequestConfig): AxiosPromise<CustomerServiceAdministrationQueriesListComplaintsQueryResult>;
}
/**
 * CustomerServiceAdministrationApi - object-oriented interface
 * @export
 * @class CustomerServiceAdministrationApi
 * @extends {BaseAPI}
 */
export declare class CustomerServiceAdministrationApi extends BaseAPI implements CustomerServiceAdministrationApiInterface {
    /**
     *
     * @summary Şikayetin durumunu tamamlandı olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApi
     */
    changeComplaintStateToCompleted(complaintId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Şikayetin durumunu henüz işlem yapılmadı olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApi
     */
    changeComplaintStateToNotSeenYet(complaintId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Şikayetin durumunu reddedildi olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApi
     */
    changeComplaintStateToRejected(complaintId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Şikayetin durumunu görüldü olarak değiştirmeyi sağlar
     * @param {number} [complaintId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApi
     */
    changeComplaintStateToSeen(complaintId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Şikayetin detayını getirmeyi sağlar
     * @param {number} complaintId Şikayet Id sini barındırır
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApi
     */
    getComplaint(complaintId: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomerServiceAdministrationQueriesGetComplaintQueryResult, any>>;
    /**
     *
     * @summary Şikayetlerin listesini getirmeyi sağlar
     * @param {number} [page]
     * @param {number} [itemPerPage]
     * @param {string} [filtersSearchKeyword] Şikayetler listesinin arama kelimesini barındırır
     * @param {string} [filtersListComplaintsRoles] Listelenilecek şikayetlerin rollerini belirtir
     * @param {string} [filtersListComplaintsStates] Listelenicek şikayetlerin durumunu belirtir
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerServiceAdministrationApi
     */
    listComplaints(page?: number, itemPerPage?: number, filtersSearchKeyword?: string, filtersListComplaintsRoles?: string, filtersListComplaintsStates?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomerServiceAdministrationQueriesListComplaintsQueryResult, any>>;
}

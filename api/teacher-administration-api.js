/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * TeacherAdministrationApi - axios parameter creator
 * @export
 */
export const TeacherAdministrationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Bir öğretmenin hesabını onaylar. Onaylanan öğretmen artık sisteme giriş yapabilir.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveTeacherAccount: (teacherId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/ApproveAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğretmenin profil fotoğrafını onaylar.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveTeacherProfilePicture: (teacherId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/ApproveProfilePicture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğretmeni siteden yasaklar. Artık o hesap ve öğretmenin kullandığı ip\'ler siteye giriş yapamaz.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        banTeacher: (teacherId, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/Ban`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğretmenin açıklamasını değiştirir.
         * @param {number} [teacherId]
         * @param {string} [newDescription]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherDescription: (teacherId, newDescription, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/ChangeDescription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            if (newDescription !== undefined) {
                localVarQueryParameter['NewDescription'] = newDescription;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğretmenin e-posta adresini değiştirir.
         * @param {number} [teacherId]
         * @param {string} [newEmail]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherEmail: (teacherId, newEmail, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/ChangeEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            if (newEmail !== undefined) {
                localVarQueryParameter['NewEmail'] = newEmail;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğretmenin iban bilgilerini değiştirir.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {string} [bankName]
         * @param {string} [accountHolderName]
         * @param {string} [iban]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherIbanDetails: (teacherId, reason, bankName, accountHolderName, iban, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/ChangeIbanDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            if (bankName !== undefined) {
                localVarQueryParameter['BankName'] = bankName;
            }
            if (accountHolderName !== undefined) {
                localVarQueryParameter['AccountHolderName'] = accountHolderName;
            }
            if (iban !== undefined) {
                localVarQueryParameter['Iban'] = iban;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğretmenin ismini değiştirir.
         * @param {number} [teacherId]
         * @param {string} [newName]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherName: (teacherId, newName, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/ChangeName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            if (newName !== undefined) {
                localVarQueryParameter['NewName'] = newName;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğretmenin şifresini değiştirir.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {string} [newPassword]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherPassword: (teacherId, reason, newPassword, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/ChangePassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            if (newPassword !== undefined) {
                localVarQueryParameter['NewPassword'] = newPassword;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğretmenin telefon numarasını değiştirir.
         * @param {number} [teacherId]
         * @param {string} [newPhoneNumber]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherPhoneNumber: (teacherId, newPhoneNumber, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/ChangePhoneNumber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            if (newPhoneNumber !== undefined) {
                localVarQueryParameter['NewPhoneNumber'] = newPhoneNumber;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğretmenin profil fotoğrafını değiştirir.
         * @param {File} [newProfilePicture]
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherProfilePicture: (newProfilePicture, teacherId, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/ChangeProfilePicture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            if (newProfilePicture !== undefined) {
                localVarFormParams.append('NewProfilePicture', newProfilePicture);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğretmenin uzmanlıklarını değiştirir.
         * @param {TeacherAdministrationCommandsSpecalities} [teacherAdministrationCommandsSpecalities]
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherSpecalities: (teacherAdministrationCommandsSpecalities, teacherId, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/ChangeSpecalities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(teacherAdministrationCommandsSpecalities, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğretmenin görünen puanını değiştirir. 0.5 ve katları olması gerekir. Şayet 0 olarak ayarlanırsa gerçek puanı gösterilir.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {number} [newRate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherVisibleRate: (teacherId, reason, newRate, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/ChangeVisibleRate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            if (newRate !== undefined) {
                localVarQueryParameter['NewRate'] = newRate;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğretmenin youtube video url\'sini değiştirir.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {string} [newYoutubeUrl]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherYoutubeUrl: (teacherId, reason, newYoutubeUrl, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/ChangeYoutubeVideoUrl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            if (newYoutubeUrl !== undefined) {
                localVarQueryParameter['NewYoutubeUrl'] = newYoutubeUrl;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğretmenin hesabını siteden siler.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeacherAccountDueGDPR: (teacherId, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/DeleteAccountDueGDPR`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğretmenin detayını getirir.
         * @param {number} teacherId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacherDetailsForAdministration: (teacherId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'teacherId' is not null or undefined
            assertParamExists('getTeacherDetailsForAdministration', 'teacherId', teacherId);
            const localVarPath = `/api/TeacherAdministration/GetTeacherDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
         * @param {number} [page] Gidilmek istenilen sayfa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeacherSalaries: (searchKeyword, page, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/ListTeacherSalaries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (searchKeyword !== undefined) {
                localVarQueryParameter['SearchKeyword'] = searchKeyword;
            }
            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Sistemdeki öğretmenleri listeler
         * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
         * @param {string} [approvementState] Öğretmenin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_TEACHERS: Sadece onaylı öğretmenleri listeye dahil eder.  ONLY_UNAPPROVED_TEACHERS: Sadece onaysız öğretmenleri listeye dahil eder.
         * @param {number} [page] Gidilmek istenilen sayfa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeachersForManagement: (searchKeyword, approvementState, page, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (searchKeyword !== undefined) {
                localVarQueryParameter['SearchKeyword'] = searchKeyword;
            }
            if (approvementState !== undefined) {
                localVarQueryParameter['ApprovementState'] = approvementState;
            }
            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğretmenin hesabını kabul etmez. Öğretmene sebebiyle birlikte düzenleme bildirimi atılabilir.  Hesap silinebilir.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectTeacherAccount: (teacherId, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/RejectAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğretmenin profil fotoğrafını kabul etmez.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectTeacherProfilePicture: (teacherId, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/RejectProfilePicture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {number} [teacherSalariesId]
         * @param {string} [paymentStatus]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salariesStatusUpdate: (teacherSalariesId, paymentStatus, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/SalariesStatusUpdate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (teacherSalariesId !== undefined) {
                localVarQueryParameter['TeacherSalariesId'] = teacherSalariesId;
            }
            if (paymentStatus !== undefined) {
                localVarQueryParameter['paymentStatus'] = paymentStatus;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {number} [teacherId]
         * @param {number} [hourlyRate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherHourlyRate: (teacherId, hourlyRate, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/TeacherHourlyRate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            if (hourlyRate !== undefined) {
                localVarQueryParameter['HourlyRate'] = hourlyRate;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {number} [teacherId]
         * @param {number} [mints]
         * @param {number} [hours]
         * @param {number} [hourlyRate]
         * @param {number} [amount]
         * @param {string} [paymentStatus]
         * @param {string} [appointmentDetail]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherPay: (teacherId, mints, hours, hourlyRate, amount, paymentStatus, appointmentDetail, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/TeacherPay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            if (mints !== undefined) {
                localVarQueryParameter['Mints'] = mints;
            }
            if (hours !== undefined) {
                localVarQueryParameter['Hours'] = hours;
            }
            if (hourlyRate !== undefined) {
                localVarQueryParameter['HourlyRate'] = hourlyRate;
            }
            if (amount !== undefined) {
                localVarQueryParameter['Amount'] = amount;
            }
            if (paymentStatus !== undefined) {
                localVarQueryParameter['PaymentStatus'] = paymentStatus;
            }
            if (appointmentDetail !== undefined) {
                localVarQueryParameter['AppointmentDetail'] = appointmentDetail;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teachersDropdown: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/TeachersDropdown`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğretmeni siteden yasaklamasını kaldırır.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unBanTeacher: (teacherId, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/UnBan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoomCreateAccount: (teacherId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/TeacherAdministration/ZoomCreateAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * TeacherAdministrationApi - functional programming interface
 * @export
 */
export const TeacherAdministrationApiFp = function (configuration) {
    const localVarAxiosParamCreator = TeacherAdministrationApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Bir öğretmenin hesabını onaylar. Onaylanan öğretmen artık sisteme giriş yapabilir.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveTeacherAccount(teacherId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.approveTeacherAccount(teacherId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğretmenin profil fotoğrafını onaylar.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveTeacherProfilePicture(teacherId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.approveTeacherProfilePicture(teacherId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğretmeni siteden yasaklar. Artık o hesap ve öğretmenin kullandığı ip\'ler siteye giriş yapamaz.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        banTeacher(teacherId, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.banTeacher(teacherId, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğretmenin açıklamasını değiştirir.
         * @param {number} [teacherId]
         * @param {string} [newDescription]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherDescription(teacherId, newDescription, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeTeacherDescription(teacherId, newDescription, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğretmenin e-posta adresini değiştirir.
         * @param {number} [teacherId]
         * @param {string} [newEmail]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherEmail(teacherId, newEmail, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeTeacherEmail(teacherId, newEmail, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğretmenin iban bilgilerini değiştirir.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {string} [bankName]
         * @param {string} [accountHolderName]
         * @param {string} [iban]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherIbanDetails(teacherId, reason, bankName, accountHolderName, iban, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeTeacherIbanDetails(teacherId, reason, bankName, accountHolderName, iban, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğretmenin ismini değiştirir.
         * @param {number} [teacherId]
         * @param {string} [newName]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherName(teacherId, newName, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeTeacherName(teacherId, newName, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğretmenin şifresini değiştirir.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {string} [newPassword]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherPassword(teacherId, reason, newPassword, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeTeacherPassword(teacherId, reason, newPassword, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğretmenin telefon numarasını değiştirir.
         * @param {number} [teacherId]
         * @param {string} [newPhoneNumber]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherPhoneNumber(teacherId, newPhoneNumber, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeTeacherPhoneNumber(teacherId, newPhoneNumber, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğretmenin profil fotoğrafını değiştirir.
         * @param {File} [newProfilePicture]
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherProfilePicture(newProfilePicture, teacherId, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeTeacherProfilePicture(newProfilePicture, teacherId, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğretmenin uzmanlıklarını değiştirir.
         * @param {TeacherAdministrationCommandsSpecalities} [teacherAdministrationCommandsSpecalities]
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherSpecalities(teacherAdministrationCommandsSpecalities, teacherId, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeTeacherSpecalities(teacherAdministrationCommandsSpecalities, teacherId, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğretmenin görünen puanını değiştirir. 0.5 ve katları olması gerekir. Şayet 0 olarak ayarlanırsa gerçek puanı gösterilir.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {number} [newRate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherVisibleRate(teacherId, reason, newRate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeTeacherVisibleRate(teacherId, reason, newRate, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğretmenin youtube video url\'sini değiştirir.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {string} [newYoutubeUrl]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherYoutubeUrl(teacherId, reason, newYoutubeUrl, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeTeacherYoutubeUrl(teacherId, reason, newYoutubeUrl, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğretmenin hesabını siteden siler.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeacherAccountDueGDPR(teacherId, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteTeacherAccountDueGDPR(teacherId, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğretmenin detayını getirir.
         * @param {number} teacherId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacherDetailsForAdministration(teacherId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getTeacherDetailsForAdministration(teacherId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
         * @param {number} [page] Gidilmek istenilen sayfa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeacherSalaries(searchKeyword, page, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listTeacherSalaries(searchKeyword, page, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Sistemdeki öğretmenleri listeler
         * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
         * @param {string} [approvementState] Öğretmenin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_TEACHERS: Sadece onaylı öğretmenleri listeye dahil eder.  ONLY_UNAPPROVED_TEACHERS: Sadece onaysız öğretmenleri listeye dahil eder.
         * @param {number} [page] Gidilmek istenilen sayfa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeachersForManagement(searchKeyword, approvementState, page, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listTeachersForManagement(searchKeyword, approvementState, page, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğretmenin hesabını kabul etmez. Öğretmene sebebiyle birlikte düzenleme bildirimi atılabilir.  Hesap silinebilir.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectTeacherAccount(teacherId, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.rejectTeacherAccount(teacherId, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğretmenin profil fotoğrafını kabul etmez.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectTeacherProfilePicture(teacherId, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.rejectTeacherProfilePicture(teacherId, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {number} [teacherSalariesId]
         * @param {string} [paymentStatus]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salariesStatusUpdate(teacherSalariesId, paymentStatus, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.salariesStatusUpdate(teacherSalariesId, paymentStatus, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {number} [teacherId]
         * @param {number} [hourlyRate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherHourlyRate(teacherId, hourlyRate, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.teacherHourlyRate(teacherId, hourlyRate, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {number} [teacherId]
         * @param {number} [mints]
         * @param {number} [hours]
         * @param {number} [hourlyRate]
         * @param {number} [amount]
         * @param {string} [paymentStatus]
         * @param {string} [appointmentDetail]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherPay(teacherId, mints, hours, hourlyRate, amount, paymentStatus, appointmentDetail, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.teacherPay(teacherId, mints, hours, hourlyRate, amount, paymentStatus, appointmentDetail, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teachersDropdown(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.teachersDropdown(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğretmeni siteden yasaklamasını kaldırır.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unBanTeacher(teacherId, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.unBanTeacher(teacherId, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoomCreateAccount(teacherId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.zoomCreateAccount(teacherId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * TeacherAdministrationApi - factory interface
 * @export
 */
export const TeacherAdministrationApiFactory = function (configuration, basePath, axios) {
    const localVarFp = TeacherAdministrationApiFp(configuration);
    return {
        /**
         *
         * @summary Bir öğretmenin hesabını onaylar. Onaylanan öğretmen artık sisteme giriş yapabilir.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveTeacherAccount(teacherId, options) {
            return localVarFp.approveTeacherAccount(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğretmenin profil fotoğrafını onaylar.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveTeacherProfilePicture(teacherId, options) {
            return localVarFp.approveTeacherProfilePicture(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğretmeni siteden yasaklar. Artık o hesap ve öğretmenin kullandığı ip\'ler siteye giriş yapamaz.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        banTeacher(teacherId, reason, options) {
            return localVarFp.banTeacher(teacherId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğretmenin açıklamasını değiştirir.
         * @param {number} [teacherId]
         * @param {string} [newDescription]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherDescription(teacherId, newDescription, reason, options) {
            return localVarFp.changeTeacherDescription(teacherId, newDescription, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğretmenin e-posta adresini değiştirir.
         * @param {number} [teacherId]
         * @param {string} [newEmail]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherEmail(teacherId, newEmail, reason, options) {
            return localVarFp.changeTeacherEmail(teacherId, newEmail, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğretmenin iban bilgilerini değiştirir.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {string} [bankName]
         * @param {string} [accountHolderName]
         * @param {string} [iban]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherIbanDetails(teacherId, reason, bankName, accountHolderName, iban, options) {
            return localVarFp.changeTeacherIbanDetails(teacherId, reason, bankName, accountHolderName, iban, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğretmenin ismini değiştirir.
         * @param {number} [teacherId]
         * @param {string} [newName]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherName(teacherId, newName, reason, options) {
            return localVarFp.changeTeacherName(teacherId, newName, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğretmenin şifresini değiştirir.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {string} [newPassword]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherPassword(teacherId, reason, newPassword, options) {
            return localVarFp.changeTeacherPassword(teacherId, reason, newPassword, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğretmenin telefon numarasını değiştirir.
         * @param {number} [teacherId]
         * @param {string} [newPhoneNumber]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherPhoneNumber(teacherId, newPhoneNumber, reason, options) {
            return localVarFp.changeTeacherPhoneNumber(teacherId, newPhoneNumber, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğretmenin profil fotoğrafını değiştirir.
         * @param {File} [newProfilePicture]
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherProfilePicture(newProfilePicture, teacherId, reason, options) {
            return localVarFp.changeTeacherProfilePicture(newProfilePicture, teacherId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğretmenin uzmanlıklarını değiştirir.
         * @param {TeacherAdministrationCommandsSpecalities} [teacherAdministrationCommandsSpecalities]
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherSpecalities(teacherAdministrationCommandsSpecalities, teacherId, reason, options) {
            return localVarFp.changeTeacherSpecalities(teacherAdministrationCommandsSpecalities, teacherId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğretmenin görünen puanını değiştirir. 0.5 ve katları olması gerekir. Şayet 0 olarak ayarlanırsa gerçek puanı gösterilir.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {number} [newRate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherVisibleRate(teacherId, reason, newRate, options) {
            return localVarFp.changeTeacherVisibleRate(teacherId, reason, newRate, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğretmenin youtube video url\'sini değiştirir.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {string} [newYoutubeUrl]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeTeacherYoutubeUrl(teacherId, reason, newYoutubeUrl, options) {
            return localVarFp.changeTeacherYoutubeUrl(teacherId, reason, newYoutubeUrl, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğretmenin hesabını siteden siler.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeacherAccountDueGDPR(teacherId, reason, options) {
            return localVarFp.deleteTeacherAccountDueGDPR(teacherId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğretmenin detayını getirir.
         * @param {number} teacherId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacherDetailsForAdministration(teacherId, options) {
            return localVarFp.getTeacherDetailsForAdministration(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
         * @param {number} [page] Gidilmek istenilen sayfa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeacherSalaries(searchKeyword, page, options) {
            return localVarFp.listTeacherSalaries(searchKeyword, page, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Sistemdeki öğretmenleri listeler
         * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
         * @param {string} [approvementState] Öğretmenin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_TEACHERS: Sadece onaylı öğretmenleri listeye dahil eder.  ONLY_UNAPPROVED_TEACHERS: Sadece onaysız öğretmenleri listeye dahil eder.
         * @param {number} [page] Gidilmek istenilen sayfa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTeachersForManagement(searchKeyword, approvementState, page, options) {
            return localVarFp.listTeachersForManagement(searchKeyword, approvementState, page, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğretmenin hesabını kabul etmez. Öğretmene sebebiyle birlikte düzenleme bildirimi atılabilir.  Hesap silinebilir.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectTeacherAccount(teacherId, reason, options) {
            return localVarFp.rejectTeacherAccount(teacherId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğretmenin profil fotoğrafını kabul etmez.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectTeacherProfilePicture(teacherId, reason, options) {
            return localVarFp.rejectTeacherProfilePicture(teacherId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} [teacherSalariesId]
         * @param {string} [paymentStatus]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        salariesStatusUpdate(teacherSalariesId, paymentStatus, options) {
            return localVarFp.salariesStatusUpdate(teacherSalariesId, paymentStatus, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} [teacherId]
         * @param {number} [hourlyRate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherHourlyRate(teacherId, hourlyRate, options) {
            return localVarFp.teacherHourlyRate(teacherId, hourlyRate, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} [teacherId]
         * @param {number} [mints]
         * @param {number} [hours]
         * @param {number} [hourlyRate]
         * @param {number} [amount]
         * @param {string} [paymentStatus]
         * @param {string} [appointmentDetail]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teacherPay(teacherId, mints, hours, hourlyRate, amount, paymentStatus, appointmentDetail, options) {
            return localVarFp.teacherPay(teacherId, mints, hours, hourlyRate, amount, paymentStatus, appointmentDetail, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teachersDropdown(options) {
            return localVarFp.teachersDropdown(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğretmeni siteden yasaklamasını kaldırır.
         * @param {number} [teacherId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unBanTeacher(teacherId, reason, options) {
            return localVarFp.unBanTeacher(teacherId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        zoomCreateAccount(teacherId, options) {
            return localVarFp.zoomCreateAccount(teacherId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * TeacherAdministrationApi - object-oriented interface
 * @export
 * @class TeacherAdministrationApi
 * @extends {BaseAPI}
 */
export class TeacherAdministrationApi extends BaseAPI {
    /**
     *
     * @summary Bir öğretmenin hesabını onaylar. Onaylanan öğretmen artık sisteme giriş yapabilir.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    approveTeacherAccount(teacherId, options) {
        return TeacherAdministrationApiFp(this.configuration).approveTeacherAccount(teacherId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğretmenin profil fotoğrafını onaylar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    approveTeacherProfilePicture(teacherId, options) {
        return TeacherAdministrationApiFp(this.configuration).approveTeacherProfilePicture(teacherId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğretmeni siteden yasaklar. Artık o hesap ve öğretmenin kullandığı ip\'ler siteye giriş yapamaz.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    banTeacher(teacherId, reason, options) {
        return TeacherAdministrationApiFp(this.configuration).banTeacher(teacherId, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğretmenin açıklamasını değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newDescription]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    changeTeacherDescription(teacherId, newDescription, reason, options) {
        return TeacherAdministrationApiFp(this.configuration).changeTeacherDescription(teacherId, newDescription, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğretmenin e-posta adresini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newEmail]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    changeTeacherEmail(teacherId, newEmail, reason, options) {
        return TeacherAdministrationApiFp(this.configuration).changeTeacherEmail(teacherId, newEmail, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğretmenin iban bilgilerini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {string} [bankName]
     * @param {string} [accountHolderName]
     * @param {string} [iban]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    changeTeacherIbanDetails(teacherId, reason, bankName, accountHolderName, iban, options) {
        return TeacherAdministrationApiFp(this.configuration).changeTeacherIbanDetails(teacherId, reason, bankName, accountHolderName, iban, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğretmenin ismini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newName]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    changeTeacherName(teacherId, newName, reason, options) {
        return TeacherAdministrationApiFp(this.configuration).changeTeacherName(teacherId, newName, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğretmenin şifresini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {string} [newPassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    changeTeacherPassword(teacherId, reason, newPassword, options) {
        return TeacherAdministrationApiFp(this.configuration).changeTeacherPassword(teacherId, reason, newPassword, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğretmenin telefon numarasını değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newPhoneNumber]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    changeTeacherPhoneNumber(teacherId, newPhoneNumber, reason, options) {
        return TeacherAdministrationApiFp(this.configuration).changeTeacherPhoneNumber(teacherId, newPhoneNumber, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğretmenin profil fotoğrafını değiştirir.
     * @param {File} [newProfilePicture]
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    changeTeacherProfilePicture(newProfilePicture, teacherId, reason, options) {
        return TeacherAdministrationApiFp(this.configuration).changeTeacherProfilePicture(newProfilePicture, teacherId, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğretmenin uzmanlıklarını değiştirir.
     * @param {TeacherAdministrationCommandsSpecalities} [teacherAdministrationCommandsSpecalities]
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    changeTeacherSpecalities(teacherAdministrationCommandsSpecalities, teacherId, reason, options) {
        return TeacherAdministrationApiFp(this.configuration).changeTeacherSpecalities(teacherAdministrationCommandsSpecalities, teacherId, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğretmenin görünen puanını değiştirir. 0.5 ve katları olması gerekir. Şayet 0 olarak ayarlanırsa gerçek puanı gösterilir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {number} [newRate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    changeTeacherVisibleRate(teacherId, reason, newRate, options) {
        return TeacherAdministrationApiFp(this.configuration).changeTeacherVisibleRate(teacherId, reason, newRate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğretmenin youtube video url\'sini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {string} [newYoutubeUrl]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    changeTeacherYoutubeUrl(teacherId, reason, newYoutubeUrl, options) {
        return TeacherAdministrationApiFp(this.configuration).changeTeacherYoutubeUrl(teacherId, reason, newYoutubeUrl, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğretmenin hesabını siteden siler.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    deleteTeacherAccountDueGDPR(teacherId, reason, options) {
        return TeacherAdministrationApiFp(this.configuration).deleteTeacherAccountDueGDPR(teacherId, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğretmenin detayını getirir.
     * @param {number} teacherId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    getTeacherDetailsForAdministration(teacherId, options) {
        return TeacherAdministrationApiFp(this.configuration).getTeacherDetailsForAdministration(teacherId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    listTeacherSalaries(searchKeyword, page, options) {
        return TeacherAdministrationApiFp(this.configuration).listTeacherSalaries(searchKeyword, page, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Sistemdeki öğretmenleri listeler
     * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
     * @param {string} [approvementState] Öğretmenin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_TEACHERS: Sadece onaylı öğretmenleri listeye dahil eder.  ONLY_UNAPPROVED_TEACHERS: Sadece onaysız öğretmenleri listeye dahil eder.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    listTeachersForManagement(searchKeyword, approvementState, page, options) {
        return TeacherAdministrationApiFp(this.configuration).listTeachersForManagement(searchKeyword, approvementState, page, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğretmenin hesabını kabul etmez. Öğretmene sebebiyle birlikte düzenleme bildirimi atılabilir.  Hesap silinebilir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    rejectTeacherAccount(teacherId, reason, options) {
        return TeacherAdministrationApiFp(this.configuration).rejectTeacherAccount(teacherId, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğretmenin profil fotoğrafını kabul etmez.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    rejectTeacherProfilePicture(teacherId, reason, options) {
        return TeacherAdministrationApiFp(this.configuration).rejectTeacherProfilePicture(teacherId, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} [teacherSalariesId]
     * @param {string} [paymentStatus]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    salariesStatusUpdate(teacherSalariesId, paymentStatus, options) {
        return TeacherAdministrationApiFp(this.configuration).salariesStatusUpdate(teacherSalariesId, paymentStatus, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [hourlyRate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    teacherHourlyRate(teacherId, hourlyRate, options) {
        return TeacherAdministrationApiFp(this.configuration).teacherHourlyRate(teacherId, hourlyRate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [mints]
     * @param {number} [hours]
     * @param {number} [hourlyRate]
     * @param {number} [amount]
     * @param {string} [paymentStatus]
     * @param {string} [appointmentDetail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    teacherPay(teacherId, mints, hours, hourlyRate, amount, paymentStatus, appointmentDetail, options) {
        return TeacherAdministrationApiFp(this.configuration).teacherPay(teacherId, mints, hours, hourlyRate, amount, paymentStatus, appointmentDetail, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    teachersDropdown(options) {
        return TeacherAdministrationApiFp(this.configuration).teachersDropdown(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğretmeni siteden yasaklamasını kaldırır.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    unBanTeacher(teacherId, reason, options) {
        return TeacherAdministrationApiFp(this.configuration).unBanTeacher(teacherId, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    zoomCreateAccount(teacherId, options) {
        return TeacherAdministrationApiFp(this.configuration).zoomCreateAccount(teacherId, options).then((request) => request(this.axios, this.basePath));
    }
}

/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * LiveApi - axios parameter creator
 * @export
 */
export const LiveApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Öğrenci, ücretli görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        directCall: (teacherId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Live/DirectCall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Arama bilgilerini çekmeyi sağlar.
         * @param {number} callId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCall: (callId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'callId' is not null or undefined
            assertParamExists('getCall', 'callId', callId);
            const localVarPath = `/api/Live/GetCall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (callId !== undefined) {
                localVarQueryParameter['CallId'] = callId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Canlı yayın odasının bilgilerini çekmeyi sağlar.
         * @param {string} roomId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoomInfo: (roomId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('getRoomInfo', 'roomId', roomId);
            const localVarPath = `/api/Live/GetRoomInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (roomId !== undefined) {
                localVarQueryParameter['RoomId'] = roomId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğrencinin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
         * @param {number} [appointmentId]
         * @param {boolean} [isScreenShare]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinToRoomAsStudent: (appointmentId, isScreenShare, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Live/JoinToRoomAsStudent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (appointmentId !== undefined) {
                localVarQueryParameter['AppointmentId'] = appointmentId;
            }
            if (isScreenShare !== undefined) {
                localVarQueryParameter['IsScreenShare'] = isScreenShare;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğretmenin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
         * @param {number} [appointmentId]
         * @param {boolean} [isScreenShare]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinToRoomAsTeacher: (appointmentId, isScreenShare, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Live/JoinToRoomAsTeacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (appointmentId !== undefined) {
                localVarQueryParameter['AppointmentId'] = appointmentId;
            }
            if (isScreenShare !== undefined) {
                localVarQueryParameter['IsScreenShare'] = isScreenShare;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğrencinin canlı yayından ayrılmasını sağlar.
         * @param {number} [appointmentId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveFromRoomAsStudent: (appointmentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Live/LeaveFromRoomAsStudent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (appointmentId !== undefined) {
                localVarQueryParameter['appointmentId'] = appointmentId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğretmenin canlı yayından ayrılmasını sağlar.
         * @param {number} [appointmentId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveFromRoomAsTeacher: (appointmentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Live/LeaveFromRoomAsTeacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (appointmentId !== undefined) {
                localVarQueryParameter['appointmentId'] = appointmentId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğrenci, ücretsiz görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestFreeCall: (teacherId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Live/RequestFreeCall`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * LiveApi - functional programming interface
 * @export
 */
export const LiveApiFp = function (configuration) {
    const localVarAxiosParamCreator = LiveApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Öğrenci, ücretli görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        directCall(teacherId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.directCall(teacherId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Arama bilgilerini çekmeyi sağlar.
         * @param {number} callId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCall(callId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getCall(callId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Canlı yayın odasının bilgilerini çekmeyi sağlar.
         * @param {string} roomId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoomInfo(roomId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getRoomInfo(roomId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğrencinin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
         * @param {number} [appointmentId]
         * @param {boolean} [isScreenShare]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinToRoomAsStudent(appointmentId, isScreenShare, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.joinToRoomAsStudent(appointmentId, isScreenShare, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğretmenin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
         * @param {number} [appointmentId]
         * @param {boolean} [isScreenShare]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinToRoomAsTeacher(appointmentId, isScreenShare, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.joinToRoomAsTeacher(appointmentId, isScreenShare, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğrencinin canlı yayından ayrılmasını sağlar.
         * @param {number} [appointmentId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveFromRoomAsStudent(appointmentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.leaveFromRoomAsStudent(appointmentId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğretmenin canlı yayından ayrılmasını sağlar.
         * @param {number} [appointmentId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveFromRoomAsTeacher(appointmentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.leaveFromRoomAsTeacher(appointmentId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğrenci, ücretsiz görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestFreeCall(teacherId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.requestFreeCall(teacherId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * LiveApi - factory interface
 * @export
 */
export const LiveApiFactory = function (configuration, basePath, axios) {
    const localVarFp = LiveApiFp(configuration);
    return {
        /**
         *
         * @summary Öğrenci, ücretli görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        directCall(teacherId, options) {
            return localVarFp.directCall(teacherId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Arama bilgilerini çekmeyi sağlar.
         * @param {number} callId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCall(callId, options) {
            return localVarFp.getCall(callId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Canlı yayın odasının bilgilerini çekmeyi sağlar.
         * @param {string} roomId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoomInfo(roomId, options) {
            return localVarFp.getRoomInfo(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğrencinin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
         * @param {number} [appointmentId]
         * @param {boolean} [isScreenShare]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinToRoomAsStudent(appointmentId, isScreenShare, options) {
            return localVarFp.joinToRoomAsStudent(appointmentId, isScreenShare, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğretmenin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
         * @param {number} [appointmentId]
         * @param {boolean} [isScreenShare]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinToRoomAsTeacher(appointmentId, isScreenShare, options) {
            return localVarFp.joinToRoomAsTeacher(appointmentId, isScreenShare, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğrencinin canlı yayından ayrılmasını sağlar.
         * @param {number} [appointmentId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveFromRoomAsStudent(appointmentId, options) {
            return localVarFp.leaveFromRoomAsStudent(appointmentId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğretmenin canlı yayından ayrılmasını sağlar.
         * @param {number} [appointmentId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveFromRoomAsTeacher(appointmentId, options) {
            return localVarFp.leaveFromRoomAsTeacher(appointmentId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğrenci, ücretsiz görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
         * @param {number} [teacherId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestFreeCall(teacherId, options) {
            return localVarFp.requestFreeCall(teacherId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * LiveApi - object-oriented interface
 * @export
 * @class LiveApi
 * @extends {BaseAPI}
 */
export class LiveApi extends BaseAPI {
    /**
     *
     * @summary Öğrenci, ücretli görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    directCall(teacherId, options) {
        return LiveApiFp(this.configuration).directCall(teacherId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Arama bilgilerini çekmeyi sağlar.
     * @param {number} callId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    getCall(callId, options) {
        return LiveApiFp(this.configuration).getCall(callId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Canlı yayın odasının bilgilerini çekmeyi sağlar.
     * @param {string} roomId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    getRoomInfo(roomId, options) {
        return LiveApiFp(this.configuration).getRoomInfo(roomId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğrencinin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
     * @param {number} [appointmentId]
     * @param {boolean} [isScreenShare]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    joinToRoomAsStudent(appointmentId, isScreenShare, options) {
        return LiveApiFp(this.configuration).joinToRoomAsStudent(appointmentId, isScreenShare, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğretmenin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
     * @param {number} [appointmentId]
     * @param {boolean} [isScreenShare]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    joinToRoomAsTeacher(appointmentId, isScreenShare, options) {
        return LiveApiFp(this.configuration).joinToRoomAsTeacher(appointmentId, isScreenShare, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğrencinin canlı yayından ayrılmasını sağlar.
     * @param {number} [appointmentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    leaveFromRoomAsStudent(appointmentId, options) {
        return LiveApiFp(this.configuration).leaveFromRoomAsStudent(appointmentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğretmenin canlı yayından ayrılmasını sağlar.
     * @param {number} [appointmentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    leaveFromRoomAsTeacher(appointmentId, options) {
        return LiveApiFp(this.configuration).leaveFromRoomAsTeacher(appointmentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğrenci, ücretsiz görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    requestFreeCall(teacherId, options) {
        return LiveApiFp(this.configuration).requestFreeCall(teacherId, options).then((request) => request(this.axios, this.basePath));
    }
}

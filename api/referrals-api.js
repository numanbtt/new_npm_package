/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * ReferralsApi - axios parameter creator
 * @export
 */
export const ReferralsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {ReferralCommandsCreateCommand} [referralCommandsCreateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReferral: (referralCommandsCreateCommand, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Referrals/Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(referralCommandsCreateCommand, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {number} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReferral: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Referrals/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {number} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsByIdReferral: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Referrals/GetDetailsById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownReferral: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Referrals/GetDropdown`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {number} [page]
         * @param {number} [itemPerPage]
         * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReferral: (page, itemPerPage, searchKeyword, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Referrals/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }
            if (itemPerPage !== undefined) {
                localVarQueryParameter['ItemPerPage'] = itemPerPage;
            }
            if (searchKeyword !== undefined) {
                localVarQueryParameter['SearchKeyword'] = searchKeyword;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {number} [page]
         * @param {number} [itemPerPage]
         * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
         * @param {number} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReferralStudents: (page, itemPerPage, searchKeyword, id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Referrals/ListStudents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }
            if (itemPerPage !== undefined) {
                localVarQueryParameter['ItemPerPage'] = itemPerPage;
            }
            if (searchKeyword !== undefined) {
                localVarQueryParameter['SearchKeyword'] = searchKeyword;
            }
            if (id !== undefined) {
                localVarQueryParameter['Id'] = id;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {ReferralCommandsUpdateCommand} [referralCommandsUpdateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReferral: (referralCommandsUpdateCommand, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Referrals/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(referralCommandsUpdateCommand, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {ReferralCommandsUpdateStatusCommand} [referralCommandsUpdateStatusCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatusReferral: (referralCommandsUpdateStatusCommand, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Referrals/UpdateStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(referralCommandsUpdateStatusCommand, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} [code]
         * @param {number} [packageId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validationReferral: (code, packageId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Referrals/ValidationCode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            if (packageId !== undefined) {
                localVarQueryParameter['packageId'] = packageId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * ReferralsApi - functional programming interface
 * @export
 */
export const ReferralsApiFp = function (configuration) {
    const localVarAxiosParamCreator = ReferralsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {ReferralCommandsCreateCommand} [referralCommandsCreateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReferral(referralCommandsCreateCommand, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createReferral(referralCommandsCreateCommand, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {number} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReferral(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteReferral(id, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {number} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsByIdReferral(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDetailsByIdReferral(id, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownReferral(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDropDownReferral(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {number} [page]
         * @param {number} [itemPerPage]
         * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReferral(page, itemPerPage, searchKeyword, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listReferral(page, itemPerPage, searchKeyword, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {number} [page]
         * @param {number} [itemPerPage]
         * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
         * @param {number} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReferralStudents(page, itemPerPage, searchKeyword, id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listReferralStudents(page, itemPerPage, searchKeyword, id, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {ReferralCommandsUpdateCommand} [referralCommandsUpdateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReferral(referralCommandsUpdateCommand, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateReferral(referralCommandsUpdateCommand, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {ReferralCommandsUpdateStatusCommand} [referralCommandsUpdateStatusCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatusReferral(referralCommandsUpdateStatusCommand, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateStatusReferral(referralCommandsUpdateStatusCommand, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} [code]
         * @param {number} [packageId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validationReferral(code, packageId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.validationReferral(code, packageId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * ReferralsApi - factory interface
 * @export
 */
export const ReferralsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = ReferralsApiFp(configuration);
    return {
        /**
         *
         * @param {ReferralCommandsCreateCommand} [referralCommandsCreateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReferral(referralCommandsCreateCommand, options) {
            return localVarFp.createReferral(referralCommandsCreateCommand, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReferral(id, options) {
            return localVarFp.deleteReferral(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsByIdReferral(id, options) {
            return localVarFp.getDetailsByIdReferral(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownReferral(options) {
            return localVarFp.getDropDownReferral(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} [page]
         * @param {number} [itemPerPage]
         * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReferral(page, itemPerPage, searchKeyword, options) {
            return localVarFp.listReferral(page, itemPerPage, searchKeyword, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} [page]
         * @param {number} [itemPerPage]
         * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
         * @param {number} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReferralStudents(page, itemPerPage, searchKeyword, id, options) {
            return localVarFp.listReferralStudents(page, itemPerPage, searchKeyword, id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ReferralCommandsUpdateCommand} [referralCommandsUpdateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReferral(referralCommandsUpdateCommand, options) {
            return localVarFp.updateReferral(referralCommandsUpdateCommand, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ReferralCommandsUpdateStatusCommand} [referralCommandsUpdateStatusCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatusReferral(referralCommandsUpdateStatusCommand, options) {
            return localVarFp.updateStatusReferral(referralCommandsUpdateStatusCommand, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} [code]
         * @param {number} [packageId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validationReferral(code, packageId, options) {
            return localVarFp.validationReferral(code, packageId, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ReferralsApi - object-oriented interface
 * @export
 * @class ReferralsApi
 * @extends {BaseAPI}
 */
export class ReferralsApi extends BaseAPI {
    /**
     *
     * @param {ReferralCommandsCreateCommand} [referralCommandsCreateCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    createReferral(referralCommandsCreateCommand, options) {
        return ReferralsApiFp(this.configuration).createReferral(referralCommandsCreateCommand, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    deleteReferral(id, options) {
        return ReferralsApiFp(this.configuration).deleteReferral(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    getDetailsByIdReferral(id, options) {
        return ReferralsApiFp(this.configuration).getDetailsByIdReferral(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    getDropDownReferral(options) {
        return ReferralsApiFp(this.configuration).getDropDownReferral(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} [page]
     * @param {number} [itemPerPage]
     * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    listReferral(page, itemPerPage, searchKeyword, options) {
        return ReferralsApiFp(this.configuration).listReferral(page, itemPerPage, searchKeyword, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} [page]
     * @param {number} [itemPerPage]
     * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    listReferralStudents(page, itemPerPage, searchKeyword, id, options) {
        return ReferralsApiFp(this.configuration).listReferralStudents(page, itemPerPage, searchKeyword, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {ReferralCommandsUpdateCommand} [referralCommandsUpdateCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    updateReferral(referralCommandsUpdateCommand, options) {
        return ReferralsApiFp(this.configuration).updateReferral(referralCommandsUpdateCommand, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {ReferralCommandsUpdateStatusCommand} [referralCommandsUpdateStatusCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    updateStatusReferral(referralCommandsUpdateStatusCommand, options) {
        return ReferralsApiFp(this.configuration).updateStatusReferral(referralCommandsUpdateStatusCommand, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} [code]
     * @param {number} [packageId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferralsApi
     */
    validationReferral(code, packageId, options) {
        return ReferralsApiFp(this.configuration).validationReferral(code, packageId, options).then((request) => request(this.axios, this.basePath));
    }
}

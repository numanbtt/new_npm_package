/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AppointmentCommandsCreateCommandResult } from '../models';
import { AppointmentCommandsReportAsStudentCommandResult } from '../models';
import { AppointmentCommandsReportAsTeacherCommandResult } from '../models';
import { AppointmentCommandsSelectedTimeRange } from '../models';
import { AppointmentQueriesListMyAppointmentsQueryResult } from '../models';
/**
 * AppointmentApi - axios parameter creator
 * @export
 */
export declare const AppointmentApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Öğrencinin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 1 saat kala iptal işlemi gerçekleştirilebilir.
     * @param {number} [appointmentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelAppointmentAsStudent: (appointmentId?: number, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmenin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 15 dakika kala iptal işlemi gerçekleştirilebilir.
     * @param {number} [appointmentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelAppointmentAsTeacher: (appointmentId?: number, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğrenci olarak randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 1 saat kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
     * @param {number} [appointmentId]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeDateTimeAsStudent: (appointmentId?: number, startTime?: string, endTime?: string, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 15 dakika kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
     * @param {number} [appointmentId]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeDateTimeAsTeacher: (appointmentId?: number, startTime?: string, endTime?: string, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğrencinin öğretmenden randevu almasını sağlar.
     * @param {AppointmentCommandsSelectedTimeRange} [appointmentCommandsSelectedTimeRange]
     * @param {number} [teacherId]
     * @param {string} [infoTimeZone]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAppointment: (appointmentCommandsSelectedTimeRange?: AppointmentCommandsSelectedTimeRange, teacherId?: number, infoTimeZone?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Hesabın içinde bulunduğu randevuların listesini getirir.
     * @param {number} [lastId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMyAppointments: (lastId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğrencinin randevuyu şikayet etmesini sağlar.
     * @param {number} [appointmentId]
     * @param {string} [title]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportAppointmentAsStudent: (appointmentId?: number, title?: string, description?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmenin randevuyu şikayet etmesini sağlar.
     * @param {number} [appointmentId]
     * @param {string} [title]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportAppointmentAsTeacher: (appointmentId?: number, title?: string, description?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AppointmentApi - functional programming interface
 * @export
 */
export declare const AppointmentApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Öğrencinin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 1 saat kala iptal işlemi gerçekleştirilebilir.
     * @param {number} [appointmentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelAppointmentAsStudent(appointmentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğretmenin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 15 dakika kala iptal işlemi gerçekleştirilebilir.
     * @param {number} [appointmentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelAppointmentAsTeacher(appointmentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğrenci olarak randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 1 saat kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
     * @param {number} [appointmentId]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeDateTimeAsStudent(appointmentId?: number, startTime?: string, endTime?: string, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 15 dakika kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
     * @param {number} [appointmentId]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeDateTimeAsTeacher(appointmentId?: number, startTime?: string, endTime?: string, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğrencinin öğretmenden randevu almasını sağlar.
     * @param {AppointmentCommandsSelectedTimeRange} [appointmentCommandsSelectedTimeRange]
     * @param {number} [teacherId]
     * @param {string} [infoTimeZone]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAppointment(appointmentCommandsSelectedTimeRange?: AppointmentCommandsSelectedTimeRange, teacherId?: number, infoTimeZone?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppointmentCommandsCreateCommandResult>>;
    /**
     *
     * @summary Hesabın içinde bulunduğu randevuların listesini getirir.
     * @param {number} [lastId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMyAppointments(lastId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppointmentQueriesListMyAppointmentsQueryResult>>;
    /**
     *
     * @summary Öğrencinin randevuyu şikayet etmesini sağlar.
     * @param {number} [appointmentId]
     * @param {string} [title]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportAppointmentAsStudent(appointmentId?: number, title?: string, description?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppointmentCommandsReportAsStudentCommandResult>>;
    /**
     *
     * @summary Öğretmenin randevuyu şikayet etmesini sağlar.
     * @param {number} [appointmentId]
     * @param {string} [title]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportAppointmentAsTeacher(appointmentId?: number, title?: string, description?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppointmentCommandsReportAsTeacherCommandResult>>;
};
/**
 * AppointmentApi - factory interface
 * @export
 */
export declare const AppointmentApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Öğrencinin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 1 saat kala iptal işlemi gerçekleştirilebilir.
     * @param {number} [appointmentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelAppointmentAsStudent(appointmentId?: number, reason?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğretmenin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 15 dakika kala iptal işlemi gerçekleştirilebilir.
     * @param {number} [appointmentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelAppointmentAsTeacher(appointmentId?: number, reason?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğrenci olarak randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 1 saat kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
     * @param {number} [appointmentId]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeDateTimeAsStudent(appointmentId?: number, startTime?: string, endTime?: string, reason?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 15 dakika kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
     * @param {number} [appointmentId]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeDateTimeAsTeacher(appointmentId?: number, startTime?: string, endTime?: string, reason?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin öğretmenden randevu almasını sağlar.
     * @param {AppointmentCommandsSelectedTimeRange} [appointmentCommandsSelectedTimeRange]
     * @param {number} [teacherId]
     * @param {string} [infoTimeZone]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAppointment(appointmentCommandsSelectedTimeRange?: AppointmentCommandsSelectedTimeRange, teacherId?: number, infoTimeZone?: string, options?: any): AxiosPromise<AppointmentCommandsCreateCommandResult>;
    /**
     *
     * @summary Hesabın içinde bulunduğu randevuların listesini getirir.
     * @param {number} [lastId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listMyAppointments(lastId?: number, options?: any): AxiosPromise<AppointmentQueriesListMyAppointmentsQueryResult>;
    /**
     *
     * @summary Öğrencinin randevuyu şikayet etmesini sağlar.
     * @param {number} [appointmentId]
     * @param {string} [title]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportAppointmentAsStudent(appointmentId?: number, title?: string, description?: string, options?: any): AxiosPromise<AppointmentCommandsReportAsStudentCommandResult>;
    /**
     *
     * @summary Öğretmenin randevuyu şikayet etmesini sağlar.
     * @param {number} [appointmentId]
     * @param {string} [title]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportAppointmentAsTeacher(appointmentId?: number, title?: string, description?: string, options?: any): AxiosPromise<AppointmentCommandsReportAsTeacherCommandResult>;
};
/**
 * AppointmentApi - interface
 * @export
 * @interface AppointmentApi
 */
export interface AppointmentApiInterface {
    /**
     *
     * @summary Öğrencinin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 1 saat kala iptal işlemi gerçekleştirilebilir.
     * @param {number} [appointmentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApiInterface
     */
    cancelAppointmentAsStudent(appointmentId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğretmenin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 15 dakika kala iptal işlemi gerçekleştirilebilir.
     * @param {number} [appointmentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApiInterface
     */
    cancelAppointmentAsTeacher(appointmentId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğrenci olarak randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 1 saat kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
     * @param {number} [appointmentId]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApiInterface
     */
    changeDateTimeAsStudent(appointmentId?: number, startTime?: string, endTime?: string, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 15 dakika kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
     * @param {number} [appointmentId]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApiInterface
     */
    changeDateTimeAsTeacher(appointmentId?: number, startTime?: string, endTime?: string, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğrencinin öğretmenden randevu almasını sağlar.
     * @param {AppointmentCommandsSelectedTimeRange} [appointmentCommandsSelectedTimeRange]
     * @param {number} [teacherId]
     * @param {string} [infoTimeZone]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApiInterface
     */
    createAppointment(appointmentCommandsSelectedTimeRange?: AppointmentCommandsSelectedTimeRange, teacherId?: number, infoTimeZone?: string, options?: AxiosRequestConfig): AxiosPromise<AppointmentCommandsCreateCommandResult>;
    /**
     *
     * @summary Hesabın içinde bulunduğu randevuların listesini getirir.
     * @param {number} [lastId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApiInterface
     */
    listMyAppointments(lastId?: number, options?: AxiosRequestConfig): AxiosPromise<AppointmentQueriesListMyAppointmentsQueryResult>;
    /**
     *
     * @summary Öğrencinin randevuyu şikayet etmesini sağlar.
     * @param {number} [appointmentId]
     * @param {string} [title]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApiInterface
     */
    reportAppointmentAsStudent(appointmentId?: number, title?: string, description?: string, options?: AxiosRequestConfig): AxiosPromise<AppointmentCommandsReportAsStudentCommandResult>;
    /**
     *
     * @summary Öğretmenin randevuyu şikayet etmesini sağlar.
     * @param {number} [appointmentId]
     * @param {string} [title]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApiInterface
     */
    reportAppointmentAsTeacher(appointmentId?: number, title?: string, description?: string, options?: AxiosRequestConfig): AxiosPromise<AppointmentCommandsReportAsTeacherCommandResult>;
}
/**
 * AppointmentApi - object-oriented interface
 * @export
 * @class AppointmentApi
 * @extends {BaseAPI}
 */
export declare class AppointmentApi extends BaseAPI implements AppointmentApiInterface {
    /**
     *
     * @summary Öğrencinin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 1 saat kala iptal işlemi gerçekleştirilebilir.
     * @param {number} [appointmentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    cancelAppointmentAsStudent(appointmentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğretmenin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 15 dakika kala iptal işlemi gerçekleştirilebilir.
     * @param {number} [appointmentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    cancelAppointmentAsTeacher(appointmentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğrenci olarak randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 1 saat kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
     * @param {number} [appointmentId]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    changeDateTimeAsStudent(appointmentId?: number, startTime?: string, endTime?: string, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 15 dakika kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
     * @param {number} [appointmentId]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    changeDateTimeAsTeacher(appointmentId?: number, startTime?: string, endTime?: string, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğrencinin öğretmenden randevu almasını sağlar.
     * @param {AppointmentCommandsSelectedTimeRange} [appointmentCommandsSelectedTimeRange]
     * @param {number} [teacherId]
     * @param {string} [infoTimeZone]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    createAppointment(appointmentCommandsSelectedTimeRange?: AppointmentCommandsSelectedTimeRange, teacherId?: number, infoTimeZone?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AppointmentCommandsCreateCommandResult, any>>;
    /**
     *
     * @summary Hesabın içinde bulunduğu randevuların listesini getirir.
     * @param {number} [lastId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    listMyAppointments(lastId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AppointmentQueriesListMyAppointmentsQueryResult, any>>;
    /**
     *
     * @summary Öğrencinin randevuyu şikayet etmesini sağlar.
     * @param {number} [appointmentId]
     * @param {string} [title]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    reportAppointmentAsStudent(appointmentId?: number, title?: string, description?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AppointmentCommandsReportAsStudentCommandResult, any>>;
    /**
     *
     * @summary Öğretmenin randevuyu şikayet etmesini sağlar.
     * @param {number} [appointmentId]
     * @param {string} [title]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    reportAppointmentAsTeacher(appointmentId?: number, title?: string, description?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AppointmentCommandsReportAsTeacherCommandResult, any>>;
}

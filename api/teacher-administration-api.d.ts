/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { AdvancerCommonDropDownModelIntCustom } from '../models';
import { TeacherAdministrationCommandsChangeProfilePictureCommandResult } from '../models';
import { TeacherAdministrationCommandsSpecalities } from '../models';
import { TeacherAdministrationQueriesGetDetailsQueryResult } from '../models';
import { TeacherAdministrationQueriesListQueryResult } from '../models';
import { TeacherAdministrationQueriesListSalariesQueryResult } from '../models';
/**
 * TeacherAdministrationApi - axios parameter creator
 * @export
 */
export declare const TeacherAdministrationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Bir öğretmenin hesabını onaylar. Onaylanan öğretmen artık sisteme giriş yapabilir.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approveTeacherAccount: (teacherId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğretmenin profil fotoğrafını onaylar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approveTeacherProfilePicture: (teacherId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğretmeni siteden yasaklar. Artık o hesap ve öğretmenin kullandığı ip\'ler siteye giriş yapamaz.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    banTeacher: (teacherId?: number, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğretmenin açıklamasını değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newDescription]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherDescription: (teacherId?: number, newDescription?: string, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğretmenin e-posta adresini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newEmail]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherEmail: (teacherId?: number, newEmail?: string, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğretmenin iban bilgilerini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {string} [bankName]
     * @param {string} [accountHolderName]
     * @param {string} [iban]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherIbanDetails: (teacherId?: number, reason?: string, bankName?: string, accountHolderName?: string, iban?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğretmenin ismini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newName]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherName: (teacherId?: number, newName?: string, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğretmenin şifresini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {string} [newPassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherPassword: (teacherId?: number, reason?: string, newPassword?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğretmenin telefon numarasını değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newPhoneNumber]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherPhoneNumber: (teacherId?: number, newPhoneNumber?: string, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğretmenin profil fotoğrafını değiştirir.
     * @param {File} [newProfilePicture]
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherProfilePicture: (newProfilePicture?: File, teacherId?: number, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğretmenin uzmanlıklarını değiştirir.
     * @param {TeacherAdministrationCommandsSpecalities} [teacherAdministrationCommandsSpecalities]
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherSpecalities: (teacherAdministrationCommandsSpecalities?: TeacherAdministrationCommandsSpecalities, teacherId?: number, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğretmenin görünen puanını değiştirir. 0.5 ve katları olması gerekir. Şayet 0 olarak ayarlanırsa gerçek puanı gösterilir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {number} [newRate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherVisibleRate: (teacherId?: number, reason?: string, newRate?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğretmenin youtube video url\'sini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {string} [newYoutubeUrl]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherYoutubeUrl: (teacherId?: number, reason?: string, newYoutubeUrl?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğretmenin hesabını siteden siler.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeacherAccountDueGDPR: (teacherId?: number, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmenin detayını getirir.
     * @param {number} teacherId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeacherDetailsForAdministration: (teacherId: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeacherSalaries: (searchKeyword?: string, page?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Sistemdeki öğretmenleri listeler
     * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
     * @param {string} [approvementState] Öğretmenin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_TEACHERS: Sadece onaylı öğretmenleri listeye dahil eder.  ONLY_UNAPPROVED_TEACHERS: Sadece onaysız öğretmenleri listeye dahil eder.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeachersForManagement: (searchKeyword?: string, approvementState?: string, page?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğretmenin hesabını kabul etmez. Öğretmene sebebiyle birlikte düzenleme bildirimi atılabilir.  Hesap silinebilir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectTeacherAccount: (teacherId?: number, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğretmenin profil fotoğrafını kabul etmez.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectTeacherProfilePicture: (teacherId?: number, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [teacherSalariesId]
     * @param {string} [paymentStatus]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    salariesStatusUpdate: (teacherSalariesId?: number, paymentStatus?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [hourlyRate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teacherHourlyRate: (teacherId?: number, hourlyRate?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [mints]
     * @param {number} [hours]
     * @param {number} [hourlyRate]
     * @param {number} [amount]
     * @param {string} [paymentStatus]
     * @param {string} [appointmentDetail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teacherPay: (teacherId?: number, mints?: number, hours?: number, hourlyRate?: number, amount?: number, paymentStatus?: string, appointmentDetail?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teachersDropdown: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğretmeni siteden yasaklamasını kaldırır.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unBanTeacher: (teacherId?: number, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    zoomCreateAccount: (teacherId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TeacherAdministrationApi - functional programming interface
 * @export
 */
export declare const TeacherAdministrationApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Bir öğretmenin hesabını onaylar. Onaylanan öğretmen artık sisteme giriş yapabilir.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approveTeacherAccount(teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Bir öğretmenin profil fotoğrafını onaylar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approveTeacherProfilePicture(teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Bir öğretmeni siteden yasaklar. Artık o hesap ve öğretmenin kullandığı ip\'ler siteye giriş yapamaz.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    banTeacher(teacherId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Bir öğretmenin açıklamasını değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newDescription]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherDescription(teacherId?: number, newDescription?: string, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Bir öğretmenin e-posta adresini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newEmail]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherEmail(teacherId?: number, newEmail?: string, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Bir öğretmenin iban bilgilerini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {string} [bankName]
     * @param {string} [accountHolderName]
     * @param {string} [iban]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherIbanDetails(teacherId?: number, reason?: string, bankName?: string, accountHolderName?: string, iban?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Bir öğretmenin ismini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newName]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherName(teacherId?: number, newName?: string, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Bir öğretmenin şifresini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {string} [newPassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherPassword(teacherId?: number, reason?: string, newPassword?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Bir öğretmenin telefon numarasını değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newPhoneNumber]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherPhoneNumber(teacherId?: number, newPhoneNumber?: string, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Bir öğretmenin profil fotoğrafını değiştirir.
     * @param {File} [newProfilePicture]
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherProfilePicture(newProfilePicture?: File, teacherId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherAdministrationCommandsChangeProfilePictureCommandResult>>;
    /**
     *
     * @summary Bir öğretmenin uzmanlıklarını değiştirir.
     * @param {TeacherAdministrationCommandsSpecalities} [teacherAdministrationCommandsSpecalities]
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherSpecalities(teacherAdministrationCommandsSpecalities?: TeacherAdministrationCommandsSpecalities, teacherId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Bir öğretmenin görünen puanını değiştirir. 0.5 ve katları olması gerekir. Şayet 0 olarak ayarlanırsa gerçek puanı gösterilir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {number} [newRate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherVisibleRate(teacherId?: number, reason?: string, newRate?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Bir öğretmenin youtube video url\'sini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {string} [newYoutubeUrl]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherYoutubeUrl(teacherId?: number, reason?: string, newYoutubeUrl?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Bir öğretmenin hesabını siteden siler.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeacherAccountDueGDPR(teacherId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğretmenin detayını getirir.
     * @param {number} teacherId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeacherDetailsForAdministration(teacherId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherAdministrationQueriesGetDetailsQueryResult>>;
    /**
     *
     * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeacherSalaries(searchKeyword?: string, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherAdministrationQueriesListSalariesQueryResult>>;
    /**
     *
     * @summary Sistemdeki öğretmenleri listeler
     * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
     * @param {string} [approvementState] Öğretmenin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_TEACHERS: Sadece onaylı öğretmenleri listeye dahil eder.  ONLY_UNAPPROVED_TEACHERS: Sadece onaysız öğretmenleri listeye dahil eder.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeachersForManagement(searchKeyword?: string, approvementState?: string, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherAdministrationQueriesListQueryResult>>;
    /**
     *
     * @summary Bir öğretmenin hesabını kabul etmez. Öğretmene sebebiyle birlikte düzenleme bildirimi atılabilir.  Hesap silinebilir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectTeacherAccount(teacherId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Bir öğretmenin profil fotoğrafını kabul etmez.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectTeacherProfilePicture(teacherId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @param {number} [teacherSalariesId]
     * @param {string} [paymentStatus]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    salariesStatusUpdate(teacherSalariesId?: number, paymentStatus?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [hourlyRate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teacherHourlyRate(teacherId?: number, hourlyRate?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [mints]
     * @param {number} [hours]
     * @param {number} [hourlyRate]
     * @param {number} [amount]
     * @param {string} [paymentStatus]
     * @param {string} [appointmentDetail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teacherPay(teacherId?: number, mints?: number, hours?: number, hourlyRate?: number, amount?: number, paymentStatus?: string, appointmentDetail?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teachersDropdown(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AdvancerCommonDropDownModelIntCustom>>>;
    /**
     *
     * @summary Bir öğretmeni siteden yasaklamasını kaldırır.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unBanTeacher(teacherId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    zoomCreateAccount(teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
};
/**
 * TeacherAdministrationApi - factory interface
 * @export
 */
export declare const TeacherAdministrationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Bir öğretmenin hesabını onaylar. Onaylanan öğretmen artık sisteme giriş yapabilir.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approveTeacherAccount(teacherId?: number, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin profil fotoğrafını onaylar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approveTeacherProfilePicture(teacherId?: number, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmeni siteden yasaklar. Artık o hesap ve öğretmenin kullandığı ip\'ler siteye giriş yapamaz.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    banTeacher(teacherId?: number, reason?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin açıklamasını değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newDescription]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherDescription(teacherId?: number, newDescription?: string, reason?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin e-posta adresini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newEmail]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherEmail(teacherId?: number, newEmail?: string, reason?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin iban bilgilerini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {string} [bankName]
     * @param {string} [accountHolderName]
     * @param {string} [iban]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherIbanDetails(teacherId?: number, reason?: string, bankName?: string, accountHolderName?: string, iban?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin ismini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newName]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherName(teacherId?: number, newName?: string, reason?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin şifresini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {string} [newPassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherPassword(teacherId?: number, reason?: string, newPassword?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin telefon numarasını değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newPhoneNumber]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherPhoneNumber(teacherId?: number, newPhoneNumber?: string, reason?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin profil fotoğrafını değiştirir.
     * @param {File} [newProfilePicture]
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherProfilePicture(newProfilePicture?: File, teacherId?: number, reason?: string, options?: any): AxiosPromise<TeacherAdministrationCommandsChangeProfilePictureCommandResult>;
    /**
     *
     * @summary Bir öğretmenin uzmanlıklarını değiştirir.
     * @param {TeacherAdministrationCommandsSpecalities} [teacherAdministrationCommandsSpecalities]
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherSpecalities(teacherAdministrationCommandsSpecalities?: TeacherAdministrationCommandsSpecalities, teacherId?: number, reason?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin görünen puanını değiştirir. 0.5 ve katları olması gerekir. Şayet 0 olarak ayarlanırsa gerçek puanı gösterilir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {number} [newRate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherVisibleRate(teacherId?: number, reason?: string, newRate?: number, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin youtube video url\'sini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {string} [newYoutubeUrl]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeTeacherYoutubeUrl(teacherId?: number, reason?: string, newYoutubeUrl?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin hesabını siteden siler.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTeacherAccountDueGDPR(teacherId?: number, reason?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğretmenin detayını getirir.
     * @param {number} teacherId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeacherDetailsForAdministration(teacherId: number, options?: any): AxiosPromise<TeacherAdministrationQueriesGetDetailsQueryResult>;
    /**
     *
     * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeacherSalaries(searchKeyword?: string, page?: number, options?: any): AxiosPromise<TeacherAdministrationQueriesListSalariesQueryResult>;
    /**
     *
     * @summary Sistemdeki öğretmenleri listeler
     * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
     * @param {string} [approvementState] Öğretmenin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_TEACHERS: Sadece onaylı öğretmenleri listeye dahil eder.  ONLY_UNAPPROVED_TEACHERS: Sadece onaysız öğretmenleri listeye dahil eder.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTeachersForManagement(searchKeyword?: string, approvementState?: string, page?: number, options?: any): AxiosPromise<TeacherAdministrationQueriesListQueryResult>;
    /**
     *
     * @summary Bir öğretmenin hesabını kabul etmez. Öğretmene sebebiyle birlikte düzenleme bildirimi atılabilir.  Hesap silinebilir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectTeacherAccount(teacherId?: number, reason?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin profil fotoğrafını kabul etmez.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rejectTeacherProfilePicture(teacherId?: number, reason?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @param {number} [teacherSalariesId]
     * @param {string} [paymentStatus]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    salariesStatusUpdate(teacherSalariesId?: number, paymentStatus?: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [hourlyRate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teacherHourlyRate(teacherId?: number, hourlyRate?: number, options?: any): AxiosPromise<string>;
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [mints]
     * @param {number} [hours]
     * @param {number} [hourlyRate]
     * @param {number} [amount]
     * @param {string} [paymentStatus]
     * @param {string} [appointmentDetail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teacherPay(teacherId?: number, mints?: number, hours?: number, hourlyRate?: number, amount?: number, paymentStatus?: string, appointmentDetail?: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teachersDropdown(options?: any): AxiosPromise<Array<AdvancerCommonDropDownModelIntCustom>>;
    /**
     *
     * @summary Bir öğretmeni siteden yasaklamasını kaldırır.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unBanTeacher(teacherId?: number, reason?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    zoomCreateAccount(teacherId?: number, options?: any): AxiosPromise<string>;
};
/**
 * TeacherAdministrationApi - interface
 * @export
 * @interface TeacherAdministrationApi
 */
export interface TeacherAdministrationApiInterface {
    /**
     *
     * @summary Bir öğretmenin hesabını onaylar. Onaylanan öğretmen artık sisteme giriş yapabilir.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    approveTeacherAccount(teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin profil fotoğrafını onaylar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    approveTeacherProfilePicture(teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmeni siteden yasaklar. Artık o hesap ve öğretmenin kullandığı ip\'ler siteye giriş yapamaz.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    banTeacher(teacherId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin açıklamasını değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newDescription]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    changeTeacherDescription(teacherId?: number, newDescription?: string, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin e-posta adresini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newEmail]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    changeTeacherEmail(teacherId?: number, newEmail?: string, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin iban bilgilerini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {string} [bankName]
     * @param {string} [accountHolderName]
     * @param {string} [iban]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    changeTeacherIbanDetails(teacherId?: number, reason?: string, bankName?: string, accountHolderName?: string, iban?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin ismini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newName]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    changeTeacherName(teacherId?: number, newName?: string, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin şifresini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {string} [newPassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    changeTeacherPassword(teacherId?: number, reason?: string, newPassword?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin telefon numarasını değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newPhoneNumber]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    changeTeacherPhoneNumber(teacherId?: number, newPhoneNumber?: string, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin profil fotoğrafını değiştirir.
     * @param {File} [newProfilePicture]
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    changeTeacherProfilePicture(newProfilePicture?: File, teacherId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<TeacherAdministrationCommandsChangeProfilePictureCommandResult>;
    /**
     *
     * @summary Bir öğretmenin uzmanlıklarını değiştirir.
     * @param {TeacherAdministrationCommandsSpecalities} [teacherAdministrationCommandsSpecalities]
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    changeTeacherSpecalities(teacherAdministrationCommandsSpecalities?: TeacherAdministrationCommandsSpecalities, teacherId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin görünen puanını değiştirir. 0.5 ve katları olması gerekir. Şayet 0 olarak ayarlanırsa gerçek puanı gösterilir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {number} [newRate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    changeTeacherVisibleRate(teacherId?: number, reason?: string, newRate?: number, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin youtube video url\'sini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {string} [newYoutubeUrl]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    changeTeacherYoutubeUrl(teacherId?: number, reason?: string, newYoutubeUrl?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin hesabını siteden siler.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    deleteTeacherAccountDueGDPR(teacherId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğretmenin detayını getirir.
     * @param {number} teacherId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    getTeacherDetailsForAdministration(teacherId: number, options?: AxiosRequestConfig): AxiosPromise<TeacherAdministrationQueriesGetDetailsQueryResult>;
    /**
     *
     * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    listTeacherSalaries(searchKeyword?: string, page?: number, options?: AxiosRequestConfig): AxiosPromise<TeacherAdministrationQueriesListSalariesQueryResult>;
    /**
     *
     * @summary Sistemdeki öğretmenleri listeler
     * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
     * @param {string} [approvementState] Öğretmenin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_TEACHERS: Sadece onaylı öğretmenleri listeye dahil eder.  ONLY_UNAPPROVED_TEACHERS: Sadece onaysız öğretmenleri listeye dahil eder.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    listTeachersForManagement(searchKeyword?: string, approvementState?: string, page?: number, options?: AxiosRequestConfig): AxiosPromise<TeacherAdministrationQueriesListQueryResult>;
    /**
     *
     * @summary Bir öğretmenin hesabını kabul etmez. Öğretmene sebebiyle birlikte düzenleme bildirimi atılabilir.  Hesap silinebilir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    rejectTeacherAccount(teacherId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğretmenin profil fotoğrafını kabul etmez.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    rejectTeacherProfilePicture(teacherId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @param {number} [teacherSalariesId]
     * @param {string} [paymentStatus]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    salariesStatusUpdate(teacherSalariesId?: number, paymentStatus?: string, options?: AxiosRequestConfig): AxiosPromise<string>;
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [hourlyRate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    teacherHourlyRate(teacherId?: number, hourlyRate?: number, options?: AxiosRequestConfig): AxiosPromise<string>;
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [mints]
     * @param {number} [hours]
     * @param {number} [hourlyRate]
     * @param {number} [amount]
     * @param {string} [paymentStatus]
     * @param {string} [appointmentDetail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    teacherPay(teacherId?: number, mints?: number, hours?: number, hourlyRate?: number, amount?: number, paymentStatus?: string, appointmentDetail?: string, options?: AxiosRequestConfig): AxiosPromise<string>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    teachersDropdown(options?: AxiosRequestConfig): AxiosPromise<Array<AdvancerCommonDropDownModelIntCustom>>;
    /**
     *
     * @summary Bir öğretmeni siteden yasaklamasını kaldırır.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    unBanTeacher(teacherId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApiInterface
     */
    zoomCreateAccount(teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<string>;
}
/**
 * TeacherAdministrationApi - object-oriented interface
 * @export
 * @class TeacherAdministrationApi
 * @extends {BaseAPI}
 */
export declare class TeacherAdministrationApi extends BaseAPI implements TeacherAdministrationApiInterface {
    /**
     *
     * @summary Bir öğretmenin hesabını onaylar. Onaylanan öğretmen artık sisteme giriş yapabilir.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    approveTeacherAccount(teacherId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Bir öğretmenin profil fotoğrafını onaylar.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    approveTeacherProfilePicture(teacherId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Bir öğretmeni siteden yasaklar. Artık o hesap ve öğretmenin kullandığı ip\'ler siteye giriş yapamaz.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    banTeacher(teacherId?: number, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Bir öğretmenin açıklamasını değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newDescription]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    changeTeacherDescription(teacherId?: number, newDescription?: string, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Bir öğretmenin e-posta adresini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newEmail]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    changeTeacherEmail(teacherId?: number, newEmail?: string, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Bir öğretmenin iban bilgilerini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {string} [bankName]
     * @param {string} [accountHolderName]
     * @param {string} [iban]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    changeTeacherIbanDetails(teacherId?: number, reason?: string, bankName?: string, accountHolderName?: string, iban?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Bir öğretmenin ismini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newName]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    changeTeacherName(teacherId?: number, newName?: string, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Bir öğretmenin şifresini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {string} [newPassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    changeTeacherPassword(teacherId?: number, reason?: string, newPassword?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Bir öğretmenin telefon numarasını değiştirir.
     * @param {number} [teacherId]
     * @param {string} [newPhoneNumber]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    changeTeacherPhoneNumber(teacherId?: number, newPhoneNumber?: string, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Bir öğretmenin profil fotoğrafını değiştirir.
     * @param {File} [newProfilePicture]
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    changeTeacherProfilePicture(newProfilePicture?: File, teacherId?: number, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TeacherAdministrationCommandsChangeProfilePictureCommandResult, any>>;
    /**
     *
     * @summary Bir öğretmenin uzmanlıklarını değiştirir.
     * @param {TeacherAdministrationCommandsSpecalities} [teacherAdministrationCommandsSpecalities]
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    changeTeacherSpecalities(teacherAdministrationCommandsSpecalities?: TeacherAdministrationCommandsSpecalities, teacherId?: number, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Bir öğretmenin görünen puanını değiştirir. 0.5 ve katları olması gerekir. Şayet 0 olarak ayarlanırsa gerçek puanı gösterilir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {number} [newRate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    changeTeacherVisibleRate(teacherId?: number, reason?: string, newRate?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Bir öğretmenin youtube video url\'sini değiştirir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {string} [newYoutubeUrl]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    changeTeacherYoutubeUrl(teacherId?: number, reason?: string, newYoutubeUrl?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Bir öğretmenin hesabını siteden siler.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    deleteTeacherAccountDueGDPR(teacherId?: number, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğretmenin detayını getirir.
     * @param {number} teacherId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    getTeacherDetailsForAdministration(teacherId: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TeacherAdministrationQueriesGetDetailsQueryResult, any>>;
    /**
     *
     * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    listTeacherSalaries(searchKeyword?: string, page?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TeacherAdministrationQueriesListSalariesQueryResult, any>>;
    /**
     *
     * @summary Sistemdeki öğretmenleri listeler
     * @param {string} [searchKeyword] Öğretmen ismiyle arama yapmayı sağlar.
     * @param {string} [approvementState] Öğretmenin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_TEACHERS: Sadece onaylı öğretmenleri listeye dahil eder.  ONLY_UNAPPROVED_TEACHERS: Sadece onaysız öğretmenleri listeye dahil eder.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    listTeachersForManagement(searchKeyword?: string, approvementState?: string, page?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TeacherAdministrationQueriesListQueryResult, any>>;
    /**
     *
     * @summary Bir öğretmenin hesabını kabul etmez. Öğretmene sebebiyle birlikte düzenleme bildirimi atılabilir.  Hesap silinebilir.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    rejectTeacherAccount(teacherId?: number, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Bir öğretmenin profil fotoğrafını kabul etmez.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    rejectTeacherProfilePicture(teacherId?: number, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @param {number} [teacherSalariesId]
     * @param {string} [paymentStatus]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    salariesStatusUpdate(teacherSalariesId?: number, paymentStatus?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [hourlyRate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    teacherHourlyRate(teacherId?: number, hourlyRate?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @param {number} [teacherId]
     * @param {number} [mints]
     * @param {number} [hours]
     * @param {number} [hourlyRate]
     * @param {number} [amount]
     * @param {string} [paymentStatus]
     * @param {string} [appointmentDetail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    teacherPay(teacherId?: number, mints?: number, hours?: number, hourlyRate?: number, amount?: number, paymentStatus?: string, appointmentDetail?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    teachersDropdown(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AdvancerCommonDropDownModelIntCustom[], any>>;
    /**
     *
     * @summary Bir öğretmeni siteden yasaklamasını kaldırır.
     * @param {number} [teacherId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    unBanTeacher(teacherId?: number, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherAdministrationApi
     */
    zoomCreateAccount(teacherId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
}

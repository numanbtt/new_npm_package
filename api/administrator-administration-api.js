/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, setBearerAuthToObject, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * AdministratorAdministrationApi - axios parameter creator
 * @export
 */
export const AdministratorAdministrationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Sistem yöneticisinin email adresini değiştirmeyi sağlar
         * @param {number} [administratorId]
         * @param {string} [administratorEmail]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAdministratorEmail: (administratorId, administratorEmail, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/AdministratorAdministration/ChangeAdministratorEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (administratorId !== undefined) {
                localVarQueryParameter['AdministratorId'] = administratorId;
            }
            if (administratorEmail !== undefined) {
                localVarQueryParameter['AdministratorEmail'] = administratorEmail;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Sistem yöneticisinin şifresini değiştirmeyi sağlar
         * @param {number} [administratorId]
         * @param {string} [administratorPassword]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAdministratorPassword: (administratorId, administratorPassword, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/AdministratorAdministration/ChangeAdministratorPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (administratorId !== undefined) {
                localVarQueryParameter['AdministratorId'] = administratorId;
            }
            if (administratorPassword !== undefined) {
                localVarQueryParameter['AdministratorPassword'] = administratorPassword;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Sistem yöneticisi eklemeyi sağlar
         * @param {string} [name]
         * @param {string} [eMail]
         * @param {string} [password]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdministrator: (name, eMail, password, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/AdministratorAdministration/CreateAdministrator`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }
            if (eMail !== undefined) {
                localVarQueryParameter['EMail'] = eMail;
            }
            if (password !== undefined) {
                localVarQueryParameter['Password'] = password;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Sistem yöneticisi silmeyi sağlar
         * @param {number} [administratorId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdministrator: (administratorId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/AdministratorAdministration/DeleteAdministrator`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (administratorId !== undefined) {
                localVarQueryParameter['AdministratorId'] = administratorId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Sistem yöneticilerini listelemeyi sağlar
         * @param {number} [page]
         * @param {number} [itemPerPage]
         * @param {string} [searchKeyword] Admin listesinde arama yapılacak kelimeyi barındırır
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdministrators: (page, itemPerPage, searchKeyword, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/AdministratorAdministration/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }
            if (itemPerPage !== undefined) {
                localVarQueryParameter['ItemPerPage'] = itemPerPage;
            }
            if (searchKeyword !== undefined) {
                localVarQueryParameter['SearchKeyword'] = searchKeyword;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AdministratorAdministrationApi - functional programming interface
 * @export
 */
export const AdministratorAdministrationApiFp = function (configuration) {
    const localVarAxiosParamCreator = AdministratorAdministrationApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Sistem yöneticisinin email adresini değiştirmeyi sağlar
         * @param {number} [administratorId]
         * @param {string} [administratorEmail]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAdministratorEmail(administratorId, administratorEmail, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeAdministratorEmail(administratorId, administratorEmail, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Sistem yöneticisinin şifresini değiştirmeyi sağlar
         * @param {number} [administratorId]
         * @param {string} [administratorPassword]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAdministratorPassword(administratorId, administratorPassword, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeAdministratorPassword(administratorId, administratorPassword, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Sistem yöneticisi eklemeyi sağlar
         * @param {string} [name]
         * @param {string} [eMail]
         * @param {string} [password]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdministrator(name, eMail, password, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAdministrator(name, eMail, password, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Sistem yöneticisi silmeyi sağlar
         * @param {number} [administratorId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdministrator(administratorId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteAdministrator(administratorId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Sistem yöneticilerini listelemeyi sağlar
         * @param {number} [page]
         * @param {number} [itemPerPage]
         * @param {string} [searchKeyword] Admin listesinde arama yapılacak kelimeyi barındırır
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdministrators(page, itemPerPage, searchKeyword, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listAdministrators(page, itemPerPage, searchKeyword, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * AdministratorAdministrationApi - factory interface
 * @export
 */
export const AdministratorAdministrationApiFactory = function (configuration, basePath, axios) {
    const localVarFp = AdministratorAdministrationApiFp(configuration);
    return {
        /**
         *
         * @summary Sistem yöneticisinin email adresini değiştirmeyi sağlar
         * @param {number} [administratorId]
         * @param {string} [administratorEmail]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAdministratorEmail(administratorId, administratorEmail, options) {
            return localVarFp.changeAdministratorEmail(administratorId, administratorEmail, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Sistem yöneticisinin şifresini değiştirmeyi sağlar
         * @param {number} [administratorId]
         * @param {string} [administratorPassword]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeAdministratorPassword(administratorId, administratorPassword, options) {
            return localVarFp.changeAdministratorPassword(administratorId, administratorPassword, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Sistem yöneticisi eklemeyi sağlar
         * @param {string} [name]
         * @param {string} [eMail]
         * @param {string} [password]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAdministrator(name, eMail, password, options) {
            return localVarFp.createAdministrator(name, eMail, password, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Sistem yöneticisi silmeyi sağlar
         * @param {number} [administratorId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdministrator(administratorId, options) {
            return localVarFp.deleteAdministrator(administratorId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Sistem yöneticilerini listelemeyi sağlar
         * @param {number} [page]
         * @param {number} [itemPerPage]
         * @param {string} [searchKeyword] Admin listesinde arama yapılacak kelimeyi barındırır
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdministrators(page, itemPerPage, searchKeyword, options) {
            return localVarFp.listAdministrators(page, itemPerPage, searchKeyword, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AdministratorAdministrationApi - object-oriented interface
 * @export
 * @class AdministratorAdministrationApi
 * @extends {BaseAPI}
 */
export class AdministratorAdministrationApi extends BaseAPI {
    /**
     *
     * @summary Sistem yöneticisinin email adresini değiştirmeyi sağlar
     * @param {number} [administratorId]
     * @param {string} [administratorEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorAdministrationApi
     */
    changeAdministratorEmail(administratorId, administratorEmail, options) {
        return AdministratorAdministrationApiFp(this.configuration).changeAdministratorEmail(administratorId, administratorEmail, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Sistem yöneticisinin şifresini değiştirmeyi sağlar
     * @param {number} [administratorId]
     * @param {string} [administratorPassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorAdministrationApi
     */
    changeAdministratorPassword(administratorId, administratorPassword, options) {
        return AdministratorAdministrationApiFp(this.configuration).changeAdministratorPassword(administratorId, administratorPassword, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Sistem yöneticisi eklemeyi sağlar
     * @param {string} [name]
     * @param {string} [eMail]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorAdministrationApi
     */
    createAdministrator(name, eMail, password, options) {
        return AdministratorAdministrationApiFp(this.configuration).createAdministrator(name, eMail, password, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Sistem yöneticisi silmeyi sağlar
     * @param {number} [administratorId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorAdministrationApi
     */
    deleteAdministrator(administratorId, options) {
        return AdministratorAdministrationApiFp(this.configuration).deleteAdministrator(administratorId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Sistem yöneticilerini listelemeyi sağlar
     * @param {number} [page]
     * @param {number} [itemPerPage]
     * @param {string} [searchKeyword] Admin listesinde arama yapılacak kelimeyi barındırır
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdministratorAdministrationApi
     */
    listAdministrators(page, itemPerPage, searchKeyword, options) {
        return AdministratorAdministrationApiFp(this.configuration).listAdministrators(page, itemPerPage, searchKeyword, options).then((request) => request(this.axios, this.basePath));
    }
}

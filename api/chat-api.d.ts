/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { ChatCommandsReportChatAsStudentCommandResult } from '../models';
import { ChatCommandsReportChatAsTeacherCommandResult } from '../models';
import { ChatQueriesGetChatJwtQueryResult } from '../models';
import { ChatQueriesGetUserInformationsQueryResult } from '../models';
/**
 * ChatApi - axios parameter creator
 * @export
 */
export declare const ChatApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Chat sistemine giriş yapılabilmesi için sadece Fosh Chat\'te kullanılabilen özel bir jwt üretir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChatJwt: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Chat sistemi sadece kullanıcı idlerini bilmekte. Bu yüzden kullanıcının diğer detaylarını bu komut ile çekeceğiz.
     * @param {Array<string>} userIdList Bilgileri öğrenilmek istenilen kullanıcıların guid id listesi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserInformations: (userIdList: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğrenci olarak chat\'i şikayet etmeye yarar.
     * @param {string} [chatSessionId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportChatAsStudent: (chatSessionId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmen olarak chat\'i şikayet etmeye yarar.
     * @param {string} [chatSessionId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportChatAsTeacher: (chatSessionId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ChatApi - functional programming interface
 * @export
 */
export declare const ChatApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Chat sistemine giriş yapılabilmesi için sadece Fosh Chat\'te kullanılabilen özel bir jwt üretir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChatJwt(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatQueriesGetChatJwtQueryResult>>;
    /**
     *
     * @summary Chat sistemi sadece kullanıcı idlerini bilmekte. Bu yüzden kullanıcının diğer detaylarını bu komut ile çekeceğiz.
     * @param {Array<string>} userIdList Bilgileri öğrenilmek istenilen kullanıcıların guid id listesi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserInformations(userIdList: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatQueriesGetUserInformationsQueryResult>>;
    /**
     *
     * @summary Öğrenci olarak chat\'i şikayet etmeye yarar.
     * @param {string} [chatSessionId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportChatAsStudent(chatSessionId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatCommandsReportChatAsStudentCommandResult>>;
    /**
     *
     * @summary Öğretmen olarak chat\'i şikayet etmeye yarar.
     * @param {string} [chatSessionId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportChatAsTeacher(chatSessionId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChatCommandsReportChatAsTeacherCommandResult>>;
};
/**
 * ChatApi - factory interface
 * @export
 */
export declare const ChatApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Chat sistemine giriş yapılabilmesi için sadece Fosh Chat\'te kullanılabilen özel bir jwt üretir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChatJwt(options?: any): AxiosPromise<ChatQueriesGetChatJwtQueryResult>;
    /**
     *
     * @summary Chat sistemi sadece kullanıcı idlerini bilmekte. Bu yüzden kullanıcının diğer detaylarını bu komut ile çekeceğiz.
     * @param {Array<string>} userIdList Bilgileri öğrenilmek istenilen kullanıcıların guid id listesi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserInformations(userIdList: Array<string>, options?: any): AxiosPromise<ChatQueriesGetUserInformationsQueryResult>;
    /**
     *
     * @summary Öğrenci olarak chat\'i şikayet etmeye yarar.
     * @param {string} [chatSessionId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportChatAsStudent(chatSessionId?: string, options?: any): AxiosPromise<ChatCommandsReportChatAsStudentCommandResult>;
    /**
     *
     * @summary Öğretmen olarak chat\'i şikayet etmeye yarar.
     * @param {string} [chatSessionId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportChatAsTeacher(chatSessionId?: string, options?: any): AxiosPromise<ChatCommandsReportChatAsTeacherCommandResult>;
};
/**
 * ChatApi - interface
 * @export
 * @interface ChatApi
 */
export interface ChatApiInterface {
    /**
     *
     * @summary Chat sistemine giriş yapılabilmesi için sadece Fosh Chat\'te kullanılabilen özel bir jwt üretir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    getChatJwt(options?: AxiosRequestConfig): AxiosPromise<ChatQueriesGetChatJwtQueryResult>;
    /**
     *
     * @summary Chat sistemi sadece kullanıcı idlerini bilmekte. Bu yüzden kullanıcının diğer detaylarını bu komut ile çekeceğiz.
     * @param {Array<string>} userIdList Bilgileri öğrenilmek istenilen kullanıcıların guid id listesi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    getUserInformations(userIdList: Array<string>, options?: AxiosRequestConfig): AxiosPromise<ChatQueriesGetUserInformationsQueryResult>;
    /**
     *
     * @summary Öğrenci olarak chat\'i şikayet etmeye yarar.
     * @param {string} [chatSessionId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    reportChatAsStudent(chatSessionId?: string, options?: AxiosRequestConfig): AxiosPromise<ChatCommandsReportChatAsStudentCommandResult>;
    /**
     *
     * @summary Öğretmen olarak chat\'i şikayet etmeye yarar.
     * @param {string} [chatSessionId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    reportChatAsTeacher(chatSessionId?: string, options?: AxiosRequestConfig): AxiosPromise<ChatCommandsReportChatAsTeacherCommandResult>;
}
/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export declare class ChatApi extends BaseAPI implements ChatApiInterface {
    /**
     *
     * @summary Chat sistemine giriş yapılabilmesi için sadece Fosh Chat\'te kullanılabilen özel bir jwt üretir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    getChatJwt(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ChatQueriesGetChatJwtQueryResult, any>>;
    /**
     *
     * @summary Chat sistemi sadece kullanıcı idlerini bilmekte. Bu yüzden kullanıcının diğer detaylarını bu komut ile çekeceğiz.
     * @param {Array<string>} userIdList Bilgileri öğrenilmek istenilen kullanıcıların guid id listesi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    getUserInformations(userIdList: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ChatQueriesGetUserInformationsQueryResult, any>>;
    /**
     *
     * @summary Öğrenci olarak chat\'i şikayet etmeye yarar.
     * @param {string} [chatSessionId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    reportChatAsStudent(chatSessionId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ChatCommandsReportChatAsStudentCommandResult, any>>;
    /**
     *
     * @summary Öğretmen olarak chat\'i şikayet etmeye yarar.
     * @param {string} [chatSessionId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    reportChatAsTeacher(chatSessionId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ChatCommandsReportChatAsTeacherCommandResult, any>>;
}

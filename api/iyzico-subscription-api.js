/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * IyzicoSubscriptionApi - axios parameter creator
 * @export
 */
export const IyzicoSubscriptionApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {IyzicoSubscriptionCommandsCreateCommand} [iyzicoSubscriptionCommandsCreateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription: (iyzicoSubscriptionCommandsCreateCommand, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/IyzicoSubscription/Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(iyzicoSubscriptionCommandsCreateCommand, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {number} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByIdSubscriptionPlan: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/IyzicoSubscription/DeleteSubscriptionPlan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {number} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsByIdSubscriptionPlan: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/IyzicoSubscription/GetDetailsById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownPackageDurationOptions: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/IyzicoSubscription/GetDropDownPackageDurationOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownSubscriptionDayOptions: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/IyzicoSubscription/GetDropDownSubscriptionDayOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownSubscriptionMinutesPerDayOptions: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/IyzicoSubscription/GetDropDownSubscriptionMinutesPerDayOptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {number} [page]
         * @param {number} [itemPerPage]
         * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionPlan: (page, itemPerPage, searchKeyword, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/IyzicoSubscription/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }
            if (itemPerPage !== undefined) {
                localVarQueryParameter['ItemPerPage'] = itemPerPage;
            }
            if (searchKeyword !== undefined) {
                localVarQueryParameter['SearchKeyword'] = searchKeyword;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {IyzicoSubscriptionCommandsUpdateCommand} [iyzicoSubscriptionCommandsUpdateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription: (iyzicoSubscriptionCommandsUpdateCommand, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/IyzicoSubscription/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(iyzicoSubscriptionCommandsUpdateCommand, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * IyzicoSubscriptionApi - functional programming interface
 * @export
 */
export const IyzicoSubscriptionApiFp = function (configuration) {
    const localVarAxiosParamCreator = IyzicoSubscriptionApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {IyzicoSubscriptionCommandsCreateCommand} [iyzicoSubscriptionCommandsCreateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription(iyzicoSubscriptionCommandsCreateCommand, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createSubscription(iyzicoSubscriptionCommandsCreateCommand, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {number} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByIdSubscriptionPlan(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteByIdSubscriptionPlan(id, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {number} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsByIdSubscriptionPlan(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDetailsByIdSubscriptionPlan(id, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownPackageDurationOptions(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDropDownPackageDurationOptions(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownSubscriptionDayOptions(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDropDownSubscriptionDayOptions(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownSubscriptionMinutesPerDayOptions(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getDropDownSubscriptionMinutesPerDayOptions(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {number} [page]
         * @param {number} [itemPerPage]
         * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionPlan(page, itemPerPage, searchKeyword, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listSubscriptionPlan(page, itemPerPage, searchKeyword, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {IyzicoSubscriptionCommandsUpdateCommand} [iyzicoSubscriptionCommandsUpdateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription(iyzicoSubscriptionCommandsUpdateCommand, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateSubscription(iyzicoSubscriptionCommandsUpdateCommand, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * IyzicoSubscriptionApi - factory interface
 * @export
 */
export const IyzicoSubscriptionApiFactory = function (configuration, basePath, axios) {
    const localVarFp = IyzicoSubscriptionApiFp(configuration);
    return {
        /**
         *
         * @param {IyzicoSubscriptionCommandsCreateCommand} [iyzicoSubscriptionCommandsCreateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription(iyzicoSubscriptionCommandsCreateCommand, options) {
            return localVarFp.createSubscription(iyzicoSubscriptionCommandsCreateCommand, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteByIdSubscriptionPlan(id, options) {
            return localVarFp.deleteByIdSubscriptionPlan(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} [id]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetailsByIdSubscriptionPlan(id, options) {
            return localVarFp.getDetailsByIdSubscriptionPlan(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownPackageDurationOptions(options) {
            return localVarFp.getDropDownPackageDurationOptions(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownSubscriptionDayOptions(options) {
            return localVarFp.getDropDownSubscriptionDayOptions(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDropDownSubscriptionMinutesPerDayOptions(options) {
            return localVarFp.getDropDownSubscriptionMinutesPerDayOptions(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {number} [page]
         * @param {number} [itemPerPage]
         * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionPlan(page, itemPerPage, searchKeyword, options) {
            return localVarFp.listSubscriptionPlan(page, itemPerPage, searchKeyword, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {IyzicoSubscriptionCommandsUpdateCommand} [iyzicoSubscriptionCommandsUpdateCommand]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription(iyzicoSubscriptionCommandsUpdateCommand, options) {
            return localVarFp.updateSubscription(iyzicoSubscriptionCommandsUpdateCommand, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * IyzicoSubscriptionApi - object-oriented interface
 * @export
 * @class IyzicoSubscriptionApi
 * @extends {BaseAPI}
 */
export class IyzicoSubscriptionApi extends BaseAPI {
    /**
     *
     * @param {IyzicoSubscriptionCommandsCreateCommand} [iyzicoSubscriptionCommandsCreateCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApi
     */
    createSubscription(iyzicoSubscriptionCommandsCreateCommand, options) {
        return IyzicoSubscriptionApiFp(this.configuration).createSubscription(iyzicoSubscriptionCommandsCreateCommand, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApi
     */
    deleteByIdSubscriptionPlan(id, options) {
        return IyzicoSubscriptionApiFp(this.configuration).deleteByIdSubscriptionPlan(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApi
     */
    getDetailsByIdSubscriptionPlan(id, options) {
        return IyzicoSubscriptionApiFp(this.configuration).getDetailsByIdSubscriptionPlan(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApi
     */
    getDropDownPackageDurationOptions(options) {
        return IyzicoSubscriptionApiFp(this.configuration).getDropDownPackageDurationOptions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApi
     */
    getDropDownSubscriptionDayOptions(options) {
        return IyzicoSubscriptionApiFp(this.configuration).getDropDownSubscriptionDayOptions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApi
     */
    getDropDownSubscriptionMinutesPerDayOptions(options) {
        return IyzicoSubscriptionApiFp(this.configuration).getDropDownSubscriptionMinutesPerDayOptions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {number} [page]
     * @param {number} [itemPerPage]
     * @param {string} [searchKeyword] Film kategorisinde arama yapılacak kelime
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApi
     */
    listSubscriptionPlan(page, itemPerPage, searchKeyword, options) {
        return IyzicoSubscriptionApiFp(this.configuration).listSubscriptionPlan(page, itemPerPage, searchKeyword, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {IyzicoSubscriptionCommandsUpdateCommand} [iyzicoSubscriptionCommandsUpdateCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IyzicoSubscriptionApi
     */
    updateSubscription(iyzicoSubscriptionCommandsUpdateCommand, options) {
        return IyzicoSubscriptionApiFp(this.configuration).updateSubscription(iyzicoSubscriptionCommandsUpdateCommand, options).then((request) => request(this.axios, this.basePath));
    }
}

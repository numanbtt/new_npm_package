/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { LiveCommandsDirectCallCommandResult } from '../models';
import { LiveCommandsJoinToRoomAsStudentCommandResult } from '../models';
import { LiveCommandsJoinToRoomAsTeacherCommandResult } from '../models';
import { LiveCommandsRequestFreeCallCommandResult } from '../models';
import { LiveQueriesGetCallQueryResult } from '../models';
import { LiveQueriesGetRoomInfoQueryResult } from '../models';
/**
 * LiveApi - axios parameter creator
 * @export
 */
export declare const LiveApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Öğrenci, ücretli görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    directCall: (teacherId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Arama bilgilerini çekmeyi sağlar.
     * @param {number} callId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCall: (callId: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Canlı yayın odasının bilgilerini çekmeyi sağlar.
     * @param {string} roomId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoomInfo: (roomId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğrencinin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
     * @param {number} [appointmentId]
     * @param {boolean} [isScreenShare]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    joinToRoomAsStudent: (appointmentId?: number, isScreenShare?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmenin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
     * @param {number} [appointmentId]
     * @param {boolean} [isScreenShare]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    joinToRoomAsTeacher: (appointmentId?: number, isScreenShare?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğrencinin canlı yayından ayrılmasını sağlar.
     * @param {number} [appointmentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveFromRoomAsStudent: (appointmentId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğretmenin canlı yayından ayrılmasını sağlar.
     * @param {number} [appointmentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveFromRoomAsTeacher: (appointmentId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Öğrenci, ücretsiz görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestFreeCall: (teacherId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * LiveApi - functional programming interface
 * @export
 */
export declare const LiveApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Öğrenci, ücretli görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    directCall(teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveCommandsDirectCallCommandResult>>;
    /**
     *
     * @summary Arama bilgilerini çekmeyi sağlar.
     * @param {number} callId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCall(callId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveQueriesGetCallQueryResult>>;
    /**
     *
     * @summary Canlı yayın odasının bilgilerini çekmeyi sağlar.
     * @param {string} roomId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoomInfo(roomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveQueriesGetRoomInfoQueryResult>>;
    /**
     *
     * @summary Öğrencinin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
     * @param {number} [appointmentId]
     * @param {boolean} [isScreenShare]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    joinToRoomAsStudent(appointmentId?: number, isScreenShare?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveCommandsJoinToRoomAsStudentCommandResult>>;
    /**
     *
     * @summary Öğretmenin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
     * @param {number} [appointmentId]
     * @param {boolean} [isScreenShare]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    joinToRoomAsTeacher(appointmentId?: number, isScreenShare?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveCommandsJoinToRoomAsTeacherCommandResult>>;
    /**
     *
     * @summary Öğrencinin canlı yayından ayrılmasını sağlar.
     * @param {number} [appointmentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveFromRoomAsStudent(appointmentId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğretmenin canlı yayından ayrılmasını sağlar.
     * @param {number} [appointmentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveFromRoomAsTeacher(appointmentId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Öğrenci, ücretsiz görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestFreeCall(teacherId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveCommandsRequestFreeCallCommandResult>>;
};
/**
 * LiveApi - factory interface
 * @export
 */
export declare const LiveApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Öğrenci, ücretli görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    directCall(teacherId?: number, options?: any): AxiosPromise<LiveCommandsDirectCallCommandResult>;
    /**
     *
     * @summary Arama bilgilerini çekmeyi sağlar.
     * @param {number} callId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCall(callId: number, options?: any): AxiosPromise<LiveQueriesGetCallQueryResult>;
    /**
     *
     * @summary Canlı yayın odasının bilgilerini çekmeyi sağlar.
     * @param {string} roomId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoomInfo(roomId: string, options?: any): AxiosPromise<LiveQueriesGetRoomInfoQueryResult>;
    /**
     *
     * @summary Öğrencinin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
     * @param {number} [appointmentId]
     * @param {boolean} [isScreenShare]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    joinToRoomAsStudent(appointmentId?: number, isScreenShare?: boolean, options?: any): AxiosPromise<LiveCommandsJoinToRoomAsStudentCommandResult>;
    /**
     *
     * @summary Öğretmenin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
     * @param {number} [appointmentId]
     * @param {boolean} [isScreenShare]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    joinToRoomAsTeacher(appointmentId?: number, isScreenShare?: boolean, options?: any): AxiosPromise<LiveCommandsJoinToRoomAsTeacherCommandResult>;
    /**
     *
     * @summary Öğrencinin canlı yayından ayrılmasını sağlar.
     * @param {number} [appointmentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveFromRoomAsStudent(appointmentId?: number, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğretmenin canlı yayından ayrılmasını sağlar.
     * @param {number} [appointmentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveFromRoomAsTeacher(appointmentId?: number, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Öğrenci, ücretsiz görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestFreeCall(teacherId?: number, options?: any): AxiosPromise<LiveCommandsRequestFreeCallCommandResult>;
};
/**
 * LiveApi - interface
 * @export
 * @interface LiveApi
 */
export interface LiveApiInterface {
    /**
     *
     * @summary Öğrenci, ücretli görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApiInterface
     */
    directCall(teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<LiveCommandsDirectCallCommandResult>;
    /**
     *
     * @summary Arama bilgilerini çekmeyi sağlar.
     * @param {number} callId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApiInterface
     */
    getCall(callId: number, options?: AxiosRequestConfig): AxiosPromise<LiveQueriesGetCallQueryResult>;
    /**
     *
     * @summary Canlı yayın odasının bilgilerini çekmeyi sağlar.
     * @param {string} roomId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApiInterface
     */
    getRoomInfo(roomId: string, options?: AxiosRequestConfig): AxiosPromise<LiveQueriesGetRoomInfoQueryResult>;
    /**
     *
     * @summary Öğrencinin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
     * @param {number} [appointmentId]
     * @param {boolean} [isScreenShare]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApiInterface
     */
    joinToRoomAsStudent(appointmentId?: number, isScreenShare?: boolean, options?: AxiosRequestConfig): AxiosPromise<LiveCommandsJoinToRoomAsStudentCommandResult>;
    /**
     *
     * @summary Öğretmenin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
     * @param {number} [appointmentId]
     * @param {boolean} [isScreenShare]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApiInterface
     */
    joinToRoomAsTeacher(appointmentId?: number, isScreenShare?: boolean, options?: AxiosRequestConfig): AxiosPromise<LiveCommandsJoinToRoomAsTeacherCommandResult>;
    /**
     *
     * @summary Öğrencinin canlı yayından ayrılmasını sağlar.
     * @param {number} [appointmentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApiInterface
     */
    leaveFromRoomAsStudent(appointmentId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğretmenin canlı yayından ayrılmasını sağlar.
     * @param {number} [appointmentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApiInterface
     */
    leaveFromRoomAsTeacher(appointmentId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Öğrenci, ücretsiz görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApiInterface
     */
    requestFreeCall(teacherId?: number, options?: AxiosRequestConfig): AxiosPromise<LiveCommandsRequestFreeCallCommandResult>;
}
/**
 * LiveApi - object-oriented interface
 * @export
 * @class LiveApi
 * @extends {BaseAPI}
 */
export declare class LiveApi extends BaseAPI implements LiveApiInterface {
    /**
     *
     * @summary Öğrenci, ücretli görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    directCall(teacherId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LiveCommandsDirectCallCommandResult, any>>;
    /**
     *
     * @summary Arama bilgilerini çekmeyi sağlar.
     * @param {number} callId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    getCall(callId: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LiveQueriesGetCallQueryResult, any>>;
    /**
     *
     * @summary Canlı yayın odasının bilgilerini çekmeyi sağlar.
     * @param {string} roomId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    getRoomInfo(roomId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LiveQueriesGetRoomInfoQueryResult, any>>;
    /**
     *
     * @summary Öğrencinin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
     * @param {number} [appointmentId]
     * @param {boolean} [isScreenShare]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    joinToRoomAsStudent(appointmentId?: number, isScreenShare?: boolean, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LiveCommandsJoinToRoomAsStudentCommandResult, any>>;
    /**
     *
     * @summary Öğretmenin vakti gelmiş randevusuna katılım gerçekleştirmesini sağlar.
     * @param {number} [appointmentId]
     * @param {boolean} [isScreenShare]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    joinToRoomAsTeacher(appointmentId?: number, isScreenShare?: boolean, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LiveCommandsJoinToRoomAsTeacherCommandResult, any>>;
    /**
     *
     * @summary Öğrencinin canlı yayından ayrılmasını sağlar.
     * @param {number} [appointmentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    leaveFromRoomAsStudent(appointmentId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğretmenin canlı yayından ayrılmasını sağlar.
     * @param {number} [appointmentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    leaveFromRoomAsTeacher(appointmentId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Öğrenci, ücretsiz görüşme talebinde bulunur. Görüşme başlangıcı ile birlikte oda kayıt altına alınmalıdır.
     * @param {number} [teacherId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiveApi
     */
    requestFreeCall(teacherId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LiveCommandsRequestFreeCallCommandResult, any>>;
}

/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * StudentApi - axios parameter creator
 * @export
 */
export const StudentApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Öğretmenin öğrenciyi engellemesini sağlar.
         * @param {number} [studentId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockStudent: (studentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Student/Block`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğrencinin kendi e-posta adresini değiştirebilmesini sağlar.
         * @param {string} [newEmail]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyEmailAddress: (newEmail, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Student/ChangeMyEmailAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (newEmail !== undefined) {
                localVarQueryParameter['NewEmail'] = newEmail;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğrencinin kendi ismini değiştirebilmesini sağlar.
         * @param {string} [newName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyName: (newName, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Student/ChangeMyName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (newName !== undefined) {
                localVarQueryParameter['NewName'] = newName;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğrencinin kendi telefon numarasını değiştirebilmesini sağlar.
         * @param {string} [newPhone]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyPhoneNumber: (newPhone, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Student/ChangeMyPhoneNumber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (newPhone !== undefined) {
                localVarQueryParameter['NewPhone'] = newPhone;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğrencinin hesabının silme isteğini admine mail olarak iletir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMyAccountAsStudent: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Student/DeleteMyAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğrencinin kendi detayını getirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyDetailsAsStudent: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Student/GetMyDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğrencinin detayını getirir.
         * @param {number} studentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentDetails: (studentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('getStudentDetails', 'studentId', studentId);
            const localVarPath = `/api/Student/GetDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğrencinin dışa aktarılmaya hazır verilerini listeler.
         * @param {string} [lastCreatedAt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyExportsAsStudent: (lastCreatedAt, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Student/ListMyExports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (lastCreatedAt !== undefined) {
                localVarQueryParameter['LastCreatedAt'] = (lastCreatedAt instanceof Date) ?
                    lastCreatedAt.toISOString() :
                    lastCreatedAt;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} [nameSurname]
         * @param {string} [email]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginGoogleAsStudent: (nameSurname, email, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Student/LoginGoogleStudent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (nameSurname !== undefined) {
                localVarQueryParameter['NameSurname'] = nameSurname;
            }
            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Apple login işlevini öğrenci hesabı için gerçekleştirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithAppleAsStudent: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Student/LoginWithApple`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğrenci olarak giriş yapmayı sağlar.
         * @param {string} [email]
         * @param {string} [password]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithDirectAuthAsStudent: (email, password, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Student/LoginWithDirectAuth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }
            if (password !== undefined) {
                localVarQueryParameter['Password'] = password;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Facebook login işlevini öğrenci hesabı için gerçekleştirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithFacebookAsStudent: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Student/LoginWithFacebook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Google login işlevini öğrenci hesabı için gerçekleştirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithGoogleAsStudent: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Student/LoginWithGoogle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary E-posta ve şifre ile öğrenci kaydı yapılabilmesini sağlar.
         * @param {string} [nameSurname]
         * @param {string} [email]
         * @param {string} [phoneNumber]
         * @param {string} [password]
         * @param {string} [accent]
         * @param {string} [languageLevel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAsStudent: (nameSurname, email, phoneNumber, password, accent, languageLevel, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Student/Register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (nameSurname !== undefined) {
                localVarQueryParameter['NameSurname'] = nameSurname;
            }
            if (email !== undefined) {
                localVarQueryParameter['Email'] = email;
            }
            if (phoneNumber !== undefined) {
                localVarQueryParameter['PhoneNumber'] = phoneNumber;
            }
            if (password !== undefined) {
                localVarQueryParameter['Password'] = password;
            }
            if (accent !== undefined) {
                localVarQueryParameter['Accent'] = accent;
            }
            if (languageLevel !== undefined) {
                localVarQueryParameter['LanguageLevel'] = languageLevel;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğretmenin öğrenciyi rapor etmesini sağlar.
         * @param {number} [studentId]
         * @param {string} [content]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportStudent: (studentId, content, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Student/Report`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }
            if (content !== undefined) {
                localVarQueryParameter['Content'] = content;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğrencinin tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startToExportMyAllInformationsAsStudent: (options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Student/StartToExportMyAllInformations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğretmenin öğrencinin engelini kaldırmasını sağlar.
         * @param {number} [studentId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockStudent: (studentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Student/Unblock`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğrencinin profil fotoğrafını değiştirmesini sağlar.
         * @param {File} [photo]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfilePhotoAsStudent: (photo, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Student/UpdateProfilePhoto`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (photo !== undefined) {
                localVarFormParams.append('Photo', photo);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {StudentCommandsUpdateMySpecalitiesParemeters} [studentCommandsUpdateMySpecalitiesParemeters]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudentSpecalities: (studentCommandsUpdateMySpecalitiesParemeters, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Student/UpdateStudentSpecalities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(studentCommandsUpdateMySpecalitiesParemeters, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * StudentApi - functional programming interface
 * @export
 */
export const StudentApiFp = function (configuration) {
    const localVarAxiosParamCreator = StudentApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Öğretmenin öğrenciyi engellemesini sağlar.
         * @param {number} [studentId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockStudent(studentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.blockStudent(studentId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğrencinin kendi e-posta adresini değiştirebilmesini sağlar.
         * @param {string} [newEmail]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyEmailAddress(newEmail, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeMyEmailAddress(newEmail, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğrencinin kendi ismini değiştirebilmesini sağlar.
         * @param {string} [newName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyName(newName, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeMyName(newName, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğrencinin kendi telefon numarasını değiştirebilmesini sağlar.
         * @param {string} [newPhone]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyPhoneNumber(newPhone, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeMyPhoneNumber(newPhone, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğrencinin hesabının silme isteğini admine mail olarak iletir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMyAccountAsStudent(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteMyAccountAsStudent(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğrencinin kendi detayını getirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyDetailsAsStudent(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getMyDetailsAsStudent(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğrencinin detayını getirir.
         * @param {number} studentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentDetails(studentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getStudentDetails(studentId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğrencinin dışa aktarılmaya hazır verilerini listeler.
         * @param {string} [lastCreatedAt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyExportsAsStudent(lastCreatedAt, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listMyExportsAsStudent(lastCreatedAt, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} [nameSurname]
         * @param {string} [email]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginGoogleAsStudent(nameSurname, email, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.loginGoogleAsStudent(nameSurname, email, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Apple login işlevini öğrenci hesabı için gerçekleştirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithAppleAsStudent(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.loginWithAppleAsStudent(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğrenci olarak giriş yapmayı sağlar.
         * @param {string} [email]
         * @param {string} [password]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithDirectAuthAsStudent(email, password, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.loginWithDirectAuthAsStudent(email, password, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Facebook login işlevini öğrenci hesabı için gerçekleştirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithFacebookAsStudent(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.loginWithFacebookAsStudent(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Google login işlevini öğrenci hesabı için gerçekleştirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithGoogleAsStudent(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.loginWithGoogleAsStudent(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary E-posta ve şifre ile öğrenci kaydı yapılabilmesini sağlar.
         * @param {string} [nameSurname]
         * @param {string} [email]
         * @param {string} [phoneNumber]
         * @param {string} [password]
         * @param {string} [accent]
         * @param {string} [languageLevel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAsStudent(nameSurname, email, phoneNumber, password, accent, languageLevel, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.registerAsStudent(nameSurname, email, phoneNumber, password, accent, languageLevel, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğretmenin öğrenciyi rapor etmesini sağlar.
         * @param {number} [studentId]
         * @param {string} [content]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportStudent(studentId, content, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.reportStudent(studentId, content, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğrencinin tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startToExportMyAllInformationsAsStudent(options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.startToExportMyAllInformationsAsStudent(options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğretmenin öğrencinin engelini kaldırmasını sağlar.
         * @param {number} [studentId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockStudent(studentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.unblockStudent(studentId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğrencinin profil fotoğrafını değiştirmesini sağlar.
         * @param {File} [photo]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfilePhotoAsStudent(photo, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateProfilePhotoAsStudent(photo, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {StudentCommandsUpdateMySpecalitiesParemeters} [studentCommandsUpdateMySpecalitiesParemeters]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudentSpecalities(studentCommandsUpdateMySpecalitiesParemeters, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.updateStudentSpecalities(studentCommandsUpdateMySpecalitiesParemeters, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * StudentApi - factory interface
 * @export
 */
export const StudentApiFactory = function (configuration, basePath, axios) {
    const localVarFp = StudentApiFp(configuration);
    return {
        /**
         *
         * @summary Öğretmenin öğrenciyi engellemesini sağlar.
         * @param {number} [studentId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockStudent(studentId, options) {
            return localVarFp.blockStudent(studentId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğrencinin kendi e-posta adresini değiştirebilmesini sağlar.
         * @param {string} [newEmail]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyEmailAddress(newEmail, options) {
            return localVarFp.changeMyEmailAddress(newEmail, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğrencinin kendi ismini değiştirebilmesini sağlar.
         * @param {string} [newName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyName(newName, options) {
            return localVarFp.changeMyName(newName, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğrencinin kendi telefon numarasını değiştirebilmesini sağlar.
         * @param {string} [newPhone]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeMyPhoneNumber(newPhone, options) {
            return localVarFp.changeMyPhoneNumber(newPhone, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğrencinin hesabının silme isteğini admine mail olarak iletir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMyAccountAsStudent(options) {
            return localVarFp.deleteMyAccountAsStudent(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğrencinin kendi detayını getirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyDetailsAsStudent(options) {
            return localVarFp.getMyDetailsAsStudent(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğrencinin detayını getirir.
         * @param {number} studentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentDetails(studentId, options) {
            return localVarFp.getStudentDetails(studentId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğrencinin dışa aktarılmaya hazır verilerini listeler.
         * @param {string} [lastCreatedAt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyExportsAsStudent(lastCreatedAt, options) {
            return localVarFp.listMyExportsAsStudent(lastCreatedAt, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} [nameSurname]
         * @param {string} [email]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginGoogleAsStudent(nameSurname, email, options) {
            return localVarFp.loginGoogleAsStudent(nameSurname, email, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Apple login işlevini öğrenci hesabı için gerçekleştirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithAppleAsStudent(options) {
            return localVarFp.loginWithAppleAsStudent(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğrenci olarak giriş yapmayı sağlar.
         * @param {string} [email]
         * @param {string} [password]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithDirectAuthAsStudent(email, password, options) {
            return localVarFp.loginWithDirectAuthAsStudent(email, password, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Facebook login işlevini öğrenci hesabı için gerçekleştirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithFacebookAsStudent(options) {
            return localVarFp.loginWithFacebookAsStudent(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Google login işlevini öğrenci hesabı için gerçekleştirir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginWithGoogleAsStudent(options) {
            return localVarFp.loginWithGoogleAsStudent(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary E-posta ve şifre ile öğrenci kaydı yapılabilmesini sağlar.
         * @param {string} [nameSurname]
         * @param {string} [email]
         * @param {string} [phoneNumber]
         * @param {string} [password]
         * @param {string} [accent]
         * @param {string} [languageLevel]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAsStudent(nameSurname, email, phoneNumber, password, accent, languageLevel, options) {
            return localVarFp.registerAsStudent(nameSurname, email, phoneNumber, password, accent, languageLevel, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğretmenin öğrenciyi rapor etmesini sağlar.
         * @param {number} [studentId]
         * @param {string} [content]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportStudent(studentId, content, options) {
            return localVarFp.reportStudent(studentId, content, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğrencinin tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startToExportMyAllInformationsAsStudent(options) {
            return localVarFp.startToExportMyAllInformationsAsStudent(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğretmenin öğrencinin engelini kaldırmasını sağlar.
         * @param {number} [studentId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unblockStudent(studentId, options) {
            return localVarFp.unblockStudent(studentId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğrencinin profil fotoğrafını değiştirmesini sağlar.
         * @param {File} [photo]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfilePhotoAsStudent(photo, options) {
            return localVarFp.updateProfilePhotoAsStudent(photo, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {StudentCommandsUpdateMySpecalitiesParemeters} [studentCommandsUpdateMySpecalitiesParemeters]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStudentSpecalities(studentCommandsUpdateMySpecalitiesParemeters, options) {
            return localVarFp.updateStudentSpecalities(studentCommandsUpdateMySpecalitiesParemeters, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * StudentApi - object-oriented interface
 * @export
 * @class StudentApi
 * @extends {BaseAPI}
 */
export class StudentApi extends BaseAPI {
    /**
     *
     * @summary Öğretmenin öğrenciyi engellemesini sağlar.
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    blockStudent(studentId, options) {
        return StudentApiFp(this.configuration).blockStudent(studentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğrencinin kendi e-posta adresini değiştirebilmesini sağlar.
     * @param {string} [newEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    changeMyEmailAddress(newEmail, options) {
        return StudentApiFp(this.configuration).changeMyEmailAddress(newEmail, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğrencinin kendi ismini değiştirebilmesini sağlar.
     * @param {string} [newName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    changeMyName(newName, options) {
        return StudentApiFp(this.configuration).changeMyName(newName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğrencinin kendi telefon numarasını değiştirebilmesini sağlar.
     * @param {string} [newPhone]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    changeMyPhoneNumber(newPhone, options) {
        return StudentApiFp(this.configuration).changeMyPhoneNumber(newPhone, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğrencinin hesabının silme isteğini admine mail olarak iletir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    deleteMyAccountAsStudent(options) {
        return StudentApiFp(this.configuration).deleteMyAccountAsStudent(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğrencinin kendi detayını getirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    getMyDetailsAsStudent(options) {
        return StudentApiFp(this.configuration).getMyDetailsAsStudent(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğrencinin detayını getirir.
     * @param {number} studentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    getStudentDetails(studentId, options) {
        return StudentApiFp(this.configuration).getStudentDetails(studentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğrencinin dışa aktarılmaya hazır verilerini listeler.
     * @param {string} [lastCreatedAt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    listMyExportsAsStudent(lastCreatedAt, options) {
        return StudentApiFp(this.configuration).listMyExportsAsStudent(lastCreatedAt, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} [nameSurname]
     * @param {string} [email]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    loginGoogleAsStudent(nameSurname, email, options) {
        return StudentApiFp(this.configuration).loginGoogleAsStudent(nameSurname, email, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Apple login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    loginWithAppleAsStudent(options) {
        return StudentApiFp(this.configuration).loginWithAppleAsStudent(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğrenci olarak giriş yapmayı sağlar.
     * @param {string} [email]
     * @param {string} [password]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    loginWithDirectAuthAsStudent(email, password, options) {
        return StudentApiFp(this.configuration).loginWithDirectAuthAsStudent(email, password, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Facebook login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    loginWithFacebookAsStudent(options) {
        return StudentApiFp(this.configuration).loginWithFacebookAsStudent(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Google login işlevini öğrenci hesabı için gerçekleştirir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    loginWithGoogleAsStudent(options) {
        return StudentApiFp(this.configuration).loginWithGoogleAsStudent(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary E-posta ve şifre ile öğrenci kaydı yapılabilmesini sağlar.
     * @param {string} [nameSurname]
     * @param {string} [email]
     * @param {string} [phoneNumber]
     * @param {string} [password]
     * @param {string} [accent]
     * @param {string} [languageLevel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    registerAsStudent(nameSurname, email, phoneNumber, password, accent, languageLevel, options) {
        return StudentApiFp(this.configuration).registerAsStudent(nameSurname, email, phoneNumber, password, accent, languageLevel, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğretmenin öğrenciyi rapor etmesini sağlar.
     * @param {number} [studentId]
     * @param {string} [content]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    reportStudent(studentId, content, options) {
        return StudentApiFp(this.configuration).reportStudent(studentId, content, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğrencinin tüm verisini dışarı aktarma işlemini başlatır. Halihazırda dışa aktarım dosyaları hazırlanıyorsa hata vermelidir.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    startToExportMyAllInformationsAsStudent(options) {
        return StudentApiFp(this.configuration).startToExportMyAllInformationsAsStudent(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğretmenin öğrencinin engelini kaldırmasını sağlar.
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    unblockStudent(studentId, options) {
        return StudentApiFp(this.configuration).unblockStudent(studentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğrencinin profil fotoğrafını değiştirmesini sağlar.
     * @param {File} [photo]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    updateProfilePhotoAsStudent(photo, options) {
        return StudentApiFp(this.configuration).updateProfilePhotoAsStudent(photo, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {StudentCommandsUpdateMySpecalitiesParemeters} [studentCommandsUpdateMySpecalitiesParemeters]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    updateStudentSpecalities(studentCommandsUpdateMySpecalitiesParemeters, options) {
        return StudentApiFp(this.configuration).updateStudentSpecalities(studentCommandsUpdateMySpecalitiesParemeters, options).then((request) => request(this.axios, this.basePath));
    }
}

/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * StudentAdministrationApi - axios parameter creator
 * @export
 */
export const StudentAdministrationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Bir öğrencinin profil fotoğrafını onaylar.
         * @param {number} [studentId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveStudentProfilePicture: (studentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/StudentAdministration/ApproveProfilePicture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğrenciyi siteden yasaklar. Artık o hesap ve öğrencinin kullandığı ip\'ler siteye giriş yapamaz.
         * @param {number} [studentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        banStudent: (studentId, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/StudentAdministration/Ban`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğrencinin e-posta adresini değiştirir.
         * @param {number} [studentId]
         * @param {string} [newEmail]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentEmail: (studentId, newEmail, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/StudentAdministration/ChangeEmail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }
            if (newEmail !== undefined) {
                localVarQueryParameter['NewEmail'] = newEmail;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğrencinin ismini değiştirir.
         * @param {number} [studentId]
         * @param {string} [newName]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentName: (studentId, newName, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/StudentAdministration/ChangeName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }
            if (newName !== undefined) {
                localVarQueryParameter['NewName'] = newName;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğrencinin şifresini değiştirir.
         * @param {number} [studentId]
         * @param {string} [reason]
         * @param {string} [newPassword]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentPassword: (studentId, reason, newPassword, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/StudentAdministration/ChangePassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            if (newPassword !== undefined) {
                localVarQueryParameter['NewPassword'] = newPassword;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğrencinin telefon numarasını değiştirir.
         * @param {number} [studentId]
         * @param {string} [newPhoneNumber]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentPhoneNumber: (studentId, newPhoneNumber, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/StudentAdministration/ChangePhoneNumber`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }
            if (newPhoneNumber !== undefined) {
                localVarQueryParameter['NewPhoneNumber'] = newPhoneNumber;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğrencinin profil fotoğrafını değiştirir.
         * @param {File} [newProfilePicture]
         * @param {number} [studentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentProfilePicture: (newProfilePicture, studentId, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/StudentAdministration/ChangeProfilePicture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            if (newProfilePicture !== undefined) {
                localVarFormParams.append('NewProfilePicture', newProfilePicture);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğrencinin hesabını siteden siler.
         * @param {number} [studentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentAccountDueGDPR: (studentId, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/StudentAdministration/DeleteAccountDueGDPR`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Sistemdeki öğrencileri listeler
         * @param {number} studentId Öğrencinin hesap id\&#39;sidir
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentDetailsForAdministration: (studentId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'studentId' is not null or undefined
            assertParamExists('getStudentDetailsForAdministration', 'studentId', studentId);
            const localVarPath = `/api/StudentAdministration/GetStudentDetails`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğrencinin detaylarını getirir.
         * @param {string} [searchKeyword] Öğrenci ismiyle arama yapmayı sağlar.
         * @param {string} [approvementState] Öğrencinin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_STUDENTS: Sadece onaylı öğrencileri listeye dahil eder.  ONLY_UNAPPROVED_STUDENTS: Sadece onaysız öğrencileri listeye dahil eder.
         * @param {number} [page] Gidilmek istenilen sayfa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudentsForManagement: (searchKeyword, approvementState, page, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/StudentAdministration/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (searchKeyword !== undefined) {
                localVarQueryParameter['SearchKeyword'] = searchKeyword;
            }
            if (approvementState !== undefined) {
                localVarQueryParameter['ApprovementState'] = approvementState;
            }
            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğrenciyi siteden yasaklamasını Kaldırır.
         * @param {number} [studentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unBanStudent: (studentId, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/StudentAdministration/UnBan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Bir öğrencinin profil fotoğrafının onayını kaldırır.
         * @param {number} [studentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unapproveStudentProfilePicture: (studentId, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/StudentAdministration/UnapproveProfilePicture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (studentId !== undefined) {
                localVarQueryParameter['StudentId'] = studentId;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * StudentAdministrationApi - functional programming interface
 * @export
 */
export const StudentAdministrationApiFp = function (configuration) {
    const localVarAxiosParamCreator = StudentAdministrationApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Bir öğrencinin profil fotoğrafını onaylar.
         * @param {number} [studentId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveStudentProfilePicture(studentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.approveStudentProfilePicture(studentId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğrenciyi siteden yasaklar. Artık o hesap ve öğrencinin kullandığı ip\'ler siteye giriş yapamaz.
         * @param {number} [studentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        banStudent(studentId, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.banStudent(studentId, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğrencinin e-posta adresini değiştirir.
         * @param {number} [studentId]
         * @param {string} [newEmail]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentEmail(studentId, newEmail, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeStudentEmail(studentId, newEmail, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğrencinin ismini değiştirir.
         * @param {number} [studentId]
         * @param {string} [newName]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentName(studentId, newName, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeStudentName(studentId, newName, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğrencinin şifresini değiştirir.
         * @param {number} [studentId]
         * @param {string} [reason]
         * @param {string} [newPassword]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentPassword(studentId, reason, newPassword, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeStudentPassword(studentId, reason, newPassword, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğrencinin telefon numarasını değiştirir.
         * @param {number} [studentId]
         * @param {string} [newPhoneNumber]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentPhoneNumber(studentId, newPhoneNumber, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeStudentPhoneNumber(studentId, newPhoneNumber, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğrencinin profil fotoğrafını değiştirir.
         * @param {File} [newProfilePicture]
         * @param {number} [studentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentProfilePicture(newProfilePicture, studentId, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeStudentProfilePicture(newProfilePicture, studentId, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğrencinin hesabını siteden siler.
         * @param {number} [studentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentAccountDueGDPR(studentId, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteStudentAccountDueGDPR(studentId, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Sistemdeki öğrencileri listeler
         * @param {number} studentId Öğrencinin hesap id\&#39;sidir
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentDetailsForAdministration(studentId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getStudentDetailsForAdministration(studentId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğrencinin detaylarını getirir.
         * @param {string} [searchKeyword] Öğrenci ismiyle arama yapmayı sağlar.
         * @param {string} [approvementState] Öğrencinin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_STUDENTS: Sadece onaylı öğrencileri listeye dahil eder.  ONLY_UNAPPROVED_STUDENTS: Sadece onaysız öğrencileri listeye dahil eder.
         * @param {number} [page] Gidilmek istenilen sayfa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudentsForManagement(searchKeyword, approvementState, page, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listStudentsForManagement(searchKeyword, approvementState, page, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğrenciyi siteden yasaklamasını Kaldırır.
         * @param {number} [studentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unBanStudent(studentId, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.unBanStudent(studentId, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Bir öğrencinin profil fotoğrafının onayını kaldırır.
         * @param {number} [studentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unapproveStudentProfilePicture(studentId, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.unapproveStudentProfilePicture(studentId, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * StudentAdministrationApi - factory interface
 * @export
 */
export const StudentAdministrationApiFactory = function (configuration, basePath, axios) {
    const localVarFp = StudentAdministrationApiFp(configuration);
    return {
        /**
         *
         * @summary Bir öğrencinin profil fotoğrafını onaylar.
         * @param {number} [studentId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveStudentProfilePicture(studentId, options) {
            return localVarFp.approveStudentProfilePicture(studentId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğrenciyi siteden yasaklar. Artık o hesap ve öğrencinin kullandığı ip\'ler siteye giriş yapamaz.
         * @param {number} [studentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        banStudent(studentId, reason, options) {
            return localVarFp.banStudent(studentId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğrencinin e-posta adresini değiştirir.
         * @param {number} [studentId]
         * @param {string} [newEmail]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentEmail(studentId, newEmail, reason, options) {
            return localVarFp.changeStudentEmail(studentId, newEmail, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğrencinin ismini değiştirir.
         * @param {number} [studentId]
         * @param {string} [newName]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentName(studentId, newName, reason, options) {
            return localVarFp.changeStudentName(studentId, newName, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğrencinin şifresini değiştirir.
         * @param {number} [studentId]
         * @param {string} [reason]
         * @param {string} [newPassword]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentPassword(studentId, reason, newPassword, options) {
            return localVarFp.changeStudentPassword(studentId, reason, newPassword, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğrencinin telefon numarasını değiştirir.
         * @param {number} [studentId]
         * @param {string} [newPhoneNumber]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentPhoneNumber(studentId, newPhoneNumber, reason, options) {
            return localVarFp.changeStudentPhoneNumber(studentId, newPhoneNumber, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğrencinin profil fotoğrafını değiştirir.
         * @param {File} [newProfilePicture]
         * @param {number} [studentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeStudentProfilePicture(newProfilePicture, studentId, reason, options) {
            return localVarFp.changeStudentProfilePicture(newProfilePicture, studentId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğrencinin hesabını siteden siler.
         * @param {number} [studentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentAccountDueGDPR(studentId, reason, options) {
            return localVarFp.deleteStudentAccountDueGDPR(studentId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Sistemdeki öğrencileri listeler
         * @param {number} studentId Öğrencinin hesap id\&#39;sidir
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentDetailsForAdministration(studentId, options) {
            return localVarFp.getStudentDetailsForAdministration(studentId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğrencinin detaylarını getirir.
         * @param {string} [searchKeyword] Öğrenci ismiyle arama yapmayı sağlar.
         * @param {string} [approvementState] Öğrencinin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_STUDENTS: Sadece onaylı öğrencileri listeye dahil eder.  ONLY_UNAPPROVED_STUDENTS: Sadece onaysız öğrencileri listeye dahil eder.
         * @param {number} [page] Gidilmek istenilen sayfa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStudentsForManagement(searchKeyword, approvementState, page, options) {
            return localVarFp.listStudentsForManagement(searchKeyword, approvementState, page, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğrenciyi siteden yasaklamasını Kaldırır.
         * @param {number} [studentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unBanStudent(studentId, reason, options) {
            return localVarFp.unBanStudent(studentId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bir öğrencinin profil fotoğrafının onayını kaldırır.
         * @param {number} [studentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unapproveStudentProfilePicture(studentId, reason, options) {
            return localVarFp.unapproveStudentProfilePicture(studentId, reason, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * StudentAdministrationApi - object-oriented interface
 * @export
 * @class StudentAdministrationApi
 * @extends {BaseAPI}
 */
export class StudentAdministrationApi extends BaseAPI {
    /**
     *
     * @summary Bir öğrencinin profil fotoğrafını onaylar.
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    approveStudentProfilePicture(studentId, options) {
        return StudentAdministrationApiFp(this.configuration).approveStudentProfilePicture(studentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğrenciyi siteden yasaklar. Artık o hesap ve öğrencinin kullandığı ip\'ler siteye giriş yapamaz.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    banStudent(studentId, reason, options) {
        return StudentAdministrationApiFp(this.configuration).banStudent(studentId, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğrencinin e-posta adresini değiştirir.
     * @param {number} [studentId]
     * @param {string} [newEmail]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    changeStudentEmail(studentId, newEmail, reason, options) {
        return StudentAdministrationApiFp(this.configuration).changeStudentEmail(studentId, newEmail, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğrencinin ismini değiştirir.
     * @param {number} [studentId]
     * @param {string} [newName]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    changeStudentName(studentId, newName, reason, options) {
        return StudentAdministrationApiFp(this.configuration).changeStudentName(studentId, newName, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğrencinin şifresini değiştirir.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {string} [newPassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    changeStudentPassword(studentId, reason, newPassword, options) {
        return StudentAdministrationApiFp(this.configuration).changeStudentPassword(studentId, reason, newPassword, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğrencinin telefon numarasını değiştirir.
     * @param {number} [studentId]
     * @param {string} [newPhoneNumber]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    changeStudentPhoneNumber(studentId, newPhoneNumber, reason, options) {
        return StudentAdministrationApiFp(this.configuration).changeStudentPhoneNumber(studentId, newPhoneNumber, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğrencinin profil fotoğrafını değiştirir.
     * @param {File} [newProfilePicture]
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    changeStudentProfilePicture(newProfilePicture, studentId, reason, options) {
        return StudentAdministrationApiFp(this.configuration).changeStudentProfilePicture(newProfilePicture, studentId, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğrencinin hesabını siteden siler.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    deleteStudentAccountDueGDPR(studentId, reason, options) {
        return StudentAdministrationApiFp(this.configuration).deleteStudentAccountDueGDPR(studentId, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Sistemdeki öğrencileri listeler
     * @param {number} studentId Öğrencinin hesap id\&#39;sidir
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    getStudentDetailsForAdministration(studentId, options) {
        return StudentAdministrationApiFp(this.configuration).getStudentDetailsForAdministration(studentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğrencinin detaylarını getirir.
     * @param {string} [searchKeyword] Öğrenci ismiyle arama yapmayı sağlar.
     * @param {string} [approvementState] Öğrencinin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_STUDENTS: Sadece onaylı öğrencileri listeye dahil eder.  ONLY_UNAPPROVED_STUDENTS: Sadece onaysız öğrencileri listeye dahil eder.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    listStudentsForManagement(searchKeyword, approvementState, page, options) {
        return StudentAdministrationApiFp(this.configuration).listStudentsForManagement(searchKeyword, approvementState, page, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğrenciyi siteden yasaklamasını Kaldırır.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    unBanStudent(studentId, reason, options) {
        return StudentAdministrationApiFp(this.configuration).unBanStudent(studentId, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bir öğrencinin profil fotoğrafının onayını kaldırır.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    unapproveStudentProfilePicture(studentId, reason, options) {
        return StudentAdministrationApiFp(this.configuration).unapproveStudentProfilePicture(studentId, reason, options).then((request) => request(this.axios, this.basePath));
    }
}

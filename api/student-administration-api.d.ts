/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { StudentAdministrationCommandsChangeProfilePictureCommandResult } from '../models';
import { StudentAdministrationQueriesGetStudentDetailsQueryResult } from '../models';
import { StudentAdministrationQueriesListQueryResult } from '../models';
/**
 * StudentAdministrationApi - axios parameter creator
 * @export
 */
export declare const StudentAdministrationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Bir öğrencinin profil fotoğrafını onaylar.
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approveStudentProfilePicture: (studentId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğrenciyi siteden yasaklar. Artık o hesap ve öğrencinin kullandığı ip\'ler siteye giriş yapamaz.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    banStudent: (studentId?: number, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğrencinin e-posta adresini değiştirir.
     * @param {number} [studentId]
     * @param {string} [newEmail]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeStudentEmail: (studentId?: number, newEmail?: string, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğrencinin ismini değiştirir.
     * @param {number} [studentId]
     * @param {string} [newName]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeStudentName: (studentId?: number, newName?: string, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğrencinin şifresini değiştirir.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {string} [newPassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeStudentPassword: (studentId?: number, reason?: string, newPassword?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğrencinin telefon numarasını değiştirir.
     * @param {number} [studentId]
     * @param {string} [newPhoneNumber]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeStudentPhoneNumber: (studentId?: number, newPhoneNumber?: string, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğrencinin profil fotoğrafını değiştirir.
     * @param {File} [newProfilePicture]
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeStudentProfilePicture: (newProfilePicture?: File, studentId?: number, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğrencinin hesabını siteden siler.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStudentAccountDueGDPR: (studentId?: number, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Sistemdeki öğrencileri listeler
     * @param {number} studentId Öğrencinin hesap id\&#39;sidir
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudentDetailsForAdministration: (studentId: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğrencinin detaylarını getirir.
     * @param {string} [searchKeyword] Öğrenci ismiyle arama yapmayı sağlar.
     * @param {string} [approvementState] Öğrencinin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_STUDENTS: Sadece onaylı öğrencileri listeye dahil eder.  ONLY_UNAPPROVED_STUDENTS: Sadece onaysız öğrencileri listeye dahil eder.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStudentsForManagement: (searchKeyword?: string, approvementState?: string, page?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğrenciyi siteden yasaklamasını Kaldırır.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unBanStudent: (studentId?: number, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Bir öğrencinin profil fotoğrafının onayını kaldırır.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unapproveStudentProfilePicture: (studentId?: number, reason?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StudentAdministrationApi - functional programming interface
 * @export
 */
export declare const StudentAdministrationApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Bir öğrencinin profil fotoğrafını onaylar.
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approveStudentProfilePicture(studentId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Bir öğrenciyi siteden yasaklar. Artık o hesap ve öğrencinin kullandığı ip\'ler siteye giriş yapamaz.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    banStudent(studentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Bir öğrencinin e-posta adresini değiştirir.
     * @param {number} [studentId]
     * @param {string} [newEmail]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeStudentEmail(studentId?: number, newEmail?: string, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Bir öğrencinin ismini değiştirir.
     * @param {number} [studentId]
     * @param {string} [newName]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeStudentName(studentId?: number, newName?: string, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Bir öğrencinin şifresini değiştirir.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {string} [newPassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeStudentPassword(studentId?: number, reason?: string, newPassword?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Bir öğrencinin telefon numarasını değiştirir.
     * @param {number} [studentId]
     * @param {string} [newPhoneNumber]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeStudentPhoneNumber(studentId?: number, newPhoneNumber?: string, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Bir öğrencinin profil fotoğrafını değiştirir.
     * @param {File} [newProfilePicture]
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeStudentProfilePicture(newProfilePicture?: File, studentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentAdministrationCommandsChangeProfilePictureCommandResult>>;
    /**
     *
     * @summary Bir öğrencinin hesabını siteden siler.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStudentAccountDueGDPR(studentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Sistemdeki öğrencileri listeler
     * @param {number} studentId Öğrencinin hesap id\&#39;sidir
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudentDetailsForAdministration(studentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentAdministrationQueriesGetStudentDetailsQueryResult>>;
    /**
     *
     * @summary Bir öğrencinin detaylarını getirir.
     * @param {string} [searchKeyword] Öğrenci ismiyle arama yapmayı sağlar.
     * @param {string} [approvementState] Öğrencinin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_STUDENTS: Sadece onaylı öğrencileri listeye dahil eder.  ONLY_UNAPPROVED_STUDENTS: Sadece onaysız öğrencileri listeye dahil eder.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStudentsForManagement(searchKeyword?: string, approvementState?: string, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StudentAdministrationQueriesListQueryResult>>;
    /**
     *
     * @summary Bir öğrenciyi siteden yasaklamasını Kaldırır.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unBanStudent(studentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     *
     * @summary Bir öğrencinin profil fotoğrafının onayını kaldırır.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unapproveStudentProfilePicture(studentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * StudentAdministrationApi - factory interface
 * @export
 */
export declare const StudentAdministrationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Bir öğrencinin profil fotoğrafını onaylar.
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approveStudentProfilePicture(studentId?: number, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğrenciyi siteden yasaklar. Artık o hesap ve öğrencinin kullandığı ip\'ler siteye giriş yapamaz.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    banStudent(studentId?: number, reason?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğrencinin e-posta adresini değiştirir.
     * @param {number} [studentId]
     * @param {string} [newEmail]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeStudentEmail(studentId?: number, newEmail?: string, reason?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğrencinin ismini değiştirir.
     * @param {number} [studentId]
     * @param {string} [newName]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeStudentName(studentId?: number, newName?: string, reason?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğrencinin şifresini değiştirir.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {string} [newPassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeStudentPassword(studentId?: number, reason?: string, newPassword?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğrencinin telefon numarasını değiştirir.
     * @param {number} [studentId]
     * @param {string} [newPhoneNumber]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeStudentPhoneNumber(studentId?: number, newPhoneNumber?: string, reason?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğrencinin profil fotoğrafını değiştirir.
     * @param {File} [newProfilePicture]
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeStudentProfilePicture(newProfilePicture?: File, studentId?: number, reason?: string, options?: any): AxiosPromise<StudentAdministrationCommandsChangeProfilePictureCommandResult>;
    /**
     *
     * @summary Bir öğrencinin hesabını siteden siler.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStudentAccountDueGDPR(studentId?: number, reason?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Sistemdeki öğrencileri listeler
     * @param {number} studentId Öğrencinin hesap id\&#39;sidir
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStudentDetailsForAdministration(studentId: number, options?: any): AxiosPromise<StudentAdministrationQueriesGetStudentDetailsQueryResult>;
    /**
     *
     * @summary Bir öğrencinin detaylarını getirir.
     * @param {string} [searchKeyword] Öğrenci ismiyle arama yapmayı sağlar.
     * @param {string} [approvementState] Öğrencinin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_STUDENTS: Sadece onaylı öğrencileri listeye dahil eder.  ONLY_UNAPPROVED_STUDENTS: Sadece onaysız öğrencileri listeye dahil eder.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listStudentsForManagement(searchKeyword?: string, approvementState?: string, page?: number, options?: any): AxiosPromise<StudentAdministrationQueriesListQueryResult>;
    /**
     *
     * @summary Bir öğrenciyi siteden yasaklamasını Kaldırır.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unBanStudent(studentId?: number, reason?: string, options?: any): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğrencinin profil fotoğrafının onayını kaldırır.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unapproveStudentProfilePicture(studentId?: number, reason?: string, options?: any): AxiosPromise<object>;
};
/**
 * StudentAdministrationApi - interface
 * @export
 * @interface StudentAdministrationApi
 */
export interface StudentAdministrationApiInterface {
    /**
     *
     * @summary Bir öğrencinin profil fotoğrafını onaylar.
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    approveStudentProfilePicture(studentId?: number, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğrenciyi siteden yasaklar. Artık o hesap ve öğrencinin kullandığı ip\'ler siteye giriş yapamaz.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    banStudent(studentId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğrencinin e-posta adresini değiştirir.
     * @param {number} [studentId]
     * @param {string} [newEmail]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    changeStudentEmail(studentId?: number, newEmail?: string, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğrencinin ismini değiştirir.
     * @param {number} [studentId]
     * @param {string} [newName]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    changeStudentName(studentId?: number, newName?: string, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğrencinin şifresini değiştirir.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {string} [newPassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    changeStudentPassword(studentId?: number, reason?: string, newPassword?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğrencinin telefon numarasını değiştirir.
     * @param {number} [studentId]
     * @param {string} [newPhoneNumber]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    changeStudentPhoneNumber(studentId?: number, newPhoneNumber?: string, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğrencinin profil fotoğrafını değiştirir.
     * @param {File} [newProfilePicture]
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    changeStudentProfilePicture(newProfilePicture?: File, studentId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<StudentAdministrationCommandsChangeProfilePictureCommandResult>;
    /**
     *
     * @summary Bir öğrencinin hesabını siteden siler.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    deleteStudentAccountDueGDPR(studentId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Sistemdeki öğrencileri listeler
     * @param {number} studentId Öğrencinin hesap id\&#39;sidir
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    getStudentDetailsForAdministration(studentId: number, options?: AxiosRequestConfig): AxiosPromise<StudentAdministrationQueriesGetStudentDetailsQueryResult>;
    /**
     *
     * @summary Bir öğrencinin detaylarını getirir.
     * @param {string} [searchKeyword] Öğrenci ismiyle arama yapmayı sağlar.
     * @param {string} [approvementState] Öğrencinin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_STUDENTS: Sadece onaylı öğrencileri listeye dahil eder.  ONLY_UNAPPROVED_STUDENTS: Sadece onaysız öğrencileri listeye dahil eder.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    listStudentsForManagement(searchKeyword?: string, approvementState?: string, page?: number, options?: AxiosRequestConfig): AxiosPromise<StudentAdministrationQueriesListQueryResult>;
    /**
     *
     * @summary Bir öğrenciyi siteden yasaklamasını Kaldırır.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    unBanStudent(studentId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
    /**
     *
     * @summary Bir öğrencinin profil fotoğrafının onayını kaldırır.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApiInterface
     */
    unapproveStudentProfilePicture(studentId?: number, reason?: string, options?: AxiosRequestConfig): AxiosPromise<object>;
}
/**
 * StudentAdministrationApi - object-oriented interface
 * @export
 * @class StudentAdministrationApi
 * @extends {BaseAPI}
 */
export declare class StudentAdministrationApi extends BaseAPI implements StudentAdministrationApiInterface {
    /**
     *
     * @summary Bir öğrencinin profil fotoğrafını onaylar.
     * @param {number} [studentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    approveStudentProfilePicture(studentId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Bir öğrenciyi siteden yasaklar. Artık o hesap ve öğrencinin kullandığı ip\'ler siteye giriş yapamaz.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    banStudent(studentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Bir öğrencinin e-posta adresini değiştirir.
     * @param {number} [studentId]
     * @param {string} [newEmail]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    changeStudentEmail(studentId?: number, newEmail?: string, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Bir öğrencinin ismini değiştirir.
     * @param {number} [studentId]
     * @param {string} [newName]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    changeStudentName(studentId?: number, newName?: string, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Bir öğrencinin şifresini değiştirir.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {string} [newPassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    changeStudentPassword(studentId?: number, reason?: string, newPassword?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Bir öğrencinin telefon numarasını değiştirir.
     * @param {number} [studentId]
     * @param {string} [newPhoneNumber]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    changeStudentPhoneNumber(studentId?: number, newPhoneNumber?: string, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Bir öğrencinin profil fotoğrafını değiştirir.
     * @param {File} [newProfilePicture]
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    changeStudentProfilePicture(newProfilePicture?: File, studentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StudentAdministrationCommandsChangeProfilePictureCommandResult, any>>;
    /**
     *
     * @summary Bir öğrencinin hesabını siteden siler.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    deleteStudentAccountDueGDPR(studentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Sistemdeki öğrencileri listeler
     * @param {number} studentId Öğrencinin hesap id\&#39;sidir
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    getStudentDetailsForAdministration(studentId: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StudentAdministrationQueriesGetStudentDetailsQueryResult, any>>;
    /**
     *
     * @summary Bir öğrencinin detaylarını getirir.
     * @param {string} [searchKeyword] Öğrenci ismiyle arama yapmayı sağlar.
     * @param {string} [approvementState] Öğrencinin onay durumuna göre aramayı sağlar.  Seçenekler:  ONLY_APPROVED_STUDENTS: Sadece onaylı öğrencileri listeye dahil eder.  ONLY_UNAPPROVED_STUDENTS: Sadece onaysız öğrencileri listeye dahil eder.
     * @param {number} [page] Gidilmek istenilen sayfa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    listStudentsForManagement(searchKeyword?: string, approvementState?: string, page?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StudentAdministrationQueriesListQueryResult, any>>;
    /**
     *
     * @summary Bir öğrenciyi siteden yasaklamasını Kaldırır.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    unBanStudent(studentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     *
     * @summary Bir öğrencinin profil fotoğrafının onayını kaldırır.
     * @param {number} [studentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentAdministrationApi
     */
    unapproveStudentProfilePicture(studentId?: number, reason?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
}

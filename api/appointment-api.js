/* tslint:disable */
/* eslint-disable */
/**
 * Advancer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.104
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * AppointmentApi - axios parameter creator
 * @export
 */
export const AppointmentApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Öğrencinin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 1 saat kala iptal işlemi gerçekleştirilebilir.
         * @param {number} [appointmentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAppointmentAsStudent: (appointmentId, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Appointment/CancelAsStudent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (appointmentId !== undefined) {
                localVarQueryParameter['AppointmentId'] = appointmentId;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğretmenin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 15 dakika kala iptal işlemi gerçekleştirilebilir.
         * @param {number} [appointmentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAppointmentAsTeacher: (appointmentId, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Appointment/CancelAsTeacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (appointmentId !== undefined) {
                localVarQueryParameter['AppointmentId'] = appointmentId;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğrenci olarak randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 1 saat kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
         * @param {number} [appointmentId]
         * @param {string} [startTime]
         * @param {string} [endTime]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeDateTimeAsStudent: (appointmentId, startTime, endTime, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Appointment/ChangeDateTimeAsStudent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (appointmentId !== undefined) {
                localVarQueryParameter['AppointmentId'] = appointmentId;
            }
            if (startTime !== undefined) {
                localVarQueryParameter['StartTime'] = (startTime instanceof Date) ?
                    startTime.toISOString() :
                    startTime;
            }
            if (endTime !== undefined) {
                localVarQueryParameter['EndTime'] = (endTime instanceof Date) ?
                    endTime.toISOString() :
                    endTime;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 15 dakika kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
         * @param {number} [appointmentId]
         * @param {string} [startTime]
         * @param {string} [endTime]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeDateTimeAsTeacher: (appointmentId, startTime, endTime, reason, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Appointment/ChangeDateTimeAsTeacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (appointmentId !== undefined) {
                localVarQueryParameter['AppointmentId'] = appointmentId;
            }
            if (startTime !== undefined) {
                localVarQueryParameter['StartTime'] = (startTime instanceof Date) ?
                    startTime.toISOString() :
                    startTime;
            }
            if (endTime !== undefined) {
                localVarQueryParameter['EndTime'] = (endTime instanceof Date) ?
                    endTime.toISOString() :
                    endTime;
            }
            if (reason !== undefined) {
                localVarQueryParameter['Reason'] = reason;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğrencinin öğretmenden randevu almasını sağlar.
         * @param {AppointmentCommandsSelectedTimeRange} [appointmentCommandsSelectedTimeRange]
         * @param {number} [teacherId]
         * @param {string} [infoTimeZone]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointment: (appointmentCommandsSelectedTimeRange, teacherId, infoTimeZone, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Appointment/Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (teacherId !== undefined) {
                localVarQueryParameter['TeacherId'] = teacherId;
            }
            if (infoTimeZone !== undefined) {
                localVarQueryParameter['InfoTimeZone'] = infoTimeZone;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = serializeDataIfNeeded(appointmentCommandsSelectedTimeRange, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Hesabın içinde bulunduğu randevuların listesini getirir.
         * @param {number} [lastId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyAppointments: (lastId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Appointment/ListMyAppointments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (lastId !== undefined) {
                localVarQueryParameter['LastId'] = lastId;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğrencinin randevuyu şikayet etmesini sağlar.
         * @param {number} [appointmentId]
         * @param {string} [title]
         * @param {string} [description]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportAppointmentAsStudent: (appointmentId, title, description, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Appointment/ReportAsStudent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (appointmentId !== undefined) {
                localVarQueryParameter['AppointmentId'] = appointmentId;
            }
            if (title !== undefined) {
                localVarQueryParameter['Title'] = title;
            }
            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @summary Öğretmenin randevuyu şikayet etmesini sağlar.
         * @param {number} [appointmentId]
         * @param {string} [title]
         * @param {string} [description]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportAppointmentAsTeacher: (appointmentId, title, description, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/Appointment/ReportAsTeacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            yield setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (appointmentId !== undefined) {
                localVarQueryParameter['AppointmentId'] = appointmentId;
            }
            if (title !== undefined) {
                localVarQueryParameter['Title'] = title;
            }
            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * AppointmentApi - functional programming interface
 * @export
 */
export const AppointmentApiFp = function (configuration) {
    const localVarAxiosParamCreator = AppointmentApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Öğrencinin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 1 saat kala iptal işlemi gerçekleştirilebilir.
         * @param {number} [appointmentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAppointmentAsStudent(appointmentId, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cancelAppointmentAsStudent(appointmentId, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğretmenin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 15 dakika kala iptal işlemi gerçekleştirilebilir.
         * @param {number} [appointmentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAppointmentAsTeacher(appointmentId, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.cancelAppointmentAsTeacher(appointmentId, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğrenci olarak randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 1 saat kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
         * @param {number} [appointmentId]
         * @param {string} [startTime]
         * @param {string} [endTime]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeDateTimeAsStudent(appointmentId, startTime, endTime, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeDateTimeAsStudent(appointmentId, startTime, endTime, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 15 dakika kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
         * @param {number} [appointmentId]
         * @param {string} [startTime]
         * @param {string} [endTime]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeDateTimeAsTeacher(appointmentId, startTime, endTime, reason, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changeDateTimeAsTeacher(appointmentId, startTime, endTime, reason, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğrencinin öğretmenden randevu almasını sağlar.
         * @param {AppointmentCommandsSelectedTimeRange} [appointmentCommandsSelectedTimeRange]
         * @param {number} [teacherId]
         * @param {string} [infoTimeZone]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointment(appointmentCommandsSelectedTimeRange, teacherId, infoTimeZone, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAppointment(appointmentCommandsSelectedTimeRange, teacherId, infoTimeZone, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Hesabın içinde bulunduğu randevuların listesini getirir.
         * @param {number} [lastId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyAppointments(lastId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.listMyAppointments(lastId, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğrencinin randevuyu şikayet etmesini sağlar.
         * @param {number} [appointmentId]
         * @param {string} [title]
         * @param {string} [description]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportAppointmentAsStudent(appointmentId, title, description, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.reportAppointmentAsStudent(appointmentId, title, description, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
        /**
         *
         * @summary Öğretmenin randevuyu şikayet etmesini sağlar.
         * @param {number} [appointmentId]
         * @param {string} [title]
         * @param {string} [description]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportAppointmentAsTeacher(appointmentId, title, description, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.reportAppointmentAsTeacher(appointmentId, title, description, options);
                return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
            });
        },
    };
};
/**
 * AppointmentApi - factory interface
 * @export
 */
export const AppointmentApiFactory = function (configuration, basePath, axios) {
    const localVarFp = AppointmentApiFp(configuration);
    return {
        /**
         *
         * @summary Öğrencinin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 1 saat kala iptal işlemi gerçekleştirilebilir.
         * @param {number} [appointmentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAppointmentAsStudent(appointmentId, reason, options) {
            return localVarFp.cancelAppointmentAsStudent(appointmentId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğretmenin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 15 dakika kala iptal işlemi gerçekleştirilebilir.
         * @param {number} [appointmentId]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelAppointmentAsTeacher(appointmentId, reason, options) {
            return localVarFp.cancelAppointmentAsTeacher(appointmentId, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğrenci olarak randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 1 saat kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
         * @param {number} [appointmentId]
         * @param {string} [startTime]
         * @param {string} [endTime]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeDateTimeAsStudent(appointmentId, startTime, endTime, reason, options) {
            return localVarFp.changeDateTimeAsStudent(appointmentId, startTime, endTime, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 15 dakika kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
         * @param {number} [appointmentId]
         * @param {string} [startTime]
         * @param {string} [endTime]
         * @param {string} [reason]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeDateTimeAsTeacher(appointmentId, startTime, endTime, reason, options) {
            return localVarFp.changeDateTimeAsTeacher(appointmentId, startTime, endTime, reason, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğrencinin öğretmenden randevu almasını sağlar.
         * @param {AppointmentCommandsSelectedTimeRange} [appointmentCommandsSelectedTimeRange]
         * @param {number} [teacherId]
         * @param {string} [infoTimeZone]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAppointment(appointmentCommandsSelectedTimeRange, teacherId, infoTimeZone, options) {
            return localVarFp.createAppointment(appointmentCommandsSelectedTimeRange, teacherId, infoTimeZone, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Hesabın içinde bulunduğu randevuların listesini getirir.
         * @param {number} [lastId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMyAppointments(lastId, options) {
            return localVarFp.listMyAppointments(lastId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğrencinin randevuyu şikayet etmesini sağlar.
         * @param {number} [appointmentId]
         * @param {string} [title]
         * @param {string} [description]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportAppointmentAsStudent(appointmentId, title, description, options) {
            return localVarFp.reportAppointmentAsStudent(appointmentId, title, description, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Öğretmenin randevuyu şikayet etmesini sağlar.
         * @param {number} [appointmentId]
         * @param {string} [title]
         * @param {string} [description]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportAppointmentAsTeacher(appointmentId, title, description, options) {
            return localVarFp.reportAppointmentAsTeacher(appointmentId, title, description, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * AppointmentApi - object-oriented interface
 * @export
 * @class AppointmentApi
 * @extends {BaseAPI}
 */
export class AppointmentApi extends BaseAPI {
    /**
     *
     * @summary Öğrencinin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 1 saat kala iptal işlemi gerçekleştirilebilir.
     * @param {number} [appointmentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    cancelAppointmentAsStudent(appointmentId, reason, options) {
        return AppointmentApiFp(this.configuration).cancelAppointmentAsStudent(appointmentId, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğretmenin dahil olduğu bir randevuyu iptal etmesini sağlar. Randevunun başlangıcına minimum 15 dakika kala iptal işlemi gerçekleştirilebilir.
     * @param {number} [appointmentId]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    cancelAppointmentAsTeacher(appointmentId, reason, options) {
        return AppointmentApiFp(this.configuration).cancelAppointmentAsTeacher(appointmentId, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğrenci olarak randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 1 saat kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
     * @param {number} [appointmentId]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    changeDateTimeAsStudent(appointmentId, startTime, endTime, reason, options) {
        return AppointmentApiFp(this.configuration).changeDateTimeAsStudent(appointmentId, startTime, endTime, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Randevu vaktini değiştirmeye yarar. Değiştirilebilmesi için randevuya minimum 15 dakika kalmış olması gerekir. Aynı gün içinde, aynı randevu üzerinde sadece 1 kere değişiklik yapılabilir. Bunun dışındaki değişiklikler için sistem yöneticisiyle irtibata geçilmesi gerekir.
     * @param {number} [appointmentId]
     * @param {string} [startTime]
     * @param {string} [endTime]
     * @param {string} [reason]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    changeDateTimeAsTeacher(appointmentId, startTime, endTime, reason, options) {
        return AppointmentApiFp(this.configuration).changeDateTimeAsTeacher(appointmentId, startTime, endTime, reason, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğrencinin öğretmenden randevu almasını sağlar.
     * @param {AppointmentCommandsSelectedTimeRange} [appointmentCommandsSelectedTimeRange]
     * @param {number} [teacherId]
     * @param {string} [infoTimeZone]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    createAppointment(appointmentCommandsSelectedTimeRange, teacherId, infoTimeZone, options) {
        return AppointmentApiFp(this.configuration).createAppointment(appointmentCommandsSelectedTimeRange, teacherId, infoTimeZone, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Hesabın içinde bulunduğu randevuların listesini getirir.
     * @param {number} [lastId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    listMyAppointments(lastId, options) {
        return AppointmentApiFp(this.configuration).listMyAppointments(lastId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğrencinin randevuyu şikayet etmesini sağlar.
     * @param {number} [appointmentId]
     * @param {string} [title]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    reportAppointmentAsStudent(appointmentId, title, description, options) {
        return AppointmentApiFp(this.configuration).reportAppointmentAsStudent(appointmentId, title, description, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Öğretmenin randevuyu şikayet etmesini sağlar.
     * @param {number} [appointmentId]
     * @param {string} [title]
     * @param {string} [description]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppointmentApi
     */
    reportAppointmentAsTeacher(appointmentId, title, description, options) {
        return AppointmentApiFp(this.configuration).reportAppointmentAsTeacher(appointmentId, title, description, options).then((request) => request(this.axios, this.basePath));
    }
}
